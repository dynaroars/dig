sage infer_axioms.py JStack.py
(<function push at 0x7fa7b4be7040>, 'push', [0])
(<function pop at 0x7fa7b4b8f550>, 'pop', [0])
(<function peek at 0x7fa7b4b393a0>, 'peek', [])
(<function empty at 0x7fa7b4ad7f70>, 'empty', [])
(<function size at 0x7fa7b4ad7e50>, 'size', [])
(<function isEmpty at 0x7fa7b4ad7dc0>, 'isEmpty', [])
eqfun.py:Info:18 enumerated terms
eqfun.py:Debug:
0. push(Stack, int)
1. empty(Stack)
2. size(Stack)
3. isEmpty(Stack)
4. pop(push(Stack, int))
5. peek(push(Stack, int))
6. empty(push(Stack, int))
7. push(Stack, size(Stack))
8. size(push(Stack, int))
9. isEmpty(push(Stack, int))
10. peek(pop(push(Stack, int)))
11. empty(pop(push(Stack, int)))
12. pop(push(Stack, size(Stack)))
13. size(pop(push(Stack, int)))
14. isEmpty(pop(push(Stack, int)))
15. peek(push(Stack, size(Stack)))
16. empty(push(Stack, size(Stack)))
17. isEmpty(push(Stack, size(Stack)))
eqfun.py:Info:13 const eqts
eqfun.py:Debug:
0. int = pop(push(Stack, int))
1. int = peek(push(Stack, int))
2. bool = empty(push(Stack, int))
3. int = size(push(Stack, int))
4. bool = isEmpty(push(Stack, int))
5. int = peek(pop(push(Stack, int)))
6. bool = empty(pop(push(Stack, int)))
7. int = pop(push(Stack, size(Stack)))
8. int = size(pop(push(Stack, int)))
9. bool = isEmpty(pop(push(Stack, int)))
10. int = peek(push(Stack, size(Stack)))
11. bool = empty(push(Stack, size(Stack)))
12. bool = isEmpty(push(Stack, size(Stack)))
eqfun.py:Info:29 term eqts
eqfun.py:Debug:
0. empty(Stack) = isEmpty(Stack)
1. empty(Stack) = isEmpty(push(Stack, int))
2. empty(Stack) = isEmpty(push(Stack, size(Stack)))
3. pop(push(Stack, int)) = peek(push(Stack, int))
4. pop(push(Stack, int)) = peek(pop(push(Stack, int)))
5. peek(push(Stack, int)) = size(Stack)
6. peek(push(Stack, int)) = size(push(Stack, int))
7. peek(push(Stack, int)) = size(pop(push(Stack, int)))
8. empty(push(Stack, int)) = isEmpty(Stack)
9. empty(push(Stack, int)) = isEmpty(push(Stack, int))
10. empty(push(Stack, int)) = isEmpty(pop(push(Stack, int)))
11. empty(push(Stack, int)) = isEmpty(push(Stack, size(Stack)))
12. size(push(Stack, int)) = peek(pop(push(Stack, int)))
13. size(push(Stack, int)) = peek(push(Stack, size(Stack)))
14. isEmpty(push(Stack, int)) = empty(pop(push(Stack, int)))
15. isEmpty(push(Stack, int)) = empty(push(Stack, size(Stack)))
16. peek(pop(push(Stack, int))) = size(Stack)
17. peek(pop(push(Stack, int))) = size(pop(push(Stack, int)))
18. empty(pop(push(Stack, int))) = isEmpty(Stack)
19. empty(pop(push(Stack, int))) = isEmpty(pop(push(Stack, int)))
20. empty(pop(push(Stack, int))) = isEmpty(push(Stack, size(Stack)))
21. pop(push(Stack, size(Stack))) = size(pop(push(Stack, int)))
22. pop(push(Stack, size(Stack))) = peek(push(Stack, size(Stack)))
23. size(pop(push(Stack, int))) = peek(push(Stack, size(Stack)))
24. isEmpty(pop(push(Stack, int))) = empty(Stack)
25. isEmpty(pop(push(Stack, int))) = empty(push(Stack, size(Stack)))
26. peek(push(Stack, size(Stack))) = size(Stack)
27. empty(push(Stack, size(Stack))) = isEmpty(Stack)
28. empty(push(Stack, size(Stack))) = isEmpty(push(Stack, size(Stack)))
