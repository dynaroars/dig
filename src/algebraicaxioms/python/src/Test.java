
import java.util.*;
public class Test{
    public static void main(String args[]){
        System.out.println(f_0_0_0());
System.out.println(f_0_1_0());
System.out.println(f_0_2_0());
System.out.println(f_0_3_0());
System.out.println(f_1_0_0());
System.out.println(f_2_0_0());
System.out.println(f_2_1_0());
System.out.println(f_3_0_0());
System.out.println(f_3_1_0());
System.out.println(f_4_0_0());
System.out.println(f_4_1_0());
System.out.println(f_4_2_0());
System.out.println(f_4_3_0());
System.out.println(f_4_4_0());
System.out.println(f_5_0_0());
System.out.println(f_5_1_0());
System.out.println(f_5_2_0());
System.out.println(f_5_3_0());
System.out.println(f_6_0_0());
System.out.println(f_6_1_0());
System.out.println(f_7_0_0());
System.out.println(f_7_1_0());
System.out.println(f_7_2_0());
System.out.println(f_7_3_0());
System.out.println(f_7_4_0());
System.out.println(f_8_0_0());
System.out.println(f_8_1_0());
System.out.println(f_8_2_0());
System.out.println(f_8_3_0());
System.out.println(f_8_4_0());
System.out.println(f_9_0_0());
System.out.println(f_9_1_0());
System.out.println(f_9_2_0());
System.out.println(f_9_3_0());
System.out.println(f_10_0_0());
System.out.println(f_10_1_0());
System.out.println(f_10_2_0());
System.out.println(f_10_3_0());
System.out.println(f_11_0_0());
System.out.println(f_11_1_0());
System.out.println(f_11_2_0());
System.out.println(f_11_3_0());
System.out.println(f_11_4_0());
System.out.println(f_12_0_0());
System.out.println(f_12_1_0());
System.out.println(f_13_0_0());
System.out.println(f_13_1_0());
System.out.println(f_13_2_0());
System.out.println(f_13_3_0());
System.out.println(f_14_0_0());
System.out.println(f_14_1_0());
System.out.println(f_14_2_0());
System.out.println(f_14_3_0());
System.out.println(f_14_4_0());
System.out.println(f_14_5_0());
System.out.println(f_14_6_0());
System.out.println(f_14_7_0());
System.out.println(f_14_8_0());
System.out.println(f_14_9_0());
System.out.println(f_14_10_0());
System.out.println(f_14_11_0());
System.out.println(f_14_12_0());
System.out.println(f_14_13_0());
System.out.println(f_14_14_0());
System.out.println(f_15_0_0());
System.out.println(f_15_1_0());
System.out.println(f_15_2_0());
System.out.println(f_15_3_0());
System.out.println(f_16_0_0());
System.out.println(f_16_1_0());
System.out.println(f_16_2_0());
System.out.println(f_16_3_0());
System.out.println(f_16_4_0());
System.out.println(f_17_0_0());
System.out.println(f_17_1_0());
System.out.println(f_18_0_0());
System.out.println(f_18_1_0());
System.out.println(f_19_0_0());
System.out.println(f_19_1_0());
System.out.println(f_19_2_0());
System.out.println(f_19_3_0());
System.out.println(f_20_0_0());
System.out.println(f_20_1_0());
System.out.println(f_21_0_0());
System.out.println(f_21_1_0());
System.out.println(f_21_2_0());
System.out.println(f_21_3_0());
System.out.println(f_21_4_0());
System.out.println(f_22_0_0());
System.out.println(f_23_0_0());
System.out.println(f_23_1_0());
System.out.println(f_23_2_0());
System.out.println(f_23_3_0());
System.out.println(f_23_4_0());
System.out.println(f_23_5_0());
System.out.println(f_23_6_0());
System.out.println(f_23_7_0());
System.out.println(f_23_8_0());
System.out.println(f_23_9_0());
System.out.println(f_23_10_0());
System.out.println(f_23_11_0());
System.out.println(f_23_12_0());
System.out.println(f_23_13_0());
System.out.println(f_23_14_0());
System.out.println(f_24_0_0());
System.out.println(f_25_0_0());
System.out.println(f_25_1_0());
System.out.println(f_25_2_0());
System.out.println(f_25_3_0());
System.out.println(f_26_0_0());
System.out.println(f_26_1_0());
System.out.println(f_27_0_0());
System.out.println(f_27_1_0());
System.out.println(f_28_0_0());
System.out.println(f_28_1_0());
System.out.println(f_29_0_0());
System.out.println(f_29_1_0());
System.out.println(f_29_2_0());
System.out.println(f_29_3_0());
System.out.println(f_30_0_0());
System.out.println(f_30_1_0());
System.out.println(f_31_0_0());
System.out.println(f_31_1_0());
System.out.println(f_32_0_0());
System.out.println(f_32_1_0());
System.out.println(f_33_0_0());
System.out.println(f_33_1_0());
System.out.println(f_33_2_0());
System.out.println(f_33_3_0());
System.out.println(f_34_0_0());
System.out.println(f_34_1_0());
System.out.println(f_34_2_0());
System.out.println(f_34_3_0());
System.out.println(f_34_4_0());
System.out.println(f_35_0_0());
System.out.println(f_35_1_0());
System.out.println(f_36_0_0());
System.out.println(f_37_0_0());
System.out.println(f_37_1_0());
System.out.println(f_37_2_0());
System.out.println(f_37_3_0());
System.out.println(f_37_4_0());
System.out.println(f_38_0_0());
System.out.println(f_38_1_0());
System.out.println(f_39_0_0());
System.out.println(f_39_1_0());
System.out.println(f_39_2_0());
System.out.println(f_39_3_0());
System.out.println(f_39_4_0());
System.out.println(f_40_0_0());
System.out.println(f_40_1_0());
System.out.println(f_40_2_0());
System.out.println(f_40_3_0());
System.out.println(f_40_4_0());
System.out.println(f_41_0_0());
System.out.println(f_41_1_0());
     }
     
        private static boolean f_0_0_0(){
            
            try{return (t_0_0_0_0() && t_0_0_0_1() && t_0_0_0_2() && t_0_0_0_3() && t_0_0_0_4() && t_0_0_0_5() && t_0_0_0_6() && t_0_0_0_7() && t_0_0_0_8() && t_0_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -19;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_1(){
        int []Stack_00_col = {-26,7,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-26,7,-31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -20;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_2(){
        int []Stack_00_col = {22,49,26,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {22,49,26,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -33;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_3(){
        int []Stack_00_col = {-34,-36,32,-24,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-34,-36,32,-24,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -31;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_4(){
        int []Stack_00_col = {46,-4,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {46,-4,35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 50;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_5(){
        int []Stack_00_col = {-40,17,-42,-29,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-40,17,-42,-29,11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 26;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_6(){
        int []Stack_00_col = {17,47,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {17,47,-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -20;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_7(){
        int []Stack_00_col = {40,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {40,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 32;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_8(){
        int []Stack_00_col = {-25,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-25,-25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 34;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_9(){
        int []Stack_00_col = {-41,-17,40,39,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-41,-17,40,39,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 27;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_0_1_0(){
            
            try{return (t_0_1_0_0() && t_0_1_0_1() && t_0_1_0_2() && t_0_1_0_3() && t_0_1_0_4() && t_0_1_0_5() && t_0_1_0_6() && t_0_1_0_7() && t_0_1_0_8() && t_0_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 6;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -35;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_1(){
        int []Stack_00_col = {-33,-20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-33,-20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 45;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_2(){
        int []Stack_00_col = {-22,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-22,-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -5;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_3(){
        int []Stack_00_col = {27,-30,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -28;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {27,-30,34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 26;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_4(){
        int []Stack_00_col = {12,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {12,21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 45;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_5(){
        int []Stack_00_col = {-28,-46,-14,-3,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-28,-46,-14,-3,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 42;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_6(){
        int []Stack_00_col = {29,-36,24,-30,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {29,-36,24,-30,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 35;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_7(){
        int []Stack_00_col = {11,-18,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {11,-18,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -18;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_8(){
        int []Stack_00_col = {9,-41,-32,-39,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {9,-41,-32,-39,47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -21;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_9(){
        int []Stack_00_col = {-11,-38,38,11,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-11,-38,38,11,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 35;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_0_2_0(){
            
            try{return (t_0_2_0_0() && t_0_2_0_1() && t_0_2_0_2() && t_0_2_0_3() && t_0_2_0_4() && t_0_2_0_5() && t_0_2_0_6() && t_0_2_0_7() && t_0_2_0_8() && t_0_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 7;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_2_0_1(){
        int []Stack_00_col = {18,-20,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 48;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_2_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 43;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_2_0_3(){
        int []Stack_00_col = {-41,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {45,6,-46,23,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 13;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_2_0_4(){
        int []Stack_00_col = {27,28,32,-45,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {15,-7,-14,-15,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 47;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_2_0_5(){
        int []Stack_00_col = {12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-13,7,38,-30,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 13;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_2_0_6(){
        int []Stack_00_col = {30,-15,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -12;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_2_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {48,-32,30,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 31;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {49,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -39;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_2_0_9(){
        int []Stack_00_col = {-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {15,-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 16;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_0_3_0(){
            
            try{return (t_0_3_0_0() && t_0_3_0_1() && t_0_3_0_2() && t_0_3_0_3() && t_0_3_0_4() && t_0_3_0_5() && t_0_3_0_6() && t_0_3_0_7() && t_0_3_0_8() && t_0_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 36;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -1;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_3_0_1(){
        int []Stack_00_col = {-45,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {7,-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -1;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_3_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-49,43,25,-37,-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -33;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_3_0_3(){
        int []Stack_00_col = {45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-16,5,0,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -18;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_3_0_4(){
        int []Stack_00_col = {-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 6;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_3_0_5(){
        int []Stack_00_col = {-10,33,-42,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -2;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -36;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_3_0_6(){
        int []Stack_00_col = {-15,-32,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -28;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_3_0_7(){
        int []Stack_00_col = {-14,-10,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 26;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_3_0_8(){
        int []Stack_00_col = {-33,-3,-43,15,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-9,37,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -5;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_0_3_0_9(){
        int []Stack_00_col = {46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-20,49,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 43;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_1_0_0(){
            
            try{return (t_1_0_0_0() && t_1_0_0_1() && t_1_0_0_2() && t_1_0_0_3() && t_1_0_0_4() && t_1_0_0_5() && t_1_0_0_6() && t_1_0_0_7() && t_1_0_0_8() && t_1_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_0(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_1(){
        boolean bool_00 = false;
    int []Stack_00_col = {17,-2,6,-8,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_2(){
        boolean bool_00 = false;
    int []Stack_00_col = {-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_3(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_4(){
        boolean bool_00 = false;
    int []Stack_00_col = {-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_5(){
        boolean bool_00 = false;
    int []Stack_00_col = {-13,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_6(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_7(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_8(){
        boolean bool_00 = false;
    int []Stack_00_col = {-12,-19,15,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_9(){
        boolean bool_00 = true;
    int []Stack_00_col = {34,24,-38,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_2_0_0(){
            
            try{return (t_2_0_0_0() && t_2_0_0_1() && t_2_0_0_2() && t_2_0_0_3() && t_2_0_0_4() && t_2_0_0_5() && t_2_0_0_6() && t_2_0_0_7() && t_2_0_0_8() && t_2_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_0(){
        int int_00 = -34;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_1(){
        int int_00 = 26;
    int []Stack_00_col = {41,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {41,3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_2(){
        int int_00 = -40;
    int []Stack_00_col = {13,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {13,-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_3(){
        int int_00 = -49;
    int []Stack_00_col = {-5,-45,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-5,-45,-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_4(){
        int int_00 = 7;
    int []Stack_00_col = {-13,33,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-13,33,-38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_5(){
        int int_00 = -26;
    int []Stack_00_col = {-10,-10,-34,32,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-10,-10,-34,32,-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_6(){
        int int_00 = 48;
    int []Stack_00_col = {7,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {7,-15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_7(){
        int int_00 = -17;
    int []Stack_00_col = {-24,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-24,35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_8(){
        int int_00 = -35;
    int []Stack_00_col = {-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_9(){
        int int_00 = 2;
    int []Stack_00_col = {49,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {49,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_2_1_0(){
            
            try{return (t_2_1_0_0() && t_2_1_0_1() && t_2_1_0_2() && t_2_1_0_3() && t_2_1_0_4() && t_2_1_0_5() && t_2_1_0_6() && t_2_1_0_7() && t_2_1_0_8() && t_2_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_0(){
        int int_00 = 30;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_1(){
        int int_00 = -24;
    int []Stack_00_col = {24,-38,-7,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_2(){
        int int_00 = 39;
    int []Stack_00_col = {-36,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_3(){
        int int_00 = 42;
    int []Stack_00_col = {17,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_4(){
        int int_00 = -25;
    int []Stack_00_col = {-11,-1,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {10,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_5(){
        int int_00 = -41;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_6(){
        int int_00 = -9;
    int []Stack_00_col = {19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-22,-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_7(){
        int int_00 = 41;
    int []Stack_00_col = {28,50,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-26,35,-3,21,24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_8(){
        int int_00 = 39;
    int []Stack_00_col = {26,34,-40,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {23,41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_9(){
        int int_00 = -34;
    int []Stack_00_col = {26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-39,-40,7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_3_0_0(){
            
            try{return (t_3_0_0_0() && t_3_0_0_1() && t_3_0_0_2() && t_3_0_0_3() && t_3_0_0_4() && t_3_0_0_5() && t_3_0_0_6() && t_3_0_0_7() && t_3_0_0_8() && t_3_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_2(){
        int []Stack_00_col = {25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_3(){
        int []Stack_00_col = {-17,9,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-17,9,11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_4(){
        int []Stack_00_col = {-30,-13,-5,-20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-30,-13,-5,-20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_5(){
        int []Stack_00_col = {11,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {11,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_8(){
        int []Stack_00_col = {-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_9(){
        int []Stack_00_col = {-46,31,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-46,31,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_3_1_0(){
            
            try{return (t_3_1_0_0() && t_3_1_0_1() && t_3_1_0_2() && t_3_1_0_3() && t_3_1_0_4() && t_3_1_0_5() && t_3_1_0_6() && t_3_1_0_7() && t_3_1_0_8() && t_3_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_1(){
        int []Stack_00_col = {-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_2(){
        int []Stack_00_col = {47,20,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_3(){
        int []Stack_00_col = {45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-5,0,-1,-29,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_5(){
        int []Stack_00_col = {-12,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_6(){
        int []Stack_00_col = {-39,-8,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 36;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-2,-13,28,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_7(){
        int []Stack_00_col = {19,38,4,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-37,-8,-25,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_8(){
        int []Stack_00_col = {9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_9(){
        int []Stack_00_col = {32,50,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_4_0_0(){
            
            try{return (t_4_0_0_0() && t_4_0_0_1() && t_4_0_0_2() && t_4_0_0_3() && t_4_0_0_4() && t_4_0_0_5() && t_4_0_0_6() && t_4_0_0_7() && t_4_0_0_8() && t_4_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_1(){
        int []Stack_00_col = {29,24,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {29,24,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {29,24,-12};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_2(){
        int []Stack_00_col = {14,19,0,-16,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {14,19,0,-16,-23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {14,19,0,-16,-23};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_3(){
        int []Stack_00_col = {22,-29,18,-28,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {22,-29,18,-28,31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {22,-29,18,-28,31};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_4(){
        int []Stack_00_col = {-35,31,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-35,31,-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {-35,31,-34};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_5(){
        int []Stack_00_col = {32,31,16,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {32,31,16,-19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {32,31,16,-19};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_6(){
        int []Stack_00_col = {19,43,0,-24,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {19,43,0,-24,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {19,43,0,-24,40};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_7(){
        int []Stack_00_col = {12,17,37,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {12,17,37,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {12,17,37,-46};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_8(){
        int []Stack_00_col = {29,27,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {29,27,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {29,27,-37};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_9(){
        int []Stack_00_col = {39,-47,33,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {39,-47,33,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {39,-47,33,-49};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_4_1_0(){
            
            try{return (t_4_1_0_0() && t_4_1_0_1() && t_4_1_0_2() && t_4_1_0_3() && t_4_1_0_4() && t_4_1_0_5() && t_4_1_0_6() && t_4_1_0_7() && t_4_1_0_8() && t_4_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_1(){
        int []Stack_00_col = {-4,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-4,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-22,-34,-3,17,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_2(){
        int []Stack_00_col = {-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-39,-7,24,-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_3(){
        int []Stack_00_col = {31,44,-18,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {31,44,-18,10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-35,-17,27,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_6(){
        int []Stack_00_col = {-1,38,15,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-1,38,15,21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {48,41,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_8(){
        int []Stack_00_col = {-10,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-10,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-13,-16,34,12,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_9(){
        int []Stack_00_col = {-11,12,-29,-26,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-11,12,-29,-26,48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_4_2_0(){
            
            try{return (t_4_2_0_0() && t_4_2_0_1() && t_4_2_0_2() && t_4_2_0_3() && t_4_2_0_4() && t_4_2_0_5() && t_4_2_0_6() && t_4_2_0_7() && t_4_2_0_8() && t_4_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_1(){
        int []Stack_00_col = {-13,44,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-18,43,-32,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-13,44,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_2(){
        int []Stack_00_col = {-7,25,-42,-27,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-33,-18,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-7,25,-42,-27,-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_3(){
        int []Stack_00_col = {9,48,-40,-30,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {7,26,-8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {9,48,-40,-30,16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_4(){
        int []Stack_00_col = {-29,13,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-29,13,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_5(){
        int []Stack_00_col = {12,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {12,27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_6(){
        int []Stack_00_col = {5,43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {33,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {5,43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_7(){
        int []Stack_00_col = {32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_8(){
        int []Stack_00_col = {-25,-48,23,47,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {48,-45,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-25,-48,23,47,16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_9(){
        int []Stack_00_col = {14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_4_3_0(){
            
            try{return (t_4_3_0_0() && t_4_3_0_1() && t_4_3_0_2() && t_4_3_0_3() && t_4_3_0_4() && t_4_3_0_5() && t_4_3_0_6() && t_4_3_0_7() && t_4_3_0_8() && t_4_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-1,-23,-13,-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {-1,-23,-13,-46};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_2(){
        int []Stack_00_col = {-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {4,-10,29,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {4,-10,29,1};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_3(){
        int []Stack_00_col = {9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {-43};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-5,1,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {-5,1,28};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_5(){
        int []Stack_00_col = {-2,-49,-41,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {24,13,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {24,13,-13};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {42,22,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {42,22,11};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_7(){
        int []Stack_00_col = {42,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {-14};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_8(){
        int []Stack_00_col = {29,31,-42,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-50,20,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {-50,20,49};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_9(){
        int []Stack_00_col = {20,24,0,50,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {8,37,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {8,37,10};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_4_4_0(){
            
            try{return (t_4_4_0_0() && t_4_4_0_1() && t_4_4_0_2() && t_4_4_0_3() && t_4_4_0_4() && t_4_4_0_5() && t_4_4_0_6() && t_4_4_0_7() && t_4_4_0_8() && t_4_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_4_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_4_4_0_1(){
        int []Stack_00_col = {-15,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {16,-29,-27,31,-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {-40};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_4_4_0_2(){
        int []Stack_00_col = {36,-20,-3,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {-22,-47,-23,29,-35};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_4_4_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-48,50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {-3,-14,46,25,-42};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_4_4_0_4(){
        int []Stack_00_col = {44,35,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {31,-42,37,15,-35};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_4_4_0_5(){
        int []Stack_00_col = {-14,-20,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_4_4_0_6(){
        int []Stack_00_col = {-36,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-37,-12,-18,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {-31,49};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_4_4_0_7(){
        int []Stack_00_col = {-21,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {19,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {-42};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_4_4_0_8(){
        int []Stack_00_col = {3,-4,-32,41,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {50,45,43,0,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_4_4_0_9(){
        int []Stack_00_col = {38,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-7,-39,42,50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_5_0_0(){
            
            try{return (t_5_0_0_0() && t_5_0_0_1() && t_5_0_0_2() && t_5_0_0_3() && t_5_0_0_4() && t_5_0_0_5() && t_5_0_0_6() && t_5_0_0_7() && t_5_0_0_8() && t_5_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 11;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -1;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_2(){
        int []Stack_00_col = {-25,34,48,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-25,34,48,-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -11;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_3(){
        int []Stack_00_col = {20,-35,0,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {20,-35,0,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -38;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_4(){
        int []Stack_00_col = {18,-47,-49,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {18,-47,-49,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 49;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_5(){
        int []Stack_00_col = {34,-40,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {34,-40,-38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -27;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_6(){
        int []Stack_00_col = {9,-33,-4,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {9,-33,-4,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -48;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_7(){
        int []Stack_00_col = {-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -29;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_8(){
        int []Stack_00_col = {-6,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-6,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 31;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -27;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_5_1_0(){
            
            try{return (t_5_1_0_0() && t_5_1_0_1() && t_5_1_0_2() && t_5_1_0_3() && t_5_1_0_4() && t_5_1_0_5() && t_5_1_0_6() && t_5_1_0_7() && t_5_1_0_8() && t_5_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 27;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_1(){
        int []Stack_00_col = {4,16,47,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {4,16,47,1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -38;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_2(){
        int []Stack_00_col = {32,20,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {32,20,-39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -35;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_3(){
        int []Stack_00_col = {-12,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-12,14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 45;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_4(){
        int []Stack_00_col = {39,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {39,-3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 8;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_5(){
        int []Stack_00_col = {16,-45,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {16,-45,16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 24;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_6(){
        int []Stack_00_col = {34,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {34,15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -29;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_7(){
        int []Stack_00_col = {36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -13;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 35;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_9(){
        int []Stack_00_col = {33,8,-48,21,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {33,8,-48,21,-23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -25;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_5_2_0(){
            
            try{return (t_5_2_0_0() && t_5_2_0_1() && t_5_2_0_2() && t_5_2_0_3() && t_5_2_0_4() && t_5_2_0_5() && t_5_2_0_6() && t_5_2_0_7() && t_5_2_0_8() && t_5_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -4;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_2_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -37;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_2_0_2(){
        int []Stack_00_col = {32,-32,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 50;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_2_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-45,16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 10;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_2_0_4(){
        int []Stack_00_col = {37,-46,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-46,36,-8,-37,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 34;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_2_0_5(){
        int []Stack_00_col = {-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {9,4,22,13,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 19;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_2_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -5;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_2_0_7(){
        int []Stack_00_col = {-12,30,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {6,47,29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 13;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {36,-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 25;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_2_0_9(){
        int []Stack_00_col = {19,48,-16,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {3,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 49;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_5_3_0(){
            
            try{return (t_5_3_0_0() && t_5_3_0_1() && t_5_3_0_2() && t_5_3_0_3() && t_5_3_0_4() && t_5_3_0_5() && t_5_3_0_6() && t_5_3_0_7() && t_5_3_0_8() && t_5_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -40;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_3_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {14,4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 15;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_3_0_2(){
        int []Stack_00_col = {14,-25,-43,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {15,-13,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 15;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_3_0_3(){
        int []Stack_00_col = {41,21,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {3,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -24;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_3_0_4(){
        int []Stack_00_col = {-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-18,-49,2,-24,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 5;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_3_0_5(){
        int []Stack_00_col = {-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -36;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_3_0_6(){
        int []Stack_00_col = {-18,-44,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {12,46,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 17;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_3_0_7(){
        int []Stack_00_col = {33,-5,50,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {33,-21,-33,-33,-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -14;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_3_0_8(){
        int []Stack_00_col = {-24,15,11,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {14,18,-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -9;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_5_3_0_9(){
        int []Stack_00_col = {42,-45,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 0;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_6_0_0(){
            
            try{return (t_6_0_0_0() && t_6_0_0_1() && t_6_0_0_2() && t_6_0_0_3() && t_6_0_0_4() && t_6_0_0_5() && t_6_0_0_6() && t_6_0_0_7() && t_6_0_0_8() && t_6_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_0(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_1(){
        boolean bool_00 = false;
    int []Stack_00_col = {27,-46,1,-1,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {27,-46,1,-1,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_2(){
        boolean bool_00 = true;
    int []Stack_00_col = {-15,4,30,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-15,4,30,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_3(){
        boolean bool_00 = true;
    int []Stack_00_col = {14,-41,-38,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {14,-41,-38,38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_4(){
        boolean bool_00 = true;
    int []Stack_00_col = {38,-6,45,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {38,-6,45,-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_5(){
        boolean bool_00 = false;
    int []Stack_00_col = {44,-46,-7,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {44,-46,-7,35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_6(){
        boolean bool_00 = true;
    int []Stack_00_col = {49,-48,-30,-6,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {49,-48,-30,-6,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_7(){
        boolean bool_00 = true;
    int []Stack_00_col = {48,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {48,-50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_8(){
        boolean bool_00 = false;
    int []Stack_00_col = {-29,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-29,-19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_9(){
        boolean bool_00 = true;
    int []Stack_00_col = {-39,-39,5,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-39,-39,5,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_6_1_0(){
            
            try{return (t_6_1_0_0() && t_6_1_0_1() && t_6_1_0_2() && t_6_1_0_3() && t_6_1_0_4() && t_6_1_0_5() && t_6_1_0_6() && t_6_1_0_7() && t_6_1_0_8() && t_6_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_0(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_1(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {11,-15,-37,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_2(){
        boolean bool_00 = true;
    int []Stack_00_col = {28,-44,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_3(){
        boolean bool_00 = true;
    int []Stack_00_col = {39,-4,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-2,14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_4(){
        boolean bool_00 = false;
    int []Stack_00_col = {48,-22,-2,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_5(){
        boolean bool_00 = true;
    int []Stack_00_col = {37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {38,28,33,-8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_6(){
        boolean bool_00 = true;
    int []Stack_00_col = {-27,45,-8,33,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-49,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_7(){
        boolean bool_00 = true;
    int []Stack_00_col = {-13,-35,-41,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {28,12,13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_8(){
        boolean bool_00 = true;
    int []Stack_00_col = {-19,37,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_9(){
        boolean bool_00 = true;
    int []Stack_00_col = {14,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_7_0_0(){
            
            try{return (t_7_0_0_0() && t_7_0_0_1() && t_7_0_0_2() && t_7_0_0_3() && t_7_0_0_4() && t_7_0_0_5() && t_7_0_0_6() && t_7_0_0_7() && t_7_0_0_8() && t_7_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_1(){
        int []Stack_00_col = {7,-3,8,-39,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {7,-3,8,-39,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {7,-3,8,-39,7};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_2(){
        int []Stack_00_col = {-30,7,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-30,7,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-30,7,40};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_3(){
        int []Stack_00_col = {20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {20};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_4(){
        int []Stack_00_col = {13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {13};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_5(){
        int []Stack_00_col = {46,39,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {46,39,16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {46,39,16};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_6(){
        int []Stack_00_col = {-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-47};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_7(){
        int []Stack_00_col = {5,5,-18,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {5,5,-18,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {5,5,-18,20};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_8(){
        int []Stack_00_col = {-3,34,-14,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-3,34,-14,11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-3,34,-14,11};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_9(){
        int []Stack_00_col = {-3,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-3,-23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-3,-23};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_7_1_0(){
            
            try{return (t_7_1_0_0() && t_7_1_0_1() && t_7_1_0_2() && t_7_1_0_3() && t_7_1_0_4() && t_7_1_0_5() && t_7_1_0_6() && t_7_1_0_7() && t_7_1_0_8() && t_7_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_1(){
        int []Stack_00_col = {48,-43,-5,32,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {48,-43,-5,32,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-50,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {49,27,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_3(){
        int []Stack_00_col = {-17,-14,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-17,-14,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {46,18,40,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_4(){
        int []Stack_00_col = {-32,-6,-15,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-32,-6,-15,-50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_5(){
        int []Stack_00_col = {-22,47,-38,1,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-22,47,-38,1,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_6(){
        int []Stack_00_col = {-10,-22,46,-46,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-10,-22,46,-46,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {45,37,-41,-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_7(){
        int []Stack_00_col = {50,-38,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {50,-38,-23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {37,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_8(){
        int []Stack_00_col = {-22,5,-48,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-22,5,-48,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {32,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_9(){
        int []Stack_00_col = {-47,6,-40,31,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-47,6,-40,31,-32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {1,-13,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_7_2_0(){
            
            try{return (t_7_2_0_0() && t_7_2_0_1() && t_7_2_0_2() && t_7_2_0_3() && t_7_2_0_4() && t_7_2_0_5() && t_7_2_0_6() && t_7_2_0_7() && t_7_2_0_8() && t_7_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_1(){
        int []Stack_00_col = {37,12,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {44,37,21,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {37,12,-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_2(){
        int []Stack_00_col = {41,-39,18,-50,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-23,2,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {41,-39,18,-50,-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_3(){
        int []Stack_00_col = {-37,-35,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-37,-35,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_4(){
        int []Stack_00_col = {-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-43,-40,23,48,-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_5(){
        int []Stack_00_col = {21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_6(){
        int []Stack_00_col = {10,0,-18,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {10,0,-18,-19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_7(){
        int []Stack_00_col = {-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {48,-19,-4,-46,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_8(){
        int []Stack_00_col = {-39,0,-11,-21,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {1,20,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-39,0,-11,-21,-8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_9(){
        int []Stack_00_col = {-33,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {3,10,2,4,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-33,4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_7_3_0(){
            
            try{return (t_7_3_0_0() && t_7_3_0_1() && t_7_3_0_2() && t_7_3_0_3() && t_7_3_0_4() && t_7_3_0_5() && t_7_3_0_6() && t_7_3_0_7() && t_7_3_0_8() && t_7_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_1(){
        int []Stack_00_col = {-1,29,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {14};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_2(){
        int []Stack_00_col = {-9,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {44,2,16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {44,2,16};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_3(){
        int []Stack_00_col = {-27,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-1,18,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-1,18,-29};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_4(){
        int []Stack_00_col = {-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-46,20,-1,-45,-32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-46,20,-1,-45,-32};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_5(){
        int []Stack_00_col = {-19,-40,44,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {41,-11,34,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {41,-11,34,42};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_6(){
        int []Stack_00_col = {40,-39,40,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {31,-37,-31,-22,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {31,-37,-31,-22,-26};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_7(){
        int []Stack_00_col = {17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_8(){
        int []Stack_00_col = {31,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {26,10,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {26,10,38};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_9(){
        int []Stack_00_col = {37,-39,-10,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-27};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_7_4_0(){
            
            try{return (t_7_4_0_0() && t_7_4_0_1() && t_7_4_0_2() && t_7_4_0_3() && t_7_4_0_4() && t_7_4_0_5() && t_7_4_0_6() && t_7_4_0_7() && t_7_4_0_8() && t_7_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_4_0_1(){
        int []Stack_00_col = {18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {10,41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-27,-45};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_4_0_2(){
        int []Stack_00_col = {-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-14,-14,6,-48,4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_4_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-2,-37,-41};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_4_0_4(){
        int []Stack_00_col = {17,20,1,48,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-8,15,-23};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_4_0_5(){
        int []Stack_00_col = {2,8,22,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {22,-18};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_4_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_4_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {31,-43};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_4_0_8(){
        int []Stack_00_col = {44,19,-36,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-24,3,-35,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {20,-3,22};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_4_0_9(){
        int []Stack_00_col = {-46,-44,41,33,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {9,17,-38,-10,-22};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_8_0_0(){
            
            try{return (t_8_0_0_0() && t_8_0_0_1() && t_8_0_0_2() && t_8_0_0_3() && t_8_0_0_4() && t_8_0_0_5() && t_8_0_0_6() && t_8_0_0_7() && t_8_0_0_8() && t_8_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_2(){
        int []Stack_00_col = {-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-42};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_3(){
        int []Stack_00_col = {-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-39};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_5(){
        int []Stack_00_col = {24,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {24,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {24,-37};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_6(){
        int []Stack_00_col = {-50,-24,-44,-24,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-50,-24,-44,-24,-3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-50,-24,-44,-24,-3};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_7(){
        int []Stack_00_col = {5,-5,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {5,-5,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {5,-5,40};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_9(){
        int []Stack_00_col = {-11,12,-2,-4,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-11,12,-2,-4,17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-11,12,-2,-4,17};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_8_1_0(){
            
            try{return (t_8_1_0_0() && t_8_1_0_1() && t_8_1_0_2() && t_8_1_0_3() && t_8_1_0_4() && t_8_1_0_5() && t_8_1_0_6() && t_8_1_0_7() && t_8_1_0_8() && t_8_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_1_0_1(){
        int []Stack_00_col = {5,-31,-16,-50,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {5,-31,-16,-50,3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-27,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_1_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {39,20,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_1_0_3(){
        int []Stack_00_col = {-48,50,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-48,50,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-8,-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_1_0_4(){
        int []Stack_00_col = {-1,41,-36,-31,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-1,41,-36,-31,16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {38,41,-32,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_1_0_5(){
        int []Stack_00_col = {-44,28,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-44,28,19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {1,-16,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_1_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_1_0_7(){
        int []Stack_00_col = {6,-26,-24,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {6,-26,-24,15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {11,6,12,2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_1_0_8(){
        int []Stack_00_col = {9,-20,-20,21,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 6;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {9,-20,-20,21,6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_8_2_0(){
            
            try{return (t_8_2_0_0() && t_8_2_0_1() && t_8_2_0_2() && t_8_2_0_3() && t_8_2_0_4() && t_8_2_0_5() && t_8_2_0_6() && t_8_2_0_7() && t_8_2_0_8() && t_8_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_2_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {12,-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_2_0_2(){
        int []Stack_00_col = {35,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-9,43,18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {35,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_2_0_3(){
        int []Stack_00_col = {-33,12,-7,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {42,36,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-33,12,-7,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_2_0_4(){
        int []Stack_00_col = {44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-23,15,21,-48,50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_2_0_5(){
        int []Stack_00_col = {0,-19,3,-47,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-9,29,33,36,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {0,-19,3,-47,17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_2_0_6(){
        int []Stack_00_col = {-18,14,-18,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-18,-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-18,14,-18,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_2_0_7(){
        int []Stack_00_col = {-2,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-2,-38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_2_0_8(){
        int []Stack_00_col = {4,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {4,-25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_2_0_9(){
        int []Stack_00_col = {-16,-29,-50,-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {19,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-16,-29,-50,-14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_8_3_0(){
            
            try{return (t_8_3_0_0() && t_8_3_0_1() && t_8_3_0_2() && t_8_3_0_3() && t_8_3_0_4() && t_8_3_0_5() && t_8_3_0_6() && t_8_3_0_7() && t_8_3_0_8() && t_8_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_3_0_1(){
        int []Stack_00_col = {17,2,30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-18,21,4,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-18,21,4,-16};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_3_0_2(){
        int []Stack_00_col = {-9,-24,-28,-30,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-42,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-42,-49};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_3_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {4,-12,3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {4,-12,3};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_3_0_4(){
        int []Stack_00_col = {12,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {19,34,-25,-48,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {19,34,-25,-48,28};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_3_0_5(){
        int []Stack_00_col = {-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {38};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_3_0_6(){
        int []Stack_00_col = {6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-3};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_3_0_7(){
        int []Stack_00_col = {-32,-4,37,0,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-30,3,11,24,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-30,3,11,24,42};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_3_0_8(){
        int []Stack_00_col = {26,-43,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_3_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-46,49,-7,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-46,49,-7,-31};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_8_4_0(){
            
            try{return (t_8_4_0_0() && t_8_4_0_1() && t_8_4_0_2() && t_8_4_0_3() && t_8_4_0_4() && t_8_4_0_5() && t_8_4_0_6() && t_8_4_0_7() && t_8_4_0_8() && t_8_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_4_0_1(){
        int []Stack_00_col = {3,-50,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-31,-12,-15,50,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-24,-43,25};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_4_0_2(){
        int []Stack_00_col = {10,-48,47,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-12};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_4_0_3(){
        int []Stack_00_col = {-36,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_4_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {24};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_4_0_5(){
        int []Stack_00_col = {8,1,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-3,-27,-23,5,39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {41,35,20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_4_0_6(){
        int []Stack_00_col = {48,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-3,-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-39,-36};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_4_0_7(){
        int []Stack_00_col = {17,50,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {50,26,-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-19};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_4_0_8(){
        int []Stack_00_col = {32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-21,7,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-44,33,27,30,41};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_4_0_9(){
        int []Stack_00_col = {-13,20,26,15,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {42,-24,45,23,-18};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_9_0_0(){
            
            try{return (t_9_0_0_0() && t_9_0_0_1() && t_9_0_0_2() && t_9_0_0_3() && t_9_0_0_4() && t_9_0_0_5() && t_9_0_0_6() && t_9_0_0_7() && t_9_0_0_8() && t_9_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 5;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 4;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_2(){
        int []Stack_00_col = {-9,-32,47,36,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-9,-32,47,36,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -12;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_3(){
        int []Stack_00_col = {44,15,-2,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {44,15,-2,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 47;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_4(){
        int []Stack_00_col = {37,-4,-2,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {37,-4,-2,-15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -50;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_5(){
        int []Stack_00_col = {-7,50,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-7,50,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -15;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_6(){
        int []Stack_00_col = {-16,-47,49,6,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-16,-47,49,6,-17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 5;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_7(){
        int []Stack_00_col = {24,14,44,31,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {24,14,44,31,13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -15;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_8(){
        int []Stack_00_col = {3,-49,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {3,-49,19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -3;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_9(){
        int []Stack_00_col = {4,-24,16,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {4,-24,16,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -20;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_9_1_0(){
            
            try{return (t_9_1_0_0() && t_9_1_0_1() && t_9_1_0_2() && t_9_1_0_3() && t_9_1_0_4() && t_9_1_0_5() && t_9_1_0_6() && t_9_1_0_7() && t_9_1_0_8() && t_9_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 24;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_1(){
        int []Stack_00_col = {-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 20;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_2(){
        int []Stack_00_col = {-47,23,-42,-32,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-47,23,-42,-32,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 21;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_3(){
        int []Stack_00_col = {21,49,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {21,49,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -25;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_4(){
        int []Stack_00_col = {9,35,8,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {9,35,8,-15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -6;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_5(){
        int []Stack_00_col = {29,-18,41,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {29,-18,41,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 42;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -29;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -48;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -5;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_8(){
        int []Stack_00_col = {-48,-17,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-48,-17,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -31;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 29;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_9_2_0(){
            
            try{return (t_9_2_0_0() && t_9_2_0_1() && t_9_2_0_2() && t_9_2_0_3() && t_9_2_0_4() && t_9_2_0_5() && t_9_2_0_6() && t_9_2_0_7() && t_9_2_0_8() && t_9_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 38;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_1(){
        int []Stack_00_col = {36,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-31,18,41,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 26;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {46,10,-2,-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 27;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_3(){
        int []Stack_00_col = {4,-2,9,43,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 42;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_4(){
        int []Stack_00_col = {25,-1,49,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {33,19,43,3,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -32;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_5(){
        int []Stack_00_col = {-31,-34,27,-48,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-20,11,49,-49,6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 10;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_6(){
        int []Stack_00_col = {-17,-4,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {29,-25,10,-42,36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 44;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-38,3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 47;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_8(){
        int []Stack_00_col = {-47,-6,-31,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-11,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -26;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -39;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_9_3_0(){
            
            try{return (t_9_3_0_0() && t_9_3_0_1() && t_9_3_0_2() && t_9_3_0_3() && t_9_3_0_4() && t_9_3_0_5() && t_9_3_0_6() && t_9_3_0_7() && t_9_3_0_8() && t_9_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 47;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_1(){
        int []Stack_00_col = {30,37,31,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {36,-46,-36,3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -38;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_2(){
        int []Stack_00_col = {-11,-47,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-33,-14,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 29;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_3(){
        int []Stack_00_col = {-48,-22,20,-46,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-47,4,-7,-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 18;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_4(){
        int []Stack_00_col = {-26,-12,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {7,-37,49,41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 18;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_5(){
        int []Stack_00_col = {-18,31,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-10,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -27;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_6(){
        int []Stack_00_col = {-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-25,-26,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 49;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_7(){
        int []Stack_00_col = {39,13,-9,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {14,-32,-39,36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 47;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-18,7,35,0,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 44;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_9(){
        int []Stack_00_col = {45,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {17,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -21;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_10_0_0(){
            
            try{return (t_10_0_0_0() && t_10_0_0_1() && t_10_0_0_2() && t_10_0_0_3() && t_10_0_0_4() && t_10_0_0_5() && t_10_0_0_6() && t_10_0_0_7() && t_10_0_0_8() && t_10_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -3;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_1(){
        int []Stack_00_col = {0,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {0,-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 16;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 34;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -5;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 19;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_5(){
        int []Stack_00_col = {-15,13,-21,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-15,13,-21,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 38;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_6(){
        int []Stack_00_col = {25,36,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {25,36,-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -42;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_7(){
        int []Stack_00_col = {47,49,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {47,49,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -23;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_8(){
        int []Stack_00_col = {-40,13,47,44,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-40,13,47,44,-21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -31;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 27;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_10_1_0(){
            
            try{return (t_10_1_0_0() && t_10_1_0_1() && t_10_1_0_2() && t_10_1_0_3() && t_10_1_0_4() && t_10_1_0_5() && t_10_1_0_6() && t_10_1_0_7() && t_10_1_0_8() && t_10_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -38;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_1(){
        int []Stack_00_col = {49,43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {49,43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -37;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_2(){
        int []Stack_00_col = {-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -25;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_3(){
        int []Stack_00_col = {8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 10;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 15;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_5(){
        int []Stack_00_col = {5,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {5,-19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 19;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_6(){
        int []Stack_00_col = {17,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {17,-17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -45;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_7(){
        int []Stack_00_col = {36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 20;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 21;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_9(){
        int []Stack_00_col = {-43,21,-39,44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-43,21,-39,44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -20;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_10_2_0(){
            
            try{return (t_10_2_0_0() && t_10_2_0_1() && t_10_2_0_2() && t_10_2_0_3() && t_10_2_0_4() && t_10_2_0_5() && t_10_2_0_6() && t_10_2_0_7() && t_10_2_0_8() && t_10_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 13;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -34;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_2(){
        int []Stack_00_col = {4,-21,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {35,5,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -8;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_3(){
        int []Stack_00_col = {10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {43,40,39,-36,-20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 30;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-9,-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 37;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_5(){
        int []Stack_00_col = {-47,-14,-42,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {38,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -41;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -3;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_7(){
        int []Stack_00_col = {39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-39,16,-43,22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 8;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_8(){
        int []Stack_00_col = {-38,-20,40,-25,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-44,3,28,-48,-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 16;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_9(){
        int []Stack_00_col = {20,35,-23,6,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -7;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_10_3_0(){
            
            try{return (t_10_3_0_0() && t_10_3_0_1() && t_10_3_0_2() && t_10_3_0_3() && t_10_3_0_4() && t_10_3_0_5() && t_10_3_0_6() && t_10_3_0_7() && t_10_3_0_8() && t_10_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -50;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_1(){
        int []Stack_00_col = {17,-23,47,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -23;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_2(){
        int []Stack_00_col = {9,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -15;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_3(){
        int []Stack_00_col = {12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-23,-25,-13,6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 21;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -9;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_5(){
        int []Stack_00_col = {35,35,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -16;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {19,13,5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 16;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_6(){
        int []Stack_00_col = {-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-10,-20,43,-11,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 30;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_7(){
        int []Stack_00_col = {26,-17,-16,-18,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-44,7,46,16,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 29;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_8(){
        int []Stack_00_col = {0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-11,43,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -21;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_9(){
        int []Stack_00_col = {28,-29,-6,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {2,-32,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 2;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_11_0_0(){
            
            try{return (t_11_0_0_0() && t_11_0_0_1() && t_11_0_0_2() && t_11_0_0_3() && t_11_0_0_4() && t_11_0_0_5() && t_11_0_0_6() && t_11_0_0_7() && t_11_0_0_8() && t_11_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_1(){
        int []Stack_00_col = {36,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {36,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {36,-46};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_2(){
        int []Stack_00_col = {13,16,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {13,16,-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {13,16,-41};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_3(){
        int []Stack_00_col = {12,30,-6,49,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {12,30,-6,49,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {12,30,-6,49,45};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_5(){
        int []Stack_00_col = {6,-12,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {6,-12,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {6,-12,-22};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_7(){
        int []Stack_00_col = {-28,-45,-10,22,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-28,-45,-10,22,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-28,-45,-10,22,-46};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_8(){
        int []Stack_00_col = {-49,-48,-14,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-49,-48,-14,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-49,-48,-14,-5};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_9(){
        int []Stack_00_col = {10,-7,45,-38,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {10,-7,45,-38,42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {10,-7,45,-38,42};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_11_1_0(){
            
            try{return (t_11_1_0_0() && t_11_1_0_1() && t_11_1_0_2() && t_11_1_0_3() && t_11_1_0_4() && t_11_1_0_5() && t_11_1_0_6() && t_11_1_0_7() && t_11_1_0_8() && t_11_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_1(){
        int []Stack_00_col = {37,-14,-26,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {37,-14,-26,-31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {11,-20,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_2(){
        int []Stack_00_col = {-33,-44,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-33,-44,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {33,-37,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_3(){
        int []Stack_00_col = {22,43,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {22,43,-8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-31,21,-39,15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_4(){
        int []Stack_00_col = {-39,-25,-8,8,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-39,-25,-8,8,-6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {32,34,0,-6,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_5(){
        int []Stack_00_col = {-11,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-11,4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-45,-15,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_6(){
        int []Stack_00_col = {41,42,1,28,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {41,42,1,28,-25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-47,35,34,-2,16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-39,41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_8(){
        int []Stack_00_col = {8,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {8,-29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {25,-16,30,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-18,-16,-18,6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_11_2_0(){
            
            try{return (t_11_2_0_0() && t_11_2_0_1() && t_11_2_0_2() && t_11_2_0_3() && t_11_2_0_4() && t_11_2_0_5() && t_11_2_0_6() && t_11_2_0_7() && t_11_2_0_8() && t_11_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_2_0_1(){
        int []Stack_00_col = {-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {1,15,-13,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_2_0_2(){
        int []Stack_00_col = {-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {23,-35,35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_2_0_3(){
        int []Stack_00_col = {-42,-48,3,0,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {46,34,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-42,-48,3,0,41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_2_0_4(){
        int []Stack_00_col = {-8,-37,-10,48,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-8,-37,-10,48,-3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_2_0_5(){
        int []Stack_00_col = {38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-19,41,24,-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_2_0_6(){
        int []Stack_00_col = {-11,-28,-43,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-11,-28,-43,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_2_0_7(){
        int []Stack_00_col = {42,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {42,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_2_0_8(){
        int []Stack_00_col = {-4,-4,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-33,-15,25,-18,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-4,-4,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_2_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-10,30,5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_11_3_0(){
            
            try{return (t_11_3_0_0() && t_11_3_0_1() && t_11_3_0_2() && t_11_3_0_3() && t_11_3_0_4() && t_11_3_0_5() && t_11_3_0_6() && t_11_3_0_7() && t_11_3_0_8() && t_11_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_3_0_1(){
        int []Stack_00_col = {-41,-1,46,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {34,-17,50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {34,-17,50};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_3_0_2(){
        int []Stack_00_col = {-23,31,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-35,19,21,-5,18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-35,19,21,-5,18};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_3_0_3(){
        int []Stack_00_col = {43,24,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {30};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_3_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {16,-8,-6,48,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {16,-8,-6,48,-10};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_3_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-8,13,-41,50,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-8,13,-41,50,1};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_3_0_6(){
        int []Stack_00_col = {-40,34,-6,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {23,-34,-11,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {23,-34,-11,37};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_3_0_7(){
        int []Stack_00_col = {29,-25,-46,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-22,16,4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-22,16,4};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {2,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {2,42};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_3_0_9(){
        int []Stack_00_col = {19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_11_4_0(){
            
            try{return (t_11_4_0_0() && t_11_4_0_1() && t_11_4_0_2() && t_11_4_0_3() && t_11_4_0_4() && t_11_4_0_5() && t_11_4_0_6() && t_11_4_0_7() && t_11_4_0_8() && t_11_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_4_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-35,5,37,-46,28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_4_0_2(){
        int []Stack_00_col = {37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {13,-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {3};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_4_0_3(){
        int []Stack_00_col = {-36,25,-18,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-7,-38,8,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {37,-11};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_4_0_4(){
        int []Stack_00_col = {6,38,-50,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {3,39,-36};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_4_0_5(){
        int []Stack_00_col = {-7,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {42,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {50,11,22,-48};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_4_0_6(){
        int []Stack_00_col = {-11,-14,-1,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-50};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_4_0_7(){
        int []Stack_00_col = {-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {19,-6,-39,49,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {23,-1};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_4_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-16,-31,-13,-14,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {3,-20,28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_11_4_0_9(){
        int []Stack_00_col = {-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {8,20,-18,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-46,21,-24};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_0_0(){
            
            try{return (t_12_0_0_0() && t_12_0_0_1() && t_12_0_0_2() && t_12_0_0_3() && t_12_0_0_4() && t_12_0_0_5() && t_12_0_0_6() && t_12_0_0_7() && t_12_0_0_8() && t_12_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_2(){
        int []Stack_00_col = {29,30,10,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {29,30,10,-38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_3(){
        int []Stack_00_col = {8,-50,-9,-35,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {8,-50,-9,-35,15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_5(){
        int []Stack_00_col = {34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_6(){
        int []Stack_00_col = {8,40,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {8,40,-15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_8(){
        int []Stack_00_col = {35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_9(){
        int []Stack_00_col = {7,-44,5,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {7,-44,5,3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_1_0(){
            
            try{return (t_12_1_0_0() && t_12_1_0_1() && t_12_1_0_2() && t_12_1_0_3() && t_12_1_0_4() && t_12_1_0_5() && t_12_1_0_6() && t_12_1_0_7() && t_12_1_0_8() && t_12_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_1(){
        int []Stack_00_col = {-27,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {5,3,40,19,7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_2(){
        int []Stack_00_col = {28,-44,-5,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {25,-4,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_3(){
        int []Stack_00_col = {0,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_4(){
        int []Stack_00_col = {50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_5(){
        int []Stack_00_col = {-38,19,21,-38,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_6(){
        int []Stack_00_col = {11,-5,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {31,21,-30,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_7(){
        int []Stack_00_col = {-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {6,-50,29,9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_8(){
        int []Stack_00_col = {-25,26,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {6,20,-14,-35,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_9(){
        int []Stack_00_col = {-44,-4,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_13_0_0(){
            
            try{return (t_13_0_0_0() && t_13_0_0_1() && t_13_0_0_2() && t_13_0_0_3() && t_13_0_0_4() && t_13_0_0_5() && t_13_0_0_6() && t_13_0_0_7() && t_13_0_0_8() && t_13_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 29;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 29;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_1(){
        int []Stack_00_col = {-40,-42,48,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-40,-42,48,41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 11;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_2(){
        int []Stack_00_col = {9,13,24,-5,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {9,13,24,-5,-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 39;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_3(){
        int []Stack_00_col = {32,-31,-46,-35,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {32,-31,-46,-35,-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 34;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_4(){
        int []Stack_00_col = {24,1,-12,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {24,1,-12,-31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 49;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_5(){
        int []Stack_00_col = {-10,-33,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-10,-33,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 12;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_6(){
        int []Stack_00_col = {-39,28,-50,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-39,28,-50,46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -35;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_7(){
        int []Stack_00_col = {12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 18;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_8(){
        int []Stack_00_col = {-8,21,35,43,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-8,21,35,43,6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 43;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -27;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_13_1_0(){
            
            try{return (t_13_1_0_0() && t_13_1_0_1() && t_13_1_0_2() && t_13_1_0_3() && t_13_1_0_4() && t_13_1_0_5() && t_13_1_0_6() && t_13_1_0_7() && t_13_1_0_8() && t_13_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 24;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_1(){
        int []Stack_00_col = {21,10,12,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {21,10,12,17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -19;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_2(){
        int []Stack_00_col = {-34,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-34,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -28;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_3(){
        int []Stack_00_col = {41,6,29,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {41,6,29,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -36;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_4(){
        int []Stack_00_col = {-26,4,-24,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-26,4,-24,21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -32;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 44;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_6(){
        int []Stack_00_col = {-20,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-20,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -49;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_7(){
        int []Stack_00_col = {-42,-16,44,-15,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-42,-16,44,-15,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 6;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_8(){
        int []Stack_00_col = {-20,-4,-25,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-20,-4,-25,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -27;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 37;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_13_2_0(){
            
            try{return (t_13_2_0_0() && t_13_2_0_1() && t_13_2_0_2() && t_13_2_0_3() && t_13_2_0_4() && t_13_2_0_5() && t_13_2_0_6() && t_13_2_0_7() && t_13_2_0_8() && t_13_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -45;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_1(){
        int []Stack_00_col = {-16,-38,-3,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-22,-50,-3,-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 21;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_2(){
        int []Stack_00_col = {-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-13,-18,-38,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -12;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_3(){
        int []Stack_00_col = {-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -37;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_4(){
        int []Stack_00_col = {17,-5,46,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -5;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_5(){
        int []Stack_00_col = {-47,-31,-36,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 42;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_6(){
        int []Stack_00_col = {-16,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -15;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_7(){
        int []Stack_00_col = {26,-27,25,11,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-3,-18,50,-20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -11;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-4,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 31;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_9(){
        int []Stack_00_col = {-49,-24,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {31,33,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 42;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_13_3_0(){
            
            try{return (t_13_3_0_0() && t_13_3_0_1() && t_13_3_0_2() && t_13_3_0_3() && t_13_3_0_4() && t_13_3_0_5() && t_13_3_0_6() && t_13_3_0_7() && t_13_3_0_8() && t_13_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 19;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_1(){
        int []Stack_00_col = {-37,-45,-23,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {50,-47,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 26;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_2(){
        int []Stack_00_col = {50,12,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {13,36,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 48;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_3(){
        int []Stack_00_col = {-19,-1,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-34,-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 35;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_4(){
        int []Stack_00_col = {6,-34,18,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 29;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_5(){
        int []Stack_00_col = {-21,10,-33,44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-48,-7,-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -20;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_6(){
        int []Stack_00_col = {-34,26,-11,-42,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 46;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_7(){
        int []Stack_00_col = {19,-22,39,3,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -23;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_8(){
        int []Stack_00_col = {-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {13,2,-48,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 26;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_9(){
        int []Stack_00_col = {44,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-37,-32,14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -37;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_0_0(){
            
            try{return (t_14_0_0_0() && t_14_0_0_1() && t_14_0_0_2() && t_14_0_0_3() && t_14_0_0_4() && t_14_0_0_5() && t_14_0_0_6() && t_14_0_0_7() && t_14_0_0_8() && t_14_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_1(){
        int []Stack_00_col = {-6,-10,30,-6,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-6,-10,30,-6,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-6,-10,30,-6,0};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-6,-10,30,-6,0};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_2(){
        int []Stack_00_col = {-40,-14,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-40,-14,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-40,-14,-4};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-40,-14,-4};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_4(){
        int []Stack_00_col = {-17,13,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-17,13,-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-17,13,-35};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-17,13,-35};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_5(){
        int []Stack_00_col = {20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {20};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {20};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_7(){
        int []Stack_00_col = {-38,-37,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-38,-37,-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-38,-37,-36};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-38,-37,-36};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_8(){
        int []Stack_00_col = {-21,-11,-20,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-21,-11,-20,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-21,-11,-20,20};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-21,-11,-20,20};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_9(){
        int []Stack_00_col = {17,36,-18,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {17,36,-18,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {17,36,-18,20};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {17,36,-18,20};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_1_0(){
            
            try{return (t_14_1_0_0() && t_14_1_0_1() && t_14_1_0_2() && t_14_1_0_3() && t_14_1_0_4() && t_14_1_0_5() && t_14_1_0_6() && t_14_1_0_7() && t_14_1_0_8() && t_14_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_1(){
        int []Stack_00_col = {-47,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-47,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-47,9};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_2(){
        int []Stack_00_col = {6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {6};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-47,-35,-48,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_3(){
        int []Stack_00_col = {44,-6,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {44,-6,-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {44,-6,-30};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {21,24,-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_4(){
        int []Stack_00_col = {49,50,-17,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {49,50,-17,-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {49,50,-17,-35};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-5,4,23,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_5(){
        int []Stack_00_col = {-27,29,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-27,29,12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-27,29,12};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-43,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_6(){
        int []Stack_00_col = {33,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {33,47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {33,47};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_7(){
        int []Stack_00_col = {26,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {26,11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {26,11};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {43,-48,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {48,-48,-49,29,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_9(){
        int []Stack_00_col = {-14,-28,9,46,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-14,-28,9,46,-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-14,-28,9,46,-34};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-28,-42,-18,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_2_0(){
            
            try{return (t_14_2_0_0() && t_14_2_0_1() && t_14_2_0_2() && t_14_2_0_3() && t_14_2_0_4() && t_14_2_0_5() && t_14_2_0_6() && t_14_2_0_7() && t_14_2_0_8() && t_14_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_1(){
        int []Stack_00_col = {34,46,-9,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {34,46,-9,50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {34,46,-9,50};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_2(){
        int []Stack_00_col = {-22,28,-8,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-22,28,-8,-6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-10,4,-13,-13,-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {-22,28,-8,-6};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_3(){
        int []Stack_00_col = {-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {-32};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_4(){
        int []Stack_00_col = {24,18,-44,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {24,18,-44,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-19,-2,-17,-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {24,18,-44,7};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-10,28,-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_6(){
        int []Stack_00_col = {-29,-41,-2,39,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-29,-41,-2,39,5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-2,33,22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {-29,-41,-2,39,5};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_7(){
        int []Stack_00_col = {19,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {19,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {19,-2};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_8(){
        int []Stack_00_col = {-42,30,4,-48,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-42,30,4,-48,-39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {-42,30,4,-48,-39};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_9(){
        int []Stack_00_col = {-4,-1,41,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-4,-1,41,5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {38,2,15,15,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {-4,-1,41,5};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_3_0(){
            
            try{return (t_14_3_0_0() && t_14_3_0_1() && t_14_3_0_2() && t_14_3_0_3() && t_14_3_0_4() && t_14_3_0_5() && t_14_3_0_6() && t_14_3_0_7() && t_14_3_0_8() && t_14_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_1(){
        int []Stack_00_col = {-46,-23,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-46,-23,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-41,31,13,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-41,31,13,46};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-14,18,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-14,18,-11};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_4(){
        int []Stack_00_col = {36,-8,26,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {36,-8,26,-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_5(){
        int []Stack_00_col = {13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-25};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_6(){
        int []Stack_00_col = {50,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {50,31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {40,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {40,-22};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_7(){
        int []Stack_00_col = {27,37,19,-42,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {27,37,19,-42,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {41,-11,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {41,-11,-40};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-23,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-23,26};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_9(){
        int []Stack_00_col = {11,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {11,-42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_4_0(){
            
            try{return (t_14_4_0_0() && t_14_4_0_1() && t_14_4_0_2() && t_14_4_0_3() && t_14_4_0_4() && t_14_4_0_5() && t_14_4_0_6() && t_14_4_0_7() && t_14_4_0_8() && t_14_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_4_0_1(){
        int []Stack_00_col = {-44,11,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-44,11,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {23};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_4_0_2(){
        int []Stack_00_col = {28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {0,47,-36,43,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-6,42,36,37};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_4_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-7,36,-36,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {47,-39,-11,14,14};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_4_0_4(){
        int []Stack_00_col = {27,19,11,-39,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {27,19,11,-39,1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {36,37,-39,-20,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-13,-17,-32};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_4_0_5(){
        int []Stack_00_col = {-23,-16,37,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-23,-16,37,-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {47,-6,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {6,-22,-16,8};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_4_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {13,-48,22,31,-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {29,38,7};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_4_0_7(){
        int []Stack_00_col = {-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {12,36,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-32};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_4_0_8(){
        int []Stack_00_col = {47,37,-10,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {47,37,-10,-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-35,18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_4_0_9(){
        int []Stack_00_col = {3,8,4,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {3,8,4,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {37,-22,36,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {36,13,-43};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_5_0(){
            
            try{return (t_14_5_0_0() && t_14_5_0_1() && t_14_5_0_2() && t_14_5_0_3() && t_14_5_0_4() && t_14_5_0_5() && t_14_5_0_6() && t_14_5_0_7() && t_14_5_0_8() && t_14_5_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_5_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_5_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-12,17,10,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_5_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {45,38,46,-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_5_0_3(){
        int []Stack_00_col = {-11,-1,38,10,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-17,2,-6,1,13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-11,-1,38,10,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-11,-1,38,10,40};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_5_0_4(){
        int []Stack_00_col = {2,7,-34,8,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {2,7,-34,8,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {2,7,-34,8,40};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_5_0_5(){
        int []Stack_00_col = {27,-18,1,43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {27,-18,1,43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {27,-18,1,43};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_5_0_6(){
        int []Stack_00_col = {35,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {35,38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {35,38};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_5_0_7(){
        int []Stack_00_col = {-6,-33,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {42,-16,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-6,-33,-29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-6,-33,-29};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_5_0_8(){
        int []Stack_00_col = {-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-9};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_5_0_9(){
        int []Stack_00_col = {32,-38,5,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {2,35,-45,-35,36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {32,-38,5,-7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {32,-38,5,-7};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_6_0(){
            
            try{return (t_14_6_0_0() && t_14_6_0_1() && t_14_6_0_2() && t_14_6_0_3() && t_14_6_0_4() && t_14_6_0_5() && t_14_6_0_6() && t_14_6_0_7() && t_14_6_0_8() && t_14_6_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_6_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_6_0_1(){
        int []Stack_00_col = {-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-7,6,22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-7,6,22};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_6_0_2(){
        int []Stack_00_col = {4,6,41,9,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {14,-32,48,0,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {4,6,41,9,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {14,-32,48,0,-13};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_6_0_3(){
        int []Stack_00_col = {5,42,35,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {5,42,35,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-39};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_6_0_4(){
        int []Stack_00_col = {-40,-43,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-23,26,47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-40,-43,-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-23,26,47};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_6_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-20,-37,-45,1,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-20,-37,-45,1,1};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_6_0_6(){
        int []Stack_00_col = {19,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {32,40,24,-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {19,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {32,40,24,-41};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_6_0_7(){
        int []Stack_00_col = {49,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {49,47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_6_0_8(){
        int []Stack_00_col = {24,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {24,-7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_6_0_9(){
        int []Stack_00_col = {-18,47,6,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-18,47,6,-50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_7_0(){
            
            try{return (t_14_7_0_0() && t_14_7_0_1() && t_14_7_0_2() && t_14_7_0_3() && t_14_7_0_4() && t_14_7_0_5() && t_14_7_0_6() && t_14_7_0_7() && t_14_7_0_8() && t_14_7_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_7_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_7_0_1(){
        int []Stack_00_col = {32,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-28,36,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {32,-16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {38,-23};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_7_0_2(){
        int []Stack_00_col = {-41,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-46,30,33,44,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-41,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {17,20,9,43};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_7_0_3(){
        int []Stack_00_col = {-9,24,-38,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-9,24,-38,32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {9,-50};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_7_0_4(){
        int []Stack_00_col = {12,-29,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-44,-33,1,-36,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {12,-29,-18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-37,38,5,-40};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_7_0_5(){
        int []Stack_00_col = {32,-6,4,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {32,-6,4,-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-40};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_7_0_6(){
        int []Stack_00_col = {-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-2,44,19,7,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-31,19};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_7_0_7(){
        int []Stack_00_col = {-27,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-27,38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-39};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_7_0_8(){
        int []Stack_00_col = {44,3,-32,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {44,3,-32,25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {26,-39,43};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_7_0_9(){
        int []Stack_00_col = {-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-33};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_8_0(){
            
            try{return (t_14_8_0_0() && t_14_8_0_1() && t_14_8_0_2() && t_14_8_0_3() && t_14_8_0_4() && t_14_8_0_5() && t_14_8_0_6() && t_14_8_0_7() && t_14_8_0_8() && t_14_8_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_8_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_8_0_1(){
        int []Stack_00_col = {-4,-1,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {45};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {-4,-1,22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_8_0_2(){
        int []Stack_00_col = {48,14,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {40,-28,17,27,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {40,-28,17,27,8};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {48,14,-29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_8_0_3(){
        int []Stack_00_col = {27,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {48,35,15,23,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {48,35,15,23,32};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {27,-17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_8_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {45,13,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {45,13,-33};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_8_0_5(){
        int []Stack_00_col = {47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_8_0_6(){
        int []Stack_00_col = {-4,-40,-28,8,30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-30,34,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-30,34,31};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {-4,-40,-28,8,30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_8_0_7(){
        int []Stack_00_col = {26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_8_0_8(){
        int []Stack_00_col = {1,42,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-13,40,15,41,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-13,40,15,41,-26};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {1,42,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_8_0_9(){
        int []Stack_00_col = {-34,-34,-15,-21,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {-34,-34,-15,-21,-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_9_0(){
            
            try{return (t_14_9_0_0() && t_14_9_0_1() && t_14_9_0_2() && t_14_9_0_3() && t_14_9_0_4() && t_14_9_0_5() && t_14_9_0_6() && t_14_9_0_7() && t_14_9_0_8() && t_14_9_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_9_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_9_0_1(){
        int []Stack_00_col = {3,-13,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {4};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {4};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_9_0_2(){
        int []Stack_00_col = {-32,-39,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {25,3,50,-6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {25,3,50,-6};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {25,3,50,-6};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_9_0_3(){
        int []Stack_00_col = {-45,7,6,0,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {13,8,-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {13,8,-17};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {13,8,-17};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_9_0_4(){
        int []Stack_00_col = {45,-34,41,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-9,-21,-12,-37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-9,-21,-12,-37};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-9,-21,-12,-37};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_9_0_5(){
        int []Stack_00_col = {-27,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-19,-20,-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-19,-20,-3};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-19,-20,-3};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_9_0_6(){
        int []Stack_00_col = {38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {24,27,7,-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {24,27,7,-42};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {24,27,7,-42};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_9_0_7(){
        int []Stack_00_col = {-30,11,42,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_9_0_8(){
        int []Stack_00_col = {-3,-20,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_9_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_10_0(){
            
            try{return (t_14_10_0_0() && t_14_10_0_1() && t_14_10_0_2() && t_14_10_0_3() && t_14_10_0_4() && t_14_10_0_5() && t_14_10_0_6() && t_14_10_0_7() && t_14_10_0_8() && t_14_10_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_10_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_10_0_1(){
        int []Stack_00_col = {-33,-29,-44,-24,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-24,37,-11,-35,4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-24,37,-11,-35,4};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {5,-44,11};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_10_0_2(){
        int []Stack_00_col = {0,-40,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {1,-30,40,-39,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {1,-30,40,-39,-31};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-25,47,47};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_10_0_3(){
        int []Stack_00_col = {11,-25,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {38,23,38,-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {38,23,38,-34};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-14};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_10_0_4(){
        int []Stack_00_col = {-14,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-27};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {13};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_10_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-9};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_10_0_6(){
        int []Stack_00_col = {11,-37,4,46,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-3,-20,-38,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-3,-20,-38,21};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {18,-44};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_10_0_7(){
        int []Stack_00_col = {2,-29,35,-13,44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {14,-50,-49,-13,28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_10_0_8(){
        int []Stack_00_col = {-31,-10,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-30,-2,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-30,-2,-49};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-42,-13,-23,-49};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_10_0_9(){
        int []Stack_00_col = {-49,-8,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-32,-45,-23,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-32,-45,-23,11};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_11_0(){
            
            try{return (t_14_11_0_0() && t_14_11_0_1() && t_14_11_0_2() && t_14_11_0_3() && t_14_11_0_4() && t_14_11_0_5() && t_14_11_0_6() && t_14_11_0_7() && t_14_11_0_8() && t_14_11_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_11_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_11_0_1(){
        int []Stack_00_col = {1,-27,21,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {17,-41,-20,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {19,48,34,40,-43};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {1,-27,21,-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_11_0_2(){
        int []Stack_00_col = {-22,43,37,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-3,41,-48,-6,-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-3,-22,34,15};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-22,43,37,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_11_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {5,-32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-19,-5,-34,31,-28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_11_0_4(){
        int []Stack_00_col = {-18,-2,30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-29,28,6,-8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {9};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-18,-2,30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_11_0_5(){
        int []Stack_00_col = {-32,29,-45,16,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-12,23,-4};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-32,29,-45,16,-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_11_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {17,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-25};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_11_0_7(){
        int []Stack_00_col = {-37,-33,-8,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {7,-31,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-46,-19,32};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-37,-33,-8,-23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_11_0_8(){
        int []Stack_00_col = {50,-37,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-14,-32,-6,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {29};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {50,-37,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_11_0_9(){
        int []Stack_00_col = {-28,-27,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-28,-27,22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_12_0(){
            
            try{return (t_14_12_0_0() && t_14_12_0_1() && t_14_12_0_2() && t_14_12_0_3() && t_14_12_0_4() && t_14_12_0_5() && t_14_12_0_6() && t_14_12_0_7() && t_14_12_0_8() && t_14_12_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_12_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_12_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-35,27,48,-23,-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-7,9};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-35,27,48,-23,-28};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_12_0_2(){
        int []Stack_00_col = {-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {7,-4,0,-24,-32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-10,-13,15,0,-15};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {7,-4,0,-24,-32};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_12_0_3(){
        int []Stack_00_col = {33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {4,24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-22,-28,38,41};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {4,24};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_12_0_4(){
        int []Stack_00_col = {-36,22,31,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-14,-2,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-8,-41,27,13};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-14,-2,8};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_12_0_5(){
        int []Stack_00_col = {30,37,11,-24,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {2,13,11,-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-4,41,32};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {2,13,11,-17};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_12_0_6(){
        int []Stack_00_col = {31,33,44,-33,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-14,-44,30,40};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_12_0_7(){
        int []Stack_00_col = {22,-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {39,-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-39,-34,-9,-21,-38};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {39,-17};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_12_0_8(){
        int []Stack_00_col = {41,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-5,9,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {43,-3,-45};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-5,9,32};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_12_0_9(){
        int []Stack_00_col = {6,37,12,-38,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {34,29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {11,-50,16,-27};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {34,29};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_13_0(){
            
            try{return (t_14_13_0_0() && t_14_13_0_1() && t_14_13_0_2() && t_14_13_0_3() && t_14_13_0_4() && t_14_13_0_5() && t_14_13_0_6() && t_14_13_0_7() && t_14_13_0_8() && t_14_13_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_13_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_13_0_1(){
        int []Stack_00_col = {-21,-3,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {50,36,23,30,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-39,-15,38};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {-39,-15,38};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_13_0_2(){
        int []Stack_00_col = {-3,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {41,-30,-20,-34,-37};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {41,-30,-20,-34,-37};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_13_0_3(){
        int []Stack_00_col = {7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {0,7,-6,-17,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_13_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-21};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {-21};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_13_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {24,34};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {24,34};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_13_0_6(){
        int []Stack_00_col = {-36,27,45,2,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-42,-24,-36,-36,-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {50,4,43,-34,5};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {50,4,43,-34,5};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_13_0_7(){
        int []Stack_00_col = {-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_13_0_8(){
        int []Stack_00_col = {7,50,0,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-37,-41,38,-2,-12};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {-37,-41,38,-2,-12};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_13_0_9(){
        int []Stack_00_col = {-27,-43,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-25,-23,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {47};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {47};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_14_0(){
            
            try{return (t_14_14_0_0() && t_14_14_0_1() && t_14_14_0_2() && t_14_14_0_3() && t_14_14_0_4() && t_14_14_0_5() && t_14_14_0_6() && t_14_14_0_7() && t_14_14_0_8() && t_14_14_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_14_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_14_0_1(){
        int []Stack_00_col = {25,-26,0,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-9};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {33,-20,-9,-48};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_14_0_2(){
        int []Stack_00_col = {30,33,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {44,-5,-42,-20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {38,10,-13,-25};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_14_0_3(){
        int []Stack_00_col = {-33,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-30};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {34,21,-26,37};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_14_0_4(){
        int []Stack_00_col = {-49,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-3,-41,-9,-15,4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-1,-42,22};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_14_0_5(){
        int []Stack_00_col = {-30,-39,-6,27,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {20,-38,-27,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-21};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_14_0_6(){
        int []Stack_00_col = {21,40,-8,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-31,-10,-22,0};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_14_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-39,-31,29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-45,15,33};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-46};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_14_0_8(){
        int []Stack_00_col = {12,-43,34,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {17,-2,27};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {25,48,24};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_14_0_9(){
        int []Stack_00_col = {22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {44,-38,-33,49,16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {38,31};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {48};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_15_0_0(){
            
            try{return (t_15_0_0_0() && t_15_0_0_1() && t_15_0_0_2() && t_15_0_0_3() && t_15_0_0_4() && t_15_0_0_5() && t_15_0_0_6() && t_15_0_0_7() && t_15_0_0_8() && t_15_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -11;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_1(){
        int []Stack_00_col = {-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -8;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_2(){
        int []Stack_00_col = {-43,48,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-43,48,-18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -13;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -18;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 34;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -3;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_6(){
        int []Stack_00_col = {-9,-14,1,17,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-9,-14,1,17,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -33;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_7(){
        int []Stack_00_col = {-9,42,-16,40,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-9,42,-16,40,-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -13;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 27;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_9(){
        int []Stack_00_col = {10,50,-2,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {10,50,-2,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 48;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_15_1_0(){
            
            try{return (t_15_1_0_0() && t_15_1_0_1() && t_15_1_0_2() && t_15_1_0_3() && t_15_1_0_4() && t_15_1_0_5() && t_15_1_0_6() && t_15_1_0_7() && t_15_1_0_8() && t_15_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 28;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_1(){
        int []Stack_00_col = {24,-4,-24,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {24,-4,-24,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 17;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -25;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_3(){
        int []Stack_00_col = {0,48,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {0,48,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 1;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_4(){
        int []Stack_00_col = {-1,23,14,20,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-1,23,14,20,-40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 44;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_5(){
        int []Stack_00_col = {37,-12,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -28;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {37,-12,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 42;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_6(){
        int []Stack_00_col = {4,42,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {4,42,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -42;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 33;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_8(){
        int []Stack_00_col = {-21,-27,-18,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-21,-27,-18,-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 44;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_9(){
        int []Stack_00_col = {5,-16,-50,42,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {5,-16,-50,42,46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -15;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_15_2_0(){
            
            try{return (t_15_2_0_0() && t_15_2_0_1() && t_15_2_0_2() && t_15_2_0_3() && t_15_2_0_4() && t_15_2_0_5() && t_15_2_0_6() && t_15_2_0_7() && t_15_2_0_8() && t_15_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -35;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_2_0_1(){
        int []Stack_00_col = {-43,-29,-38,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-42,16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -32;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_2_0_2(){
        int []Stack_00_col = {-48,-21,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-24,-12,41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -10;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_2_0_3(){
        int []Stack_00_col = {-4,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 27;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_2_0_4(){
        int []Stack_00_col = {3,-4,-39,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -16;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_2_0_5(){
        int []Stack_00_col = {-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {25,36,-26,1,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 50;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_2_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 35;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_2_0_7(){
        int []Stack_00_col = {49,-30,29,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 29;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-42,-10,-8,-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 25;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_2_0_9(){
        int []Stack_00_col = {49,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {28,29,-19,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -9;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_15_3_0(){
            
            try{return (t_15_3_0_0() && t_15_3_0_1() && t_15_3_0_2() && t_15_3_0_3() && t_15_3_0_4() && t_15_3_0_5() && t_15_3_0_6() && t_15_3_0_7() && t_15_3_0_8() && t_15_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -26;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_3_0_1(){
        int []Stack_00_col = {-35,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-25,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 26;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_3_0_2(){
        int []Stack_00_col = {0,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -37;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_3_0_3(){
        int []Stack_00_col = {3,-4,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 42;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_3_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -13;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_3_0_5(){
        int []Stack_00_col = {46,-31,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 24;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_3_0_6(){
        int []Stack_00_col = {3,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {46,-40,-27,50,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 38;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_3_0_7(){
        int []Stack_00_col = {17,2,9,-34,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -35;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_3_0_8(){
        int []Stack_00_col = {0,47,19,4,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-9,32,-40,-31,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 27;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_15_3_0_9(){
        int []Stack_00_col = {28,11,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-32,-26,-41,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -9;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_16_0_0(){
            
            try{return (t_16_0_0_0() && t_16_0_0_1() && t_16_0_0_2() && t_16_0_0_3() && t_16_0_0_4() && t_16_0_0_5() && t_16_0_0_6() && t_16_0_0_7() && t_16_0_0_8() && t_16_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -28;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_1(){
        int []Stack_00_col = {34,48,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {34,48,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {34,48,-1};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_2(){
        int []Stack_00_col = {20,31,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {20,31,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {20,31,49};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_3(){
        int []Stack_00_col = {-45,-41,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-45,-41,22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-45,-41,22};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_4(){
        int []Stack_00_col = {-5,26,47,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-5,26,47,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-5,26,47,33};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_5(){
        int []Stack_00_col = {27,49,4,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {27,49,4,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {27,49,4,-4};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_7(){
        int []Stack_00_col = {35,47,-33,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {35,47,-33,48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {35,47,-33,48};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_8(){
        int []Stack_00_col = {-42,35,-28,20,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-42,35,-28,20,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-42,35,-28,20,49};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -21;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_16_1_0(){
            
            try{return (t_16_1_0_0() && t_16_1_0_1() && t_16_1_0_2() && t_16_1_0_3() && t_16_1_0_4() && t_16_1_0_5() && t_16_1_0_6() && t_16_1_0_7() && t_16_1_0_8() && t_16_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {50,-8,-13,-15,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_2(){
        int []Stack_00_col = {0,5,-14,-37,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {0,5,-14,-37,-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {49,5,-8,-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_4(){
        int []Stack_00_col = {27,40,-46,21,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {27,40,-46,21,12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-21,40,-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_6(){
        int []Stack_00_col = {16,-21,30,-15,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {16,-21,30,-15,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-35,-4,21,-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_7(){
        int []Stack_00_col = {5,17,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {5,17,-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {28,-27,41,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_8(){
        int []Stack_00_col = {43,-43,-31,16,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {43,-43,-31,16,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-27,-11,16,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_9(){
        int []Stack_00_col = {4,-17,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {4,-17,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_16_2_0(){
            
            try{return (t_16_2_0_0() && t_16_2_0_1() && t_16_2_0_2() && t_16_2_0_3() && t_16_2_0_4() && t_16_2_0_5() && t_16_2_0_6() && t_16_2_0_7() && t_16_2_0_8() && t_16_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_1(){
        int []Stack_00_col = {38,31,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-41,28,12,-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {38,31,22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_3(){
        int []Stack_00_col = {-18,26,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-18,26,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_4(){
        int []Stack_00_col = {-14,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {17,-8,23,5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-14,-42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_5(){
        int []Stack_00_col = {-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -48;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_6(){
        int []Stack_00_col = {-10,28,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-9,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-10,28,32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_7(){
        int []Stack_00_col = {-21,-48,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {3,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-21,-48,-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_8(){
        int []Stack_00_col = {-38,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {35,-1,15,-7,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-38,-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 14;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-46,1,29,-30,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_16_3_0(){
            
            try{return (t_16_3_0_0() && t_16_3_0_1() && t_16_3_0_2() && t_16_3_0_3() && t_16_3_0_4() && t_16_3_0_5() && t_16_3_0_6() && t_16_3_0_7() && t_16_3_0_8() && t_16_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_1(){
        int []Stack_00_col = {14,50,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -13;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {0};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_2(){
        int []Stack_00_col = {18,1,8,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {4,31,-28,11,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {4,31,-28,11,-21};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_3(){
        int []Stack_00_col = {-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {38,-40,-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {38,-40,-17};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_4(){
        int []Stack_00_col = {-23,25,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {49};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_5(){
        int []Stack_00_col = {26,21,4,-23,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-34,33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-34,33};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_6(){
        int []Stack_00_col = {-17,-4,-22,-3,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-20,41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-20,41};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {31,5,4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {31,5,4};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_9(){
        int []Stack_00_col = {-17,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {49,-27,47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {49,-27,47};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_16_4_0(){
            
            try{return (t_16_4_0_0() && t_16_4_0_1() && t_16_4_0_2() && t_16_4_0_3() && t_16_4_0_4() && t_16_4_0_5() && t_16_4_0_6() && t_16_4_0_7() && t_16_4_0_8() && t_16_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_4_0_1(){
        int []Stack_00_col = {41,33,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {17,7,-38,19,15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {12,4};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_4_0_2(){
        int []Stack_00_col = {-18,-26,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {23,-38,-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {18,34,19,-17,-9};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_4_0_3(){
        int []Stack_00_col = {26,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-40,31,-41,38,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-29,-14,27,8};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_4_0_4(){
        int []Stack_00_col = {-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {0,22,-24};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_4_0_5(){
        int []Stack_00_col = {-6,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_4_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {39,33};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_4_0_7(){
        int []Stack_00_col = {48,-21,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 6;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-15,6,-33};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_4_0_8(){
        int []Stack_00_col = {1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-26,-25,-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-24};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_4_0_9(){
        int []Stack_00_col = {-40,35,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-8,-3,0,-37,-31};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_17_0_0(){
            
            try{return (t_17_0_0_0() && t_17_0_0_1() && t_17_0_0_2() && t_17_0_0_3() && t_17_0_0_4() && t_17_0_0_5() && t_17_0_0_6() && t_17_0_0_7() && t_17_0_0_8() && t_17_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_0(){
        int int_00 = 19;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 19;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_1(){
        int int_00 = -23;
    int []Stack_00_col = {32,22,0,48,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -23;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_2(){
        int int_00 = 15;
    int []Stack_00_col = {21,-45,44,41,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 15;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_3(){
        int int_00 = -22;
    int []Stack_00_col = {24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -22;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_4(){
        int int_00 = -17;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -17;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_5(){
        int int_00 = 42;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 42;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_6(){
        int int_00 = -35;
    int []Stack_00_col = {-4,41,10,12,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -35;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_7(){
        int int_00 = 19;
    int []Stack_00_col = {-41,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 19;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_8(){
        int int_00 = -17;
    int []Stack_00_col = {50,-28,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -17;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_9(){
        int int_00 = -30;
    int []Stack_00_col = {17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -30;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_17_1_0(){
            
            try{return (t_17_1_0_0() && t_17_1_0_1() && t_17_1_0_2() && t_17_1_0_3() && t_17_1_0_4() && t_17_1_0_5() && t_17_1_0_6() && t_17_1_0_7() && t_17_1_0_8() && t_17_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_0(){
        int int_00 = 20;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -28;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_1(){
        int int_00 = -39;
    int []Stack_00_col = {19,-20,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 40;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_2(){
        int int_00 = -39;
    int []Stack_00_col = {46,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 25;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_3(){
        int int_00 = -43;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 8;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_4(){
        int int_00 = -36;
    int []Stack_00_col = {35,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -41;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_5(){
        int int_00 = 23;
    int []Stack_00_col = {-41,4,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -6;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_6(){
        int int_00 = 15;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -27;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_7(){
        int int_00 = 32;
    int []Stack_00_col = {-11,25,-44,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 40;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_8(){
        int int_00 = 7;
    int []Stack_00_col = {37,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 20;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_9(){
        int int_00 = -29;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 48;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_18_0_0(){
            
            try{return (t_18_0_0_0() && t_18_0_0_1() && t_18_0_0_2() && t_18_0_0_3() && t_18_0_0_4() && t_18_0_0_5() && t_18_0_0_6() && t_18_0_0_7() && t_18_0_0_8() && t_18_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -12;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -35;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_2(){
        int []Stack_00_col = {38,-34,29,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {38,-34,29,-17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -28;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_3(){
        int []Stack_00_col = {23,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {23,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 12;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 17;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_5(){
        int []Stack_00_col = {-28,-50,-30,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-28,-50,-30,25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 42;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_6(){
        int []Stack_00_col = {22,48,16,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {22,48,16,-40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -50;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_7(){
        int []Stack_00_col = {-33,-48,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-33,-48,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -20;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_8(){
        int []Stack_00_col = {-48,22,-39,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-48,22,-39,-29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 42;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_9(){
        int []Stack_00_col = {9,-10,-37,-34,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {9,-10,-37,-34,-42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 32;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_18_1_0(){
            
            try{return (t_18_1_0_0() && t_18_1_0_1() && t_18_1_0_2() && t_18_1_0_3() && t_18_1_0_4() && t_18_1_0_5() && t_18_1_0_6() && t_18_1_0_7() && t_18_1_0_8() && t_18_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -22;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_1(){
        int []Stack_00_col = {-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {19,4,6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 31;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_2(){
        int []Stack_00_col = {-49,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {18,23,13,-44,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -49;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_3(){
        int []Stack_00_col = {24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-29,24,38,44,18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -43;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_4(){
        int []Stack_00_col = {-25,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {34,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 36;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_5(){
        int []Stack_00_col = {-38,-19,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 31;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_6(){
        int []Stack_00_col = {-27,-3,36,-3,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-31,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -6;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_7(){
        int []Stack_00_col = {46,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {31,-42,-22,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -49;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_8(){
        int []Stack_00_col = {-41,-32,29,27,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {6,43,26,-33,41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 41;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_9(){
        int []Stack_00_col = {38,1,32,36,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {22,-4,-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -19;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_19_0_0(){
            
            try{return (t_19_0_0_0() && t_19_0_0_1() && t_19_0_0_2() && t_19_0_0_3() && t_19_0_0_4() && t_19_0_0_5() && t_19_0_0_6() && t_19_0_0_7() && t_19_0_0_8() && t_19_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -1;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -32;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_2(){
        int []Stack_00_col = {-16,29,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-16,29,-33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 21;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_3(){
        int []Stack_00_col = {-43,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-43,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -18;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -23;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_5(){
        int []Stack_00_col = {-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 44;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -9;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_7(){
        int []Stack_00_col = {42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -18;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_8(){
        int []Stack_00_col = {-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -38;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 38;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_19_1_0(){
            
            try{return (t_19_1_0_0() && t_19_1_0_1() && t_19_1_0_2() && t_19_1_0_3() && t_19_1_0_4() && t_19_1_0_5() && t_19_1_0_6() && t_19_1_0_7() && t_19_1_0_8() && t_19_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -2;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_1(){
        int []Stack_00_col = {-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -21;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_2(){
        int []Stack_00_col = {-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -37;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_3(){
        int []Stack_00_col = {42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -2;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -10;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_4(){
        int []Stack_00_col = {18,-50,41,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {18,-50,41,-6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 21;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_5(){
        int []Stack_00_col = {-7,-7,-24,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-7,-7,-24,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -45;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_6(){
        int []Stack_00_col = {35,-44,49,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {35,-44,49,19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 21;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_7(){
        int []Stack_00_col = {-39,34,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-39,34,3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -14;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_8(){
        int []Stack_00_col = {-41,-30,-26,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-41,-30,-26,1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -22;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_9(){
        int []Stack_00_col = {40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 33;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_19_2_0(){
            
            try{return (t_19_2_0_0() && t_19_2_0_1() && t_19_2_0_2() && t_19_2_0_3() && t_19_2_0_4() && t_19_2_0_5() && t_19_2_0_6() && t_19_2_0_7() && t_19_2_0_8() && t_19_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 26;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_1(){
        int []Stack_00_col = {21,29,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-18,-39,23,-30,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 12;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_2(){
        int []Stack_00_col = {-41,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -2;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {34,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -2;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_3(){
        int []Stack_00_col = {-4,17,45,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 10;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_4(){
        int []Stack_00_col = {12,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 16;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_5(){
        int []Stack_00_col = {-38,-28,2,44,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -43;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_6(){
        int []Stack_00_col = {-15,-5,5,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 15;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_7(){
        int []Stack_00_col = {-35,13,1,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {30,2,-50,-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -44;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_8(){
        int []Stack_00_col = {-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {24,34,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 30;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_9(){
        int []Stack_00_col = {-16,-22,43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 24;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_19_3_0(){
            
            try{return (t_19_3_0_0() && t_19_3_0_1() && t_19_3_0_2() && t_19_3_0_3() && t_19_3_0_4() && t_19_3_0_5() && t_19_3_0_6() && t_19_3_0_7() && t_19_3_0_8() && t_19_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -47;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {37,29,2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -24;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_2(){
        int []Stack_00_col = {40,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -30;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_3(){
        int []Stack_00_col = {28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -43;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_4(){
        int []Stack_00_col = {-3,-41,18,-7,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {42,15,12,-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 26;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_5(){
        int []Stack_00_col = {5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 50;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_6(){
        int []Stack_00_col = {33,-5,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-25,-13,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 10;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_7(){
        int []Stack_00_col = {1,-26,15,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 38;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_8(){
        int []Stack_00_col = {-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {9,21,-1,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -19;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_9(){
        int []Stack_00_col = {-6,-48,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -47;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_20_0_0(){
            
            try{return (t_20_0_0_0() && t_20_0_0_1() && t_20_0_0_2() && t_20_0_0_3() && t_20_0_0_4() && t_20_0_0_5() && t_20_0_0_6() && t_20_0_0_7() && t_20_0_0_8() && t_20_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_0(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_1(){
        boolean bool_00 = true;
    int []Stack_00_col = {36,47,-26,17,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {36,47,-26,17,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_2(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_3(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_4(){
        boolean bool_00 = false;
    int []Stack_00_col = {-40,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-40,34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_5(){
        boolean bool_00 = false;
    int []Stack_00_col = {-29,-50,46,45,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-29,-50,46,45,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_6(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_7(){
        boolean bool_00 = false;
    int []Stack_00_col = {24,-44,12,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {24,-44,12,-25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_8(){
        boolean bool_00 = true;
    int []Stack_00_col = {30,42,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {30,42,32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_9(){
        boolean bool_00 = true;
    int []Stack_00_col = {-48,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-48,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_20_1_0(){
            
            try{return (t_20_1_0_0() && t_20_1_0_1() && t_20_1_0_2() && t_20_1_0_3() && t_20_1_0_4() && t_20_1_0_5() && t_20_1_0_6() && t_20_1_0_7() && t_20_1_0_8() && t_20_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_0(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_1(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_2(){
        boolean bool_00 = true;
    int []Stack_00_col = {50,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-24,17,-49,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_3(){
        boolean bool_00 = false;
    int []Stack_00_col = {29,-18,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-17,-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_4(){
        boolean bool_00 = true;
    int []Stack_00_col = {10,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-14,19,39,-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_5(){
        boolean bool_00 = false;
    int []Stack_00_col = {11,-3,-21,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_6(){
        boolean bool_00 = true;
    int []Stack_00_col = {36,-47,26,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-35,-33,14,15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_7(){
        boolean bool_00 = false;
    int []Stack_00_col = {-40,9,-50,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {27,-29,18,0,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_8(){
        boolean bool_00 = false;
    int []Stack_00_col = {9,-47,13,-46,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-40,-3,15,-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_9(){
        boolean bool_00 = false;
    int []Stack_00_col = {24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_21_0_0(){
            
            try{return (t_21_0_0_0() && t_21_0_0_1() && t_21_0_0_2() && t_21_0_0_3() && t_21_0_0_4() && t_21_0_0_5() && t_21_0_0_6() && t_21_0_0_7() && t_21_0_0_8() && t_21_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_2(){
        int []Stack_00_col = {13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {13};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_3(){
        int []Stack_00_col = {20,33,-21,12,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {20,33,-21,12,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {20,33,-21,12,-22};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_4(){
        int []Stack_00_col = {-14,-25,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-14,-25,41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-14,-25,41};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_6(){
        int []Stack_00_col = {-35,31,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-35,31,35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-35,31,35};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_9(){
        int []Stack_00_col = {34,7,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {34,7,25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {34,7,25};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_21_1_0(){
            
            try{return (t_21_1_0_0() && t_21_1_0_1() && t_21_1_0_2() && t_21_1_0_3() && t_21_1_0_4() && t_21_1_0_5() && t_21_1_0_6() && t_21_1_0_7() && t_21_1_0_8() && t_21_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_1(){
        int []Stack_00_col = {33,16,3,-27,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {33,16,3,-27,25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {12,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_2(){
        int []Stack_00_col = {-28,33,5,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -2;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-28,33,5,10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {48,-34,14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_3(){
        int []Stack_00_col = {33,-4,18,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 3;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {33,-4,18,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-32,11,15,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_4(){
        int []Stack_00_col = {29,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {29,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-40,49,-35,-46,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_6(){
        int []Stack_00_col = {12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_7(){
        int []Stack_00_col = {36,-2,22,-28,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {36,-2,22,-28,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {28,30,-42,46,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_8(){
        int []Stack_00_col = {12,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {12,-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_9(){
        int []Stack_00_col = {-42,8,3,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-42,8,3,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_21_2_0(){
            
            try{return (t_21_2_0_0() && t_21_2_0_1() && t_21_2_0_2() && t_21_2_0_3() && t_21_2_0_4() && t_21_2_0_5() && t_21_2_0_6() && t_21_2_0_7() && t_21_2_0_8() && t_21_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_2_0_1(){
        int []Stack_00_col = {-24,-40,44,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {11,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-24,-40,44,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_2_0_2(){
        int []Stack_00_col = {-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_2_0_3(){
        int []Stack_00_col = {42,47,18,18,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {42,47,18,18,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_2_0_4(){
        int []Stack_00_col = {-48,-32,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-43,20,46,-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-48,-32,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_2_0_5(){
        int []Stack_00_col = {-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {18,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_2_0_6(){
        int []Stack_00_col = {9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {11,0,-41,1,13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_2_0_7(){
        int []Stack_00_col = {-37,-40,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-4,-34,-14,-31,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-37,-40,-38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_2_0_8(){
        int []Stack_00_col = {-43,7,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {39,5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-43,7,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_2_0_9(){
        int []Stack_00_col = {-2,13,3,37,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 36;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {40,43,-49,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-2,13,3,37,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_21_3_0(){
            
            try{return (t_21_3_0_0() && t_21_3_0_1() && t_21_3_0_2() && t_21_3_0_3() && t_21_3_0_4() && t_21_3_0_5() && t_21_3_0_6() && t_21_3_0_7() && t_21_3_0_8() && t_21_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_3_0_1(){
        int []Stack_00_col = {-16,-19,13,-3,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-46,-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-46,-19};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_3_0_2(){
        int []Stack_00_col = {-15,22,-22,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-20,1,-44,-40,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-20,1,-44,-40,-26};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_3_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-26,17,-20,-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-26,17,-20,-28};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_3_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {28};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_3_0_5(){
        int []Stack_00_col = {23,8,14,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {50,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {50,45};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_3_0_6(){
        int []Stack_00_col = {-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-24,33,39,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-24,33,39,-12};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_3_0_7(){
        int []Stack_00_col = {-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -13;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {0,19,-9,14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {0,19,-9,14};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_3_0_8(){
        int []Stack_00_col = {2,41,41,-10,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-44,-36,-48,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-44,-36,-48,0};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_3_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {6,25,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {6,25,-31};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_21_4_0(){
            
            try{return (t_21_4_0_0() && t_21_4_0_1() && t_21_4_0_2() && t_21_4_0_3() && t_21_4_0_4() && t_21_4_0_5() && t_21_4_0_6() && t_21_4_0_7() && t_21_4_0_8() && t_21_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_4_0_1(){
        int []Stack_00_col = {50,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {26,27,17,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-24};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_4_0_2(){
        int []Stack_00_col = {-37,32,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {41,29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {10,4,-38};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_4_0_3(){
        int []Stack_00_col = {19,49,10,20,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_4_0_4(){
        int []Stack_00_col = {8,-1,1,-37,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -2;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-9,-30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {35,20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_4_0_5(){
        int []Stack_00_col = {29,32,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-32,-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_4_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {18,-24,-33,-35,-14};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_4_0_7(){
        int []Stack_00_col = {0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-25,-35,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-33,47,21,-3,15};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_4_0_8(){
        int []Stack_00_col = {2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {40,-26};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_21_4_0_9(){
        int []Stack_00_col = {26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {6,-19,16,48};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_22_0_0(){
            
            try{return (t_22_0_0_0() && t_22_0_0_1() && t_22_0_0_2() && t_22_0_0_3() && t_22_0_0_4() && t_22_0_0_5() && t_22_0_0_6() && t_22_0_0_7() && t_22_0_0_8() && t_22_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_0(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_1(){
        boolean bool_00 = true;
    int []Stack_00_col = {11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_2(){
        boolean bool_00 = false;
    int []Stack_00_col = {10,-42,-29,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_3(){
        boolean bool_00 = true;
    int []Stack_00_col = {-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_4(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_5(){
        boolean bool_00 = false;
    int []Stack_00_col = {-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_6(){
        boolean bool_00 = true;
    int []Stack_00_col = {-9,50,27,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_7(){
        boolean bool_00 = false;
    int []Stack_00_col = {5,6,-27,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_8(){
        boolean bool_00 = true;
    int []Stack_00_col = {-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_9(){
        boolean bool_00 = false;
    int []Stack_00_col = {43,16,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_0_0(){
            
            try{return (t_23_0_0_0() && t_23_0_0_1() && t_23_0_0_2() && t_23_0_0_3() && t_23_0_0_4() && t_23_0_0_5() && t_23_0_0_6() && t_23_0_0_7() && t_23_0_0_8() && t_23_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_1(){
        int []Stack_00_col = {-32,38,-13,-9,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-32,38,-13,-9,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-32,38,-13,-9,45};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-32,38,-13,-9,45};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_2(){
        int []Stack_00_col = {-14,-39,-4,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-14,-39,-4,3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-14,-39,-4,3};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-14,-39,-4,3};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_3(){
        int []Stack_00_col = {-25,9,23,22,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-25,9,23,22,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-25,9,23,22,24};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-25,9,23,22,24};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_4(){
        int []Stack_00_col = {10,16,-47,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {10,16,-47,11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {10,16,-47,11};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {10,16,-47,11};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_6(){
        int []Stack_00_col = {-22,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-22,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-22,39};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-22,39};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_7(){
        int []Stack_00_col = {40,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {40,-24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {40,-24};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {40,-24};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_8(){
        int []Stack_00_col = {-43,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-43,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-43,7};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-43,7};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_9(){
        int []Stack_00_col = {41,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {41,-17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {41,-17};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {41,-17};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_1_0(){
            
            try{return (t_23_1_0_0() && t_23_1_0_1() && t_23_1_0_2() && t_23_1_0_3() && t_23_1_0_4() && t_23_1_0_5() && t_23_1_0_6() && t_23_1_0_7() && t_23_1_0_8() && t_23_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_1(){
        int []Stack_00_col = {-42,-32,26,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-42,-32,26,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-42,-32,26,-26};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_2(){
        int []Stack_00_col = {-17,5,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-17,5,-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-17,5,-47};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {19,-29,40,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_3(){
        int []Stack_00_col = {26,-10,-15,-49,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {26,-10,-15,-49,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {26,-10,-15,-49,7};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_4(){
        int []Stack_00_col = {38,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {38,27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {38,27};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-29,18,-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_5(){
        int []Stack_00_col = {32,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {32,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {32,28};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-21,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_6(){
        int []Stack_00_col = {-33,-3,40,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-33,-3,40,-32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-33,-3,40,-32};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-49,-35,-17,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {26,13,4,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_8(){
        int []Stack_00_col = {12,-40,-35,-22,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {12,-40,-35,-22,14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {12,-40,-35,-22,14};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-43,4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_2_0(){
            
            try{return (t_23_2_0_0() && t_23_2_0_1() && t_23_2_0_2() && t_23_2_0_3() && t_23_2_0_4() && t_23_2_0_5() && t_23_2_0_6() && t_23_2_0_7() && t_23_2_0_8() && t_23_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_2_0_1(){
        int []Stack_00_col = {41,30,26,23,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {41,30,26,23,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {34,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {41,30,26,23,29};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_2_0_2(){
        int []Stack_00_col = {-18,17,-43,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-18,17,-43,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {23,-10,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {-18,17,-43,29};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_2_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-35,-37,22,45,18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_2_0_4(){
        int []Stack_00_col = {22,-15,-42,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {22,-15,-42,-45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-37,50,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {22,-15,-42,-45};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_2_0_5(){
        int []Stack_00_col = {48,0,-27,-36,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {48,0,-27,-36,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {48,0,-27,-36,49};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_2_0_6(){
        int []Stack_00_col = {45,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {45,-24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-6,-35,24,15,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {45,-24};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_2_0_7(){
        int []Stack_00_col = {4,42,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {4,42,-45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {4,42,-45};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_2_0_8(){
        int []Stack_00_col = {4,-33,26,3,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {4,-33,26,3,-31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-26,-46,-29,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {4,-33,26,3,-31};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_2_0_9(){
        int []Stack_00_col = {18,-50,-19,7,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {18,-50,-19,7,11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {41,-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {18,-50,-19,7,11};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_3_0(){
            
            try{return (t_23_3_0_0() && t_23_3_0_1() && t_23_3_0_2() && t_23_3_0_3() && t_23_3_0_4() && t_23_3_0_5() && t_23_3_0_6() && t_23_3_0_7() && t_23_3_0_8() && t_23_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_3_0_1(){
        int []Stack_00_col = {2,-31,-39,-21,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {2,-31,-39,-21,-45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {29,-16,-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {29,-16,-3};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_3_0_2(){
        int []Stack_00_col = {-3,-27,-38,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-3,-27,-38,18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_3_0_3(){
        int []Stack_00_col = {50,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {50,42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-42,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-42,-13};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_3_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-15,26,-26,47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-15,26,-26,47};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_3_0_5(){
        int []Stack_00_col = {-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_3_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-39,-40,-26,-40,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-39,-40,-26,-40,-18};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_3_0_7(){
        int []Stack_00_col = {23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-45,-45,3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-45,-45,3};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_3_0_8(){
        int []Stack_00_col = {30,43,50,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {30,43,50,-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-35};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_3_0_9(){
        int []Stack_00_col = {28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-23,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-23,1};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_4_0(){
            
            try{return (t_23_4_0_0() && t_23_4_0_1() && t_23_4_0_2() && t_23_4_0_3() && t_23_4_0_4() && t_23_4_0_5() && t_23_4_0_6() && t_23_4_0_7() && t_23_4_0_8() && t_23_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_4_0_1(){
        int []Stack_00_col = {-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-18,-50,-1,35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {47,-7,26,48};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_4_0_2(){
        int []Stack_00_col = {-11,-41,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-11,-41,-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-9,15,24,-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-6,-15,4,5};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_4_0_3(){
        int []Stack_00_col = {-20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {29,5,13,17,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-14,50,9,39};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_4_0_4(){
        int []Stack_00_col = {-28,-44,-31,7,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-28,-44,-31,7,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-48,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {1};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_4_0_5(){
        int []Stack_00_col = {-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {26,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-31};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_4_0_6(){
        int []Stack_00_col = {-48,-3,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-48,-3,-29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {21,-50,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {47,9,-13,43,46};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_4_0_7(){
        int []Stack_00_col = {31,21,-39,-8,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {31,21,-39,-8,-45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {38,24,-37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {38,-35,2,21};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_4_0_8(){
        int []Stack_00_col = {12,-25,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {12,-25,-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {28,40,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {33,5,34,-25};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_4_0_9(){
        int []Stack_00_col = {6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-49,-17,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {45,22,-36};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_5_0(){
            
            try{return (t_23_5_0_0() && t_23_5_0_1() && t_23_5_0_2() && t_23_5_0_3() && t_23_5_0_4() && t_23_5_0_5() && t_23_5_0_6() && t_23_5_0_7() && t_23_5_0_8() && t_23_5_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_5_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_5_0_1(){
        int []Stack_00_col = {36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {36,25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {36};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_5_0_2(){
        int []Stack_00_col = {10,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-1,-14,40,-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {10,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {10,-12};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_5_0_3(){
        int []Stack_00_col = {6,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {6,12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {6,12};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_5_0_4(){
        int []Stack_00_col = {-41,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-41,-7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-41,-7};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_5_0_5(){
        int []Stack_00_col = {-25,-11,32,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-25,-11,32,4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-25,-11,32,4};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_5_0_6(){
        int []Stack_00_col = {-32,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-32,38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-32,38};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_5_0_7(){
        int []Stack_00_col = {44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {44};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_5_0_8(){
        int []Stack_00_col = {44,-9,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {44,-9,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {44,-9,7};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_5_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {29,-28,-33,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_6_0(){
            
            try{return (t_23_6_0_0() && t_23_6_0_1() && t_23_6_0_2() && t_23_6_0_3() && t_23_6_0_4() && t_23_6_0_5() && t_23_6_0_6() && t_23_6_0_7() && t_23_6_0_8() && t_23_6_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_6_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_6_0_1(){
        int []Stack_00_col = {-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_6_0_2(){
        int []Stack_00_col = {-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-8,-9,-50,-36,18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-8,-9,-50,-36,18};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_6_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-19,-47,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-19,-47,10};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_6_0_4(){
        int []Stack_00_col = {-23,30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {7,37,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-23,30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {7,37,42};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_6_0_5(){
        int []Stack_00_col = {-1,36,32,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-4,-30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-1,36,32,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-4,-30};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_6_0_6(){
        int []Stack_00_col = {-29,47,-10,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-9,17,39,3,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-29,47,-10,-7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-9,17,39,3,19};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_6_0_7(){
        int []Stack_00_col = {-13,26,-49,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-6,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-13,26,-49,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-6,-10};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_6_0_8(){
        int []Stack_00_col = {-36,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-36,-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_6_0_9(){
        int []Stack_00_col = {41,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {28,-3,7,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {41,-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {28,-3,7,34};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_7_0(){
            
            try{return (t_23_7_0_0() && t_23_7_0_1() && t_23_7_0_2() && t_23_7_0_3() && t_23_7_0_4() && t_23_7_0_5() && t_23_7_0_6() && t_23_7_0_7() && t_23_7_0_8() && t_23_7_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_7_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_7_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {30,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_7_0_2(){
        int []Stack_00_col = {29,-20,-7,-49,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {6,22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {29,-20,-7,-49,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-35};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_7_0_3(){
        int []Stack_00_col = {-4,-15,28,-8,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-36,18,-3,-41,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-4,-15,28,-8,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-21};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_7_0_4(){
        int []Stack_00_col = {-2,-11,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-27,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-2,-11,31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-28,5,-10,-6};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_7_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {27,-46,46};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_7_0_6(){
        int []Stack_00_col = {35,9,-19,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-6,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {35,9,-19,48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_7_0_7(){
        int []Stack_00_col = {-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {4,31,35,43,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-3};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_7_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-39,-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {18,-3,-1};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_7_0_9(){
        int []Stack_00_col = {46,-45,-47,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {46,-45,-47,-18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_8_0(){
            
            try{return (t_23_8_0_0() && t_23_8_0_1() && t_23_8_0_2() && t_23_8_0_3() && t_23_8_0_4() && t_23_8_0_5() && t_23_8_0_6() && t_23_8_0_7() && t_23_8_0_8() && t_23_8_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_8_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_8_0_1(){
        int []Stack_00_col = {29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-9,44,11,-46,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-9,44,11,-46,49};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_8_0_2(){
        int []Stack_00_col = {-5,32,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-35,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-35,30};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {-5,32,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_8_0_3(){
        int []Stack_00_col = {-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {31,23,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {31,23,27};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {-17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_8_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-17,-9,-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-17,-9,-42};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_8_0_5(){
        int []Stack_00_col = {-7,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-27,-21,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-27,-21,11};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {-7,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_8_0_6(){
        int []Stack_00_col = {4,24,-46,49,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {4,24,-46,49,-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_8_0_7(){
        int []Stack_00_col = {-39,31,-12,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {46,-8,27,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {46,-8,27,46};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {-39,31,-12,-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_8_0_8(){
        int []Stack_00_col = {30,-41,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-11,-39,-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-11,-39,-28};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {30,-41,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_8_0_9(){
        int []Stack_00_col = {-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_9_0(){
            
            try{return (t_23_9_0_0() && t_23_9_0_1() && t_23_9_0_2() && t_23_9_0_3() && t_23_9_0_4() && t_23_9_0_5() && t_23_9_0_6() && t_23_9_0_7() && t_23_9_0_8() && t_23_9_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_9_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_9_0_1(){
        int []Stack_00_col = {-35,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-12,13,2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-12,13,2};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-12,13,2};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_9_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-39,-32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-39,-32};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-39,-32};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_9_0_3(){
        int []Stack_00_col = {-26,-20,-12,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {13,37,-41,30,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {13,37,-41,30,1};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {13,37,-41,30,1};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_9_0_4(){
        int []Stack_00_col = {-12,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-29,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-29,-10};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-29,-10};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_9_0_5(){
        int []Stack_00_col = {-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-37};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-37};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_9_0_6(){
        int []Stack_00_col = {-21,-44,-2,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-31,-34,2,2,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-31,-34,2,2,19};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-31,-34,2,2,19};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_9_0_7(){
        int []Stack_00_col = {-43,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {10,-12,42,-49,-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {10,-12,42,-49,-14};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {10,-12,42,-49,-14};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_9_0_8(){
        int []Stack_00_col = {47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-25,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-25,31};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-25,31};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_9_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {35,40,-23,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {35,40,-23,-24};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {35,40,-23,-24};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_10_0(){
            
            try{return (t_23_10_0_0() && t_23_10_0_1() && t_23_10_0_2() && t_23_10_0_3() && t_23_10_0_4() && t_23_10_0_5() && t_23_10_0_6() && t_23_10_0_7() && t_23_10_0_8() && t_23_10_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_10_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_10_0_1(){
        int []Stack_00_col = {-46,11,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {3,-21,23,-17};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_10_0_2(){
        int []Stack_00_col = {3,-44,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {48,28,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {48,28,12};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {12,-9};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_10_0_3(){
        int []Stack_00_col = {5,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-4};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {40};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_10_0_4(){
        int []Stack_00_col = {40,-12,45,13,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {15,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {15,31};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {34,-25,-24,24};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_10_0_5(){
        int []Stack_00_col = {-44,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-27,6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-27,6};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-46,4};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_10_0_6(){
        int []Stack_00_col = {47,41,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-13,-13,35};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_10_0_7(){
        int []Stack_00_col = {-27,46,10,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {0,-10};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_10_0_8(){
        int []Stack_00_col = {20,-2,-36,13,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {18,-39,-26};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_10_0_9(){
        int []Stack_00_col = {-33,-33,-2,25,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {3,-33,14,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {3,-33,14,-7};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_11_0(){
            
            try{return (t_23_11_0_0() && t_23_11_0_1() && t_23_11_0_2() && t_23_11_0_3() && t_23_11_0_4() && t_23_11_0_5() && t_23_11_0_6() && t_23_11_0_7() && t_23_11_0_8() && t_23_11_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_11_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_11_0_1(){
        int []Stack_00_col = {43,-40,-32,-10,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {12,-42,5,-34,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-42,-5};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {43,-40,-32,-10,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_11_0_2(){
        int []Stack_00_col = {47,-27,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-37,49,16,-49,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-20,-25,6,32,-47};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {47,-27,-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_11_0_3(){
        int []Stack_00_col = {-10,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {23,40};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-10,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_11_0_4(){
        int []Stack_00_col = {-26,-19,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-32,38,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-32,-13,-1,-43,14};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-26,-19,3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_11_0_5(){
        int []Stack_00_col = {-20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {11,-29,-42,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {25,-46};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_11_0_6(){
        int []Stack_00_col = {-7,-12,19,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-36,18};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-7,-12,19,-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_11_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-6,32};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_11_0_8(){
        int []Stack_00_col = {-23,11,2,8,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-10,41,-49,43,36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-10};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-23,11,2,8,50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_11_0_9(){
        int []Stack_00_col = {15,-24,-32,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {13,10};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {15,-24,-32,19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_12_0(){
            
            try{return (t_23_12_0_0() && t_23_12_0_1() && t_23_12_0_2() && t_23_12_0_3() && t_23_12_0_4() && t_23_12_0_5() && t_23_12_0_6() && t_23_12_0_7() && t_23_12_0_8() && t_23_12_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_12_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_12_0_1(){
        int []Stack_00_col = {-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-11,-7,12,20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-32};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_12_0_2(){
        int []Stack_00_col = {36,-38,-42,-20,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {13};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-6};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_12_0_3(){
        int []Stack_00_col = {-36,-38,27,5,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {9,-23,31,11};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {45};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_12_0_4(){
        int []Stack_00_col = {13,-1,2,-9,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_12_0_5(){
        int []Stack_00_col = {38,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {37};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-34};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_12_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-12,-20,-39,39,-41};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-40};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_12_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {19,35};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_12_0_8(){
        int []Stack_00_col = {-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-41,-21,-45};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-15};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_12_0_9(){
        int []Stack_00_col = {17,10,26,-10,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-14,-45,2,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-46,-23,-32,-2};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-14,-45,2,34};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_13_0(){
            
            try{return (t_23_13_0_0() && t_23_13_0_1() && t_23_13_0_2() && t_23_13_0_3() && t_23_13_0_4() && t_23_13_0_5() && t_23_13_0_6() && t_23_13_0_7() && t_23_13_0_8() && t_23_13_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_13_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_13_0_1(){
        int []Stack_00_col = {-8,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-32,6};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {-32,6};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_13_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-3,34};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {-3,34};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_13_0_3(){
        int []Stack_00_col = {30,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {47,-3,33,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_13_0_4(){
        int []Stack_00_col = {25,48,-36,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {36,19,15,12,5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {21,6,-43};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {21,6,-43};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_13_0_5(){
        int []Stack_00_col = {-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_13_0_6(){
        int []Stack_00_col = {11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {6};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {6};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_13_0_7(){
        int []Stack_00_col = {-12,-37,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-30,-40,46,-6};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {-30,-40,46,-6};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_13_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {18,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_13_0_9(){
        int []Stack_00_col = {-4,27,37,-20,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-11,-6};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {-11,-6};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_14_0(){
            
            try{return (t_23_14_0_0() && t_23_14_0_1() && t_23_14_0_2() && t_23_14_0_3() && t_23_14_0_4() && t_23_14_0_5() && t_23_14_0_6() && t_23_14_0_7() && t_23_14_0_8() && t_23_14_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_14_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_14_0_1(){
        int []Stack_00_col = {4,-13,4,8,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-2,13,-35,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {48,-4};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-39};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_14_0_2(){
        int []Stack_00_col = {8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-7,-30,33,-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-18,-30,-35,-31,-42};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {10};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_14_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {9,-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-41,-41,36,19};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {1,-31,33,-49};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_14_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {23};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_14_0_5(){
        int []Stack_00_col = {-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-45,-21,-38,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-6,-33,-26};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-50,-44,-24,2,-40};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_14_0_6(){
        int []Stack_00_col = {-36,-9,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-39,15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-7,13,-44,-26,32};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_14_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-48,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-46,2,19,10,42};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {0,50,-15};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_14_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {7,34};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {34,-13,27,-26,20};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_14_0_9(){
        int []Stack_00_col = {19,-49,50,-24,44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {2,3,-13};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-36,-9};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_24_0_0(){
            
            try{return (t_24_0_0_0() && t_24_0_0_1() && t_24_0_0_2() && t_24_0_0_3() && t_24_0_0_4() && t_24_0_0_5() && t_24_0_0_6() && t_24_0_0_7() && t_24_0_0_8() && t_24_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_0(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_1(){
        boolean bool_00 = false;
    int []Stack_00_col = {9,24,-26,4,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_2(){
        boolean bool_00 = false;
    int []Stack_00_col = {-39,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -28;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_3(){
        boolean bool_00 = false;
    int []Stack_00_col = {-33,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_4(){
        boolean bool_00 = true;
    int []Stack_00_col = {47,11,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_5(){
        boolean bool_00 = true;
    int []Stack_00_col = {-24,48,18,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_6(){
        boolean bool_00 = false;
    int []Stack_00_col = {50,-45,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_7(){
        boolean bool_00 = false;
    int []Stack_00_col = {5,-16,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_8(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_9(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_25_0_0(){
            
            try{return (t_25_0_0_0() && t_25_0_0_1() && t_25_0_0_2() && t_25_0_0_3() && t_25_0_0_4() && t_25_0_0_5() && t_25_0_0_6() && t_25_0_0_7() && t_25_0_0_8() && t_25_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -4;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -5;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -6;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_3(){
        int []Stack_00_col = {-18,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-18,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -4;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_4(){
        int []Stack_00_col = {-45,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-45,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 28;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_5(){
        int []Stack_00_col = {6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -39;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_6(){
        int []Stack_00_col = {-13,-45,15,-14,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-13,-45,15,-14,-16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -38;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_7(){
        int []Stack_00_col = {-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 25;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_8(){
        int []Stack_00_col = {47,-10,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {47,-10,27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 15;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_9(){
        int []Stack_00_col = {49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 1;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_25_1_0(){
            
            try{return (t_25_1_0_0() && t_25_1_0_1() && t_25_1_0_2() && t_25_1_0_3() && t_25_1_0_4() && t_25_1_0_5() && t_25_1_0_6() && t_25_1_0_7() && t_25_1_0_8() && t_25_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 18;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_1(){
        int []Stack_00_col = {47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 1;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_2(){
        int []Stack_00_col = {23,33,3,-21,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {23,33,3,-21,-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 20;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_3(){
        int []Stack_00_col = {13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -45;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_4(){
        int []Stack_00_col = {5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -46;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_5(){
        int []Stack_00_col = {-7,0,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-7,0,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -16;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_6(){
        int []Stack_00_col = {23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -25;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_7(){
        int []Stack_00_col = {-33,-45,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-33,-45,-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -9;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_8(){
        int []Stack_00_col = {-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -35;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 28;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_25_2_0(){
            
            try{return (t_25_2_0_0() && t_25_2_0_1() && t_25_2_0_2() && t_25_2_0_3() && t_25_2_0_4() && t_25_2_0_5() && t_25_2_0_6() && t_25_2_0_7() && t_25_2_0_8() && t_25_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -48;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_2_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {8,0,33,-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -37;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_2_0_2(){
        int []Stack_00_col = {-1,23,46,-15,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 48;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_2_0_3(){
        int []Stack_00_col = {36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {24,11,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -46;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_2_0_4(){
        int []Stack_00_col = {18,-20,-32,38,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -30;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_2_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-29,-33,-15,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 30;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_2_0_6(){
        int []Stack_00_col = {-45,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -7;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_2_0_7(){
        int []Stack_00_col = {12,-45,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 2;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {21,31,23,-37,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -23;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_25_2_0_9(){
        int []Stack_00_col = {6,17,-44,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 33;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_25_3_0(){
            
            try{return (t_25_3_0_0() && t_25_3_0_1() && t_25_3_0_2() && t_25_3_0_3() && t_25_3_0_4() && t_25_3_0_5() && t_25_3_0_6() && t_25_3_0_7() && t_25_3_0_8() && t_25_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -24;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_3_0_1(){
        int []Stack_00_col = {-15,41,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {47,34,41,6,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 49;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_3_0_2(){
        int []Stack_00_col = {-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-13,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 21;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_3_0_3(){
        int []Stack_00_col = {-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {43,18,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 9;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_3_0_4(){
        int []Stack_00_col = {-1,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {31,8,0,37,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -43;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_3_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-16,4,50,-41,41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 6;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_3_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-39,-28,33,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -7;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_3_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {44,30,-32,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -9;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {21,-26,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 30;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_25_3_0_9(){
        int []Stack_00_col = {-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-2,-3,24,-30,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -4;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_26_0_0(){
            
            try{return (t_26_0_0_0() && t_26_0_0_1() && t_26_0_0_2() && t_26_0_0_3() && t_26_0_0_4() && t_26_0_0_5() && t_26_0_0_6() && t_26_0_0_7() && t_26_0_0_8() && t_26_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_1(){
        int []Stack_00_col = {-28,8,27,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-28,8,27,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_2(){
        int []Stack_00_col = {10,1,0,-23,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {10,1,0,-23,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_3(){
        int []Stack_00_col = {-20,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-20,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_4(){
        int []Stack_00_col = {33,-25,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {33,-25,-7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_5(){
        int []Stack_00_col = {-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_6(){
        int []Stack_00_col = {39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_7(){
        int []Stack_00_col = {-38,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-38,-3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_8(){
        int []Stack_00_col = {19,2,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {19,2,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_9(){
        int []Stack_00_col = {22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_26_1_0(){
            
            try{return (t_26_1_0_0() && t_26_1_0_1() && t_26_1_0_2() && t_26_1_0_3() && t_26_1_0_4() && t_26_1_0_5() && t_26_1_0_6() && t_26_1_0_7() && t_26_1_0_8() && t_26_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -24;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_2(){
        int []Stack_00_col = {35,1,-31,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-39,35,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_3(){
        int []Stack_00_col = {24,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-50,7,4,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_4(){
        int []Stack_00_col = {17,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {22,29,-28,4,18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_5(){
        int []Stack_00_col = {-14,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_6(){
        int []Stack_00_col = {34,-11,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_7(){
        int []Stack_00_col = {43,-35,-45,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-32,30,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_8(){
        int []Stack_00_col = {-11,-11,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-39,14,22,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_9(){
        int []Stack_00_col = {16,15,45,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 36;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_27_0_0(){
            
            try{return (t_27_0_0_0() && t_27_0_0_1() && t_27_0_0_2() && t_27_0_0_3() && t_27_0_0_4() && t_27_0_0_5() && t_27_0_0_6() && t_27_0_0_7() && t_27_0_0_8() && t_27_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -28;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_1(){
        int []Stack_00_col = {-34,-8,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-34,-8,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_2(){
        int []Stack_00_col = {45,-2,-24,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {45,-2,-24,16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_3(){
        int []Stack_00_col = {30,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {30,-25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_4(){
        int []Stack_00_col = {1,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {1,-45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_6(){
        int []Stack_00_col = {21,-40,-5,41,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {21,-40,-5,41,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_7(){
        int []Stack_00_col = {-15,12,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-15,12,35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_8(){
        int []Stack_00_col = {43,2,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {43,2,-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_9(){
        int []Stack_00_col = {18,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {18,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_27_1_0(){
            
            try{return (t_27_1_0_0() && t_27_1_0_1() && t_27_1_0_2() && t_27_1_0_3() && t_27_1_0_4() && t_27_1_0_5() && t_27_1_0_6() && t_27_1_0_7() && t_27_1_0_8() && t_27_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_1(){
        int []Stack_00_col = {50,9,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_2(){
        int []Stack_00_col = {-11,27,-16,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {39,25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_3(){
        int []Stack_00_col = {-36,25,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {17,29,9,15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {48,-35,-48,-8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_5(){
        int []Stack_00_col = {26,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {49,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {9,21,-10,18,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_7(){
        int []Stack_00_col = {-9,49,19,46,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-25,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_8(){
        int []Stack_00_col = {10,-3,-11,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-29,-25,28,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_9(){
        int []Stack_00_col = {-40,-48,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_28_0_0(){
            
            try{return (t_28_0_0_0() && t_28_0_0_1() && t_28_0_0_2() && t_28_0_0_3() && t_28_0_0_4() && t_28_0_0_5() && t_28_0_0_6() && t_28_0_0_7() && t_28_0_0_8() && t_28_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_1(){
        int []Stack_00_col = {-18,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-18,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_2(){
        int []Stack_00_col = {-28,-33,5,-11,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-28,-33,5,-11,-6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_3(){
        int []Stack_00_col = {-47,19,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-47,19,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_4(){
        int []Stack_00_col = {43,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {43,35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_5(){
        int []Stack_00_col = {-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_6(){
        int []Stack_00_col = {-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_7(){
        int []Stack_00_col = {-9,17,-48,-40,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-9,17,-48,-40,-21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_8(){
        int []Stack_00_col = {-31,25,49,14,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-31,25,49,14,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_9(){
        int []Stack_00_col = {-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_28_1_0(){
            
            try{return (t_28_1_0_0() && t_28_1_0_1() && t_28_1_0_2() && t_28_1_0_3() && t_28_1_0_4() && t_28_1_0_5() && t_28_1_0_6() && t_28_1_0_7() && t_28_1_0_8() && t_28_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_28_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_28_1_0_1(){
        int []Stack_00_col = {18,-27,30,47,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_28_1_0_2(){
        int []Stack_00_col = {23,20,-8,-31,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_28_1_0_3(){
        int []Stack_00_col = {-19,-35,24,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_28_1_0_4(){
        int []Stack_00_col = {-31,12,-26,-28,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {8,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_28_1_0_5(){
        int []Stack_00_col = {-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-19,30,-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_28_1_0_6(){
        int []Stack_00_col = {5,-4,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {2,-33,-50,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_28_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_28_1_0_8(){
        int []Stack_00_col = {-16,-48,16,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-28,-46,5,38,-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_28_1_0_9(){
        int []Stack_00_col = {40,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-23,27,-23,45,39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_29_0_0(){
            
            try{return (t_29_0_0_0() && t_29_0_0_1() && t_29_0_0_2() && t_29_0_0_3() && t_29_0_0_4() && t_29_0_0_5() && t_29_0_0_6() && t_29_0_0_7() && t_29_0_0_8() && t_29_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 15;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_1(){
        int []Stack_00_col = {31,-19,-3,-41,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {31,-19,-3,-41,-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 8;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_2(){
        int []Stack_00_col = {-13,-12,46,40,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-13,-12,46,40,48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -8;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_3(){
        int []Stack_00_col = {-4,-49,-37,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -48;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-4,-49,-37,5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -48;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_4(){
        int []Stack_00_col = {-32,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-32,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -46;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_5(){
        int []Stack_00_col = {-29,-9,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-29,-9,13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 10;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_6(){
        int []Stack_00_col = {10,22,45,44,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {10,22,45,44,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -38;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_7(){
        int []Stack_00_col = {34,28,39,19,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {34,28,39,19,14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 4;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_8(){
        int []Stack_00_col = {-42,-9,12,25,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-42,-9,12,25,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -8;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_9(){
        int []Stack_00_col = {-28,-24,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-28,-24,4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 17;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_29_1_0(){
            
            try{return (t_29_1_0_0() && t_29_1_0_1() && t_29_1_0_2() && t_29_1_0_3() && t_29_1_0_4() && t_29_1_0_5() && t_29_1_0_6() && t_29_1_0_7() && t_29_1_0_8() && t_29_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -33;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_1_0_1(){
        int []Stack_00_col = {-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 0;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_1_0_2(){
        int []Stack_00_col = {15,23,40,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {15,23,40,-40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -23;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_1_0_3(){
        int []Stack_00_col = {22,11,3,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {22,11,3,-50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -23;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_1_0_4(){
        int []Stack_00_col = {-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 20;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_1_0_5(){
        int []Stack_00_col = {7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 42;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_1_0_6(){
        int []Stack_00_col = {2,0,-20,44,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {2,0,-20,44,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -20;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_1_0_7(){
        int []Stack_00_col = {-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 31;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_1_0_8(){
        int []Stack_00_col = {-4,-34,31,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-4,-34,31,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -44;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -6;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_29_2_0(){
            
            try{return (t_29_2_0_0() && t_29_2_0_1() && t_29_2_0_2() && t_29_2_0_3() && t_29_2_0_4() && t_29_2_0_5() && t_29_2_0_6() && t_29_2_0_7() && t_29_2_0_8() && t_29_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -5;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_2_0_1(){
        int []Stack_00_col = {-38,-50,22,21,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 2;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_2_0_2(){
        int []Stack_00_col = {21,-29,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {45,36,24,50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -20;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_2_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {38,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 0;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_2_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -39;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_2_0_5(){
        int []Stack_00_col = {19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {3,-37,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -17;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_2_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-43,36,-42,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 31;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_2_0_7(){
        int []Stack_00_col = {40,43,2,-26,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {12,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -33;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_2_0_8(){
        int []Stack_00_col = {50,16,-11,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {41,-46,-37,-42,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -23;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_2_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {48,-36,7,-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 7;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_29_3_0(){
            
            try{return (t_29_3_0_0() && t_29_3_0_1() && t_29_3_0_2() && t_29_3_0_3() && t_29_3_0_4() && t_29_3_0_5() && t_29_3_0_6() && t_29_3_0_7() && t_29_3_0_8() && t_29_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -26;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_3_0_1(){
        int []Stack_00_col = {-25,6,4,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {17,-23,34,-16,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -46;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_3_0_2(){
        int []Stack_00_col = {-22,-4,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-28,10,15,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 14;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_3_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 6;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_3_0_4(){
        int []Stack_00_col = {-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-28,-45,2,-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 44;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_3_0_5(){
        int []Stack_00_col = {49,31,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -7;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_3_0_6(){
        int []Stack_00_col = {45,44,10,-17,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 8;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_3_0_7(){
        int []Stack_00_col = {30,-27,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {45,-40,-43,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 17;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_3_0_8(){
        int []Stack_00_col = {2,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -16;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_29_3_0_9(){
        int []Stack_00_col = {-7,31,-7,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {30,-10,-48,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -11;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_30_0_0(){
            
            try{return (t_30_0_0_0() && t_30_0_0_1() && t_30_0_0_2() && t_30_0_0_3() && t_30_0_0_4() && t_30_0_0_5() && t_30_0_0_6() && t_30_0_0_7() && t_30_0_0_8() && t_30_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_0(){
        int int_00 = 18;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_1(){
        int int_00 = -22;
    int []Stack_00_col = {50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_2(){
        int int_00 = 4;
    int []Stack_00_col = {-16,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-16,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_3(){
        int int_00 = -20;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_4(){
        int int_00 = 45;
    int []Stack_00_col = {-18,11,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-18,11,-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_5(){
        int int_00 = -6;
    int []Stack_00_col = {30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_6(){
        int int_00 = -24;
    int []Stack_00_col = {37,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {37,-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_7(){
        int int_00 = 15;
    int []Stack_00_col = {45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_8(){
        int int_00 = 39;
    int []Stack_00_col = {-42,41,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-42,41,-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_9(){
        int int_00 = 20;
    int []Stack_00_col = {-10,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-10,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_30_1_0(){
            
            try{return (t_30_1_0_0() && t_30_1_0_1() && t_30_1_0_2() && t_30_1_0_3() && t_30_1_0_4() && t_30_1_0_5() && t_30_1_0_6() && t_30_1_0_7() && t_30_1_0_8() && t_30_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_0(){
        int int_00 = 5;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_1(){
        int int_00 = -15;
    int []Stack_00_col = {-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-42,-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_2(){
        int int_00 = -49;
    int []Stack_00_col = {-7,25,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {6,11,37,36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_3(){
        int int_00 = -46;
    int []Stack_00_col = {-23,48,-30,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-38,-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_4(){
        int int_00 = 39;
    int []Stack_00_col = {15,-29,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-24,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_5(){
        int int_00 = 24;
    int []Stack_00_col = {24,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_6(){
        int int_00 = 7;
    int []Stack_00_col = {8,25,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_7(){
        int int_00 = 9;
    int []Stack_00_col = {28,27,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {23,-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_8(){
        int int_00 = -6;
    int []Stack_00_col = {-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-10,45,-22,-27,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_9(){
        int int_00 = -33;
    int []Stack_00_col = {28,13,-48,-28,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {26,-49,-28,5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_31_0_0(){
            
            try{return (t_31_0_0_0() && t_31_0_0_1() && t_31_0_0_2() && t_31_0_0_3() && t_31_0_0_4() && t_31_0_0_5() && t_31_0_0_6() && t_31_0_0_7() && t_31_0_0_8() && t_31_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_2(){
        int []Stack_00_col = {37,-22,-18,-4,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {37,-22,-18,-4,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_3(){
        int []Stack_00_col = {-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -16;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_4(){
        int []Stack_00_col = {9,-2,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -21;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {9,-2,-21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_5(){
        int []Stack_00_col = {-27,23,-11,-6,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-27,23,-11,-6,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_6(){
        int []Stack_00_col = {5,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 36;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {5,-31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_7(){
        int []Stack_00_col = {41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_8(){
        int []Stack_00_col = {-31,19,-49,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-31,19,-49,15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_9(){
        int []Stack_00_col = {-32,-46,-31,-13,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-32,-46,-31,-13,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_31_1_0(){
            
            try{return (t_31_1_0_0() && t_31_1_0_1() && t_31_1_0_2() && t_31_1_0_3() && t_31_1_0_4() && t_31_1_0_5() && t_31_1_0_6() && t_31_1_0_7() && t_31_1_0_8() && t_31_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -2;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_1(){
        int []Stack_00_col = {-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-5,9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-43,-25,-48,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_3(){
        int []Stack_00_col = {-15,-3,-43,45,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_4(){
        int []Stack_00_col = {8,24,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-17,-34,10,-22,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_6(){
        int []Stack_00_col = {50,-38,-3,-9,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {25,15,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_7(){
        int []Stack_00_col = {25,-43,28,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {41,-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_8(){
        int []Stack_00_col = {48,22,27,-20,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-49,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_9(){
        int []Stack_00_col = {40,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_0_0(){
            
            try{return (t_32_0_0_0() && t_32_0_0_1() && t_32_0_0_2() && t_32_0_0_3() && t_32_0_0_4() && t_32_0_0_5() && t_32_0_0_6() && t_32_0_0_7() && t_32_0_0_8() && t_32_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_0(){
        int int_00 = -42;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -42;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_1(){
        int int_00 = 21;
    int []Stack_00_col = {-49,-31,-11,-27,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 21;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_2(){
        int int_00 = -19;
    int []Stack_00_col = {-5,31,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -19;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_3(){
        int int_00 = -1;
    int []Stack_00_col = {-17,-12,-45,-4,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -1;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_4(){
        int int_00 = -10;
    int []Stack_00_col = {-1,12,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -10;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_5(){
        int int_00 = -48;
    int []Stack_00_col = {16,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -48;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_6(){
        int int_00 = -45;
    int []Stack_00_col = {44,-26,46,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -45;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_7(){
        int int_00 = -45;
    int []Stack_00_col = {10,-35,16,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -45;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_8(){
        int int_00 = 46;
    int []Stack_00_col = {-26,-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 46;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_9(){
        int int_00 = 26;
    int []Stack_00_col = {-5,33,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 26;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_1_0(){
            
            try{return (t_32_1_0_0() && t_32_1_0_1() && t_32_1_0_2() && t_32_1_0_3() && t_32_1_0_4() && t_32_1_0_5() && t_32_1_0_6() && t_32_1_0_7() && t_32_1_0_8() && t_32_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_0(){
        int int_00 = -16;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 1;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_1(){
        int int_00 = 10;
    int []Stack_00_col = {2,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -33;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_2(){
        int int_00 = -22;
    int []Stack_00_col = {-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 13;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_3(){
        int int_00 = -33;
    int []Stack_00_col = {-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 19;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_4(){
        int int_00 = -44;
    int []Stack_00_col = {-19,47,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 12;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_5(){
        int int_00 = 2;
    int []Stack_00_col = {35,19,-50,-44,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 1;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_6(){
        int int_00 = 20;
    int []Stack_00_col = {4,7,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 12;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_7(){
        int int_00 = 13;
    int []Stack_00_col = {-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -30;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_8(){
        int int_00 = 31;
    int []Stack_00_col = {5,-45,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -21;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_9(){
        int int_00 = -39;
    int []Stack_00_col = {18,-16,-4,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -45;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_33_0_0(){
            
            try{return (t_33_0_0_0() && t_33_0_0_1() && t_33_0_0_2() && t_33_0_0_3() && t_33_0_0_4() && t_33_0_0_5() && t_33_0_0_6() && t_33_0_0_7() && t_33_0_0_8() && t_33_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 2;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 6;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 6;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_2(){
        int []Stack_00_col = {-40,-18,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-40,-18,-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 43;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -32;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_4(){
        int []Stack_00_col = {15,46,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {15,46,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 13;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_5(){
        int []Stack_00_col = {18,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {18,-7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 43;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_6(){
        int []Stack_00_col = {-42,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-42,42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 30;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_7(){
        int []Stack_00_col = {47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 2;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -4;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_9(){
        int []Stack_00_col = {-23,47,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 29;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-23,47,10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 29;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_33_1_0(){
            
            try{return (t_33_1_0_0() && t_33_1_0_1() && t_33_1_0_2() && t_33_1_0_3() && t_33_1_0_4() && t_33_1_0_5() && t_33_1_0_6() && t_33_1_0_7() && t_33_1_0_8() && t_33_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 24;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -45;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_1_0_2(){
        int []Stack_00_col = {46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -35;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_1_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -8;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_1_0_4(){
        int []Stack_00_col = {35,41,-37,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -28;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {35,41,-37,32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 18;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_1_0_5(){
        int []Stack_00_col = {36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -24;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -28;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_1_0_6(){
        int []Stack_00_col = {33,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {33,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -44;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_1_0_7(){
        int []Stack_00_col = {-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -43;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_1_0_8(){
        int []Stack_00_col = {-8,-31,-34,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-8,-31,-34,32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 29;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -7;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_33_2_0(){
            
            try{return (t_33_2_0_0() && t_33_2_0_1() && t_33_2_0_2() && t_33_2_0_3() && t_33_2_0_4() && t_33_2_0_5() && t_33_2_0_6() && t_33_2_0_7() && t_33_2_0_8() && t_33_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 41;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_2_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-40,9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 23;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_2_0_2(){
        int []Stack_00_col = {31,7,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-24,-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -4;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_2_0_3(){
        int []Stack_00_col = {0,2,9,-4,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 34;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_2_0_4(){
        int []Stack_00_col = {-22,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 14;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 14;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_2_0_5(){
        int []Stack_00_col = {5,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {11,-19,44,46,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -37;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_2_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-30,38,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -23;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_2_0_7(){
        int []Stack_00_col = {3,8,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {6,-30,-23,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 41;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 43;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_2_0_9(){
        int []Stack_00_col = {-5,21,1,16,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -32;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_33_3_0(){
            
            try{return (t_33_3_0_0() && t_33_3_0_1() && t_33_3_0_2() && t_33_3_0_3() && t_33_3_0_4() && t_33_3_0_5() && t_33_3_0_6() && t_33_3_0_7() && t_33_3_0_8() && t_33_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 8;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_3_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 48;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_3_0_2(){
        int []Stack_00_col = {-40,-47,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -5;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_3_0_3(){
        int []Stack_00_col = {-32,-32,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {37,10,41,-8,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 8;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_3_0_4(){
        int []Stack_00_col = {-22,-34,-50,-31,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 3;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-38,-24,32,4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 34;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_3_0_5(){
        int []Stack_00_col = {31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -32;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_3_0_6(){
        int []Stack_00_col = {36,-48,28,-38,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-28,-9,33,-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -23;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_3_0_7(){
        int []Stack_00_col = {36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -38;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -48;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-41,29,43,-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 42;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_3_0_9(){
        int []Stack_00_col = {41,-49,-2,-9,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 14;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {38,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -26;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_34_0_0(){
            
            try{return (t_34_0_0_0() && t_34_0_0_1() && t_34_0_0_2() && t_34_0_0_3() && t_34_0_0_4() && t_34_0_0_5() && t_34_0_0_6() && t_34_0_0_7() && t_34_0_0_8() && t_34_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_1(){
        int []Stack_00_col = {11,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {11,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {11,0};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_2(){
        int []Stack_00_col = {35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {35};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_3(){
        int []Stack_00_col = {-3,-38,-37,-28,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-3,-38,-37,-28,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-3,-38,-37,-28,-46};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_7(){
        int []Stack_00_col = {23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {23};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_8(){
        int []Stack_00_col = {19,-41,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {19,-41,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {19,-41,45};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_9(){
        int []Stack_00_col = {36,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {36,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {36,2};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_34_1_0(){
            
            try{return (t_34_1_0_0() && t_34_1_0_1() && t_34_1_0_2() && t_34_1_0_3() && t_34_1_0_4() && t_34_1_0_5() && t_34_1_0_6() && t_34_1_0_7() && t_34_1_0_8() && t_34_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_1(){
        int []Stack_00_col = {41,-31,0,2,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {41,-31,0,2,-31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {3,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_2(){
        int []Stack_00_col = {48,-32,-3,39,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {48,-32,-3,39,41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_3(){
        int []Stack_00_col = {-28,44,-44,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-28,44,-44,-8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-43,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_5(){
        int []Stack_00_col = {-49,13,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-49,13,4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-19,-9,-7,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_6(){
        int []Stack_00_col = {-31,9,47,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-31,9,47,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-15,-24,-50,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_7(){
        int []Stack_00_col = {40,-37,-13,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {40,-37,-13,-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {24,34,31,31,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-45,-50,-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_34_2_0(){
            
            try{return (t_34_2_0_0() && t_34_2_0_1() && t_34_2_0_2() && t_34_2_0_3() && t_34_2_0_4() && t_34_2_0_5() && t_34_2_0_6() && t_34_2_0_7() && t_34_2_0_8() && t_34_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_2_0_1(){
        int []Stack_00_col = {6,1,-27,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {8,43,-29,0,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {6,1,-27,50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_2_0_2(){
        int []Stack_00_col = {-36,4,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-35,43,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-36,4,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_2_0_3(){
        int []Stack_00_col = {-14,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {3,16,0,32,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-14,11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_2_0_4(){
        int []Stack_00_col = {-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {15,25,29,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_2_0_5(){
        int []Stack_00_col = {-6,15,21,-44,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-6,15,21,-44,-19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_2_0_6(){
        int []Stack_00_col = {35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_2_0_7(){
        int []Stack_00_col = {-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-1,-37,-10,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_2_0_8(){
        int []Stack_00_col = {34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-15,2,35,8,-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_34_2_0_9(){
        int []Stack_00_col = {-41,-25,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {41,50,-36,18,-48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-41,-25,42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_34_3_0(){
            
            try{return (t_34_3_0_0() && t_34_3_0_1() && t_34_3_0_2() && t_34_3_0_3() && t_34_3_0_4() && t_34_3_0_5() && t_34_3_0_6() && t_34_3_0_7() && t_34_3_0_8() && t_34_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_3_0_1(){
        int []Stack_00_col = {29,-3,14,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {25,9,19,-8,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {25,9,19,-8,23};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_3_0_2(){
        int []Stack_00_col = {-46,28,9,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_3_0_3(){
        int []Stack_00_col = {34,50,38,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-39,-48,-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-39,-48,-28};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_3_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {41,-9,-50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {41,-9,-50};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_3_0_5(){
        int []Stack_00_col = {-27,25,-8,-47,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_3_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {6,-28,27,33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {6,-28,27,33};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_3_0_7(){
        int []Stack_00_col = {-10,-25,46,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-20,20,-15,-30,-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-20,20,-15,-30,-45};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_3_0_8(){
        int []Stack_00_col = {47,-45,18,0,44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {11,24,22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {11,24,22};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_34_3_0_9(){
        int []Stack_00_col = {17,13,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-33,20,-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-33,20,-41};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_34_4_0(){
            
            try{return (t_34_4_0_0() && t_34_4_0_1() && t_34_4_0_2() && t_34_4_0_3() && t_34_4_0_4() && t_34_4_0_5() && t_34_4_0_6() && t_34_4_0_7() && t_34_4_0_8() && t_34_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_34_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_34_4_0_1(){
        int []Stack_00_col = {13,-42,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {22,-47,-28,7};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_34_4_0_2(){
        int []Stack_00_col = {-26,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {48,-50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-39,-24,19,47};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_34_4_0_3(){
        int []Stack_00_col = {6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-3};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_34_4_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {27,-8,13,27,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {6,14,-50,26,19};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_34_4_0_5(){
        int []Stack_00_col = {29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-9,38,44,-16,-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_34_4_0_6(){
        int []Stack_00_col = {30,32,-27,-6,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-40,23,32,-30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-43,5,28,13,34};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_34_4_0_7(){
        int []Stack_00_col = {27,-3,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-22,-49,-38,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-17,-46,19,15};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_34_4_0_8(){
        int []Stack_00_col = {-10,14,41,7,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-2,18,-16,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {3,26,28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_34_4_0_9(){
        int []Stack_00_col = {-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {7,36,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {22,-39,1,14,-16};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_35_0_0(){
            
            try{return (t_35_0_0_0() && t_35_0_0_1() && t_35_0_0_2() && t_35_0_0_3() && t_35_0_0_4() && t_35_0_0_5() && t_35_0_0_6() && t_35_0_0_7() && t_35_0_0_8() && t_35_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_0(){
        int int_00 = 39;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 39;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_1(){
        int int_00 = 30;
    int []Stack_00_col = {-49,38,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 30;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_2(){
        int int_00 = 36;
    int []Stack_00_col = {-45,26,-1,41,-20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 36;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_3(){
        int int_00 = 21;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 21;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_4(){
        int int_00 = -44;
    int []Stack_00_col = {-22,25,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -44;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_5(){
        int int_00 = -24;
    int []Stack_00_col = {28,-9,-36,-4,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -24;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_6(){
        int int_00 = -48;
    int []Stack_00_col = {-16,46,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -48;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_7(){
        int int_00 = 4;
    int []Stack_00_col = {-15,12,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 4;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_8(){
        int int_00 = 12;
    int []Stack_00_col = {23,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 12;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_9(){
        int int_00 = -27;
    int []Stack_00_col = {45,-17,19,11,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -27;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_35_1_0(){
            
            try{return (t_35_1_0_0() && t_35_1_0_1() && t_35_1_0_2() && t_35_1_0_3() && t_35_1_0_4() && t_35_1_0_5() && t_35_1_0_6() && t_35_1_0_7() && t_35_1_0_8() && t_35_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_0(){
        int int_00 = 0;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -17;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_1(){
        int int_00 = 44;
    int []Stack_00_col = {34,-46,15,16,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -23;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_2(){
        int int_00 = -1;
    int []Stack_00_col = {-50,-47,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 25;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_3(){
        int int_00 = 42;
    int []Stack_00_col = {9,-50,34,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -4;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_4(){
        int int_00 = -2;
    int []Stack_00_col = {40,44,-10,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -20;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_5(){
        int int_00 = -25;
    int []Stack_00_col = {-14,-14,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -7;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_6(){
        int int_00 = -36;
    int []Stack_00_col = {27,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -49;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_7(){
        int int_00 = 45;
    int []Stack_00_col = {-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -11;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_8(){
        int int_00 = -24;
    int []Stack_00_col = {-34,-28,33,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 41;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_9(){
        int int_00 = -2;
    int []Stack_00_col = {-21,1,-14,-2,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 3;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_36_0_0(){
            
            try{return (t_36_0_0_0() && t_36_0_0_1() && t_36_0_0_2() && t_36_0_0_3() && t_36_0_0_4() && t_36_0_0_5() && t_36_0_0_6() && t_36_0_0_7() && t_36_0_0_8() && t_36_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_0(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_1(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_2(){
        boolean bool_00 = false;
    int []Stack_00_col = {15,-9,-27,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_3(){
        boolean bool_00 = false;
    int []Stack_00_col = {-22,-3,17,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_4(){
        boolean bool_00 = true;
    int []Stack_00_col = {-31,30,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_5(){
        boolean bool_00 = true;
    int []Stack_00_col = {34,24,-36,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_6(){
        boolean bool_00 = true;
    int []Stack_00_col = {-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_7(){
        boolean bool_00 = false;
    int []Stack_00_col = {-45,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_8(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_9(){
        boolean bool_00 = false;
    int []Stack_00_col = {-36,-44,26,32,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_37_0_0(){
            
            try{return (t_37_0_0_0() && t_37_0_0_1() && t_37_0_0_2() && t_37_0_0_3() && t_37_0_0_4() && t_37_0_0_5() && t_37_0_0_6() && t_37_0_0_7() && t_37_0_0_8() && t_37_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_1(){
        int []Stack_00_col = {8,38,-16,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {8,38,-16,-25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {8,38,-16,-25};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_2(){
        int []Stack_00_col = {-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-9};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_3(){
        int []Stack_00_col = {-25,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-25,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-25,33};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_4(){
        int []Stack_00_col = {15,30,-46,20,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {15,30,-46,20,42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {15,30,-46,20,42};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_5(){
        int []Stack_00_col = {-47,-14,35,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-47,-14,35,-25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-47,-14,35,-25};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_6(){
        int []Stack_00_col = {42,-16,42,27,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {42,-16,42,27,-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {42,-16,42,27,-27};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_8(){
        int []Stack_00_col = {12,-36,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {12,-36,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {12,-36,-26};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_9(){
        int []Stack_00_col = {-35,-27,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-35,-27,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-35,-27,9};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_37_1_0(){
            
            try{return (t_37_1_0_0() && t_37_1_0_1() && t_37_1_0_2() && t_37_1_0_3() && t_37_1_0_4() && t_37_1_0_5() && t_37_1_0_6() && t_37_1_0_7() && t_37_1_0_8() && t_37_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {44,-17,28,50,-20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_3(){
        int []Stack_00_col = {-3,-42,-47,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-3,-42,-47,-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_4(){
        int []Stack_00_col = {48,26,-48,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {48,26,-48,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-18,-36,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_5(){
        int []Stack_00_col = {-20,-48,-4,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-20,-48,-4,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-11,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_6(){
        int []Stack_00_col = {4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-45,-15,31,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_7(){
        int []Stack_00_col = {32,-43,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {32,-43,47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_8(){
        int []Stack_00_col = {29,49,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {29,49,47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_9(){
        int []Stack_00_col = {23,-14,29,33,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {23,-14,29,33,17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_37_2_0(){
            
            try{return (t_37_2_0_0() && t_37_2_0_1() && t_37_2_0_2() && t_37_2_0_3() && t_37_2_0_4() && t_37_2_0_5() && t_37_2_0_6() && t_37_2_0_7() && t_37_2_0_8() && t_37_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_2_0_1(){
        int []Stack_00_col = {-19,20,2,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {42,-35,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-19,20,2,32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_2_0_2(){
        int []Stack_00_col = {19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {32,-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_2_0_3(){
        int []Stack_00_col = {21,32,-14,-49,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {21,32,-14,-49,6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_2_0_4(){
        int []Stack_00_col = {28,-8,49,14,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-1,33,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {28,-8,49,14,-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_2_0_5(){
        int []Stack_00_col = {-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 36;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_2_0_6(){
        int []Stack_00_col = {-27,48,-25,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {20,33,-43,50,-6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-27,48,-25,19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_2_0_7(){
        int []Stack_00_col = {18,41,-17,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-49,38,-31,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {18,41,-17,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_2_0_9(){
        int []Stack_00_col = {49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_37_3_0(){
            
            try{return (t_37_3_0_0() && t_37_3_0_1() && t_37_3_0_2() && t_37_3_0_3() && t_37_3_0_4() && t_37_3_0_5() && t_37_3_0_6() && t_37_3_0_7() && t_37_3_0_8() && t_37_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_3_0_1(){
        int []Stack_00_col = {27,5,-35,50,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_3_0_2(){
        int []Stack_00_col = {-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {14,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {14,28};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_3_0_3(){
        int []Stack_00_col = {19,-45,44,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-35,-36,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-35,-36,-18};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_3_0_4(){
        int []Stack_00_col = {-24,10,-3,-44,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {20,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {20,49};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_3_0_5(){
        int []Stack_00_col = {-26,2,-23,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_3_0_6(){
        int []Stack_00_col = {-12,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {44,-39,-32,20,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {44,-39,-32,20,17};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_3_0_7(){
        int []Stack_00_col = {15,-6,2,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {4,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {4,30};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_3_0_8(){
        int []Stack_00_col = {-40,1,-20,44,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-47};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_3_0_9(){
        int []Stack_00_col = {36,23,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-11};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_37_4_0(){
            
            try{return (t_37_4_0_0() && t_37_4_0_1() && t_37_4_0_2() && t_37_4_0_3() && t_37_4_0_4() && t_37_4_0_5() && t_37_4_0_6() && t_37_4_0_7() && t_37_4_0_8() && t_37_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_4_0_1(){
        int []Stack_00_col = {-37,-33,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {19,-6,-47,-7,-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {35};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_4_0_2(){
        int []Stack_00_col = {7,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {36,36,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-23,-29,-6,-41,-44};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_4_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {34,-38,-48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {38,-49};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_4_0_4(){
        int []Stack_00_col = {4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-22,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {46,-30,37,-30,-7};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_4_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-36,49,29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-22,40};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_4_0_6(){
        int []Stack_00_col = {27,21,21,-48,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {2,-41,-50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {31,-50};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_4_0_7(){
        int []Stack_00_col = {8,45,32,25,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {49,-23,-21,30,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-47};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_4_0_8(){
        int []Stack_00_col = {-50,4,-8,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-9,-14,12};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_4_0_9(){
        int []Stack_00_col = {-23,43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {21,0,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {45,9,-37};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_38_0_0(){
            
            try{return (t_38_0_0_0() && t_38_0_0_1() && t_38_0_0_2() && t_38_0_0_3() && t_38_0_0_4() && t_38_0_0_5() && t_38_0_0_6() && t_38_0_0_7() && t_38_0_0_8() && t_38_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_0(){
        int int_00 = -17;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -17;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_1(){
        int int_00 = -11;
    int []Stack_00_col = {-16,-26,31,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -11;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_2(){
        int int_00 = 8;
    int []Stack_00_col = {12,-47,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 8;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_3(){
        int int_00 = 7;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 7;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_4(){
        int int_00 = -29;
    int []Stack_00_col = {43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -29;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_5(){
        int int_00 = -5;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -5;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_6(){
        int int_00 = -48;
    int []Stack_00_col = {-4,-12,-2,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -48;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_7(){
        int int_00 = 38;
    int []Stack_00_col = {-38,-34,-46,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 38;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_8(){
        int int_00 = 40;
    int []Stack_00_col = {44,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 40;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_9(){
        int int_00 = 18;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 18;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_38_1_0(){
            
            try{return (t_38_1_0_0() && t_38_1_0_1() && t_38_1_0_2() && t_38_1_0_3() && t_38_1_0_4() && t_38_1_0_5() && t_38_1_0_6() && t_38_1_0_7() && t_38_1_0_8() && t_38_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_0(){
        int int_00 = -24;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -25;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_1(){
        int int_00 = 37;
    int []Stack_00_col = {29,-27,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 4;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_2(){
        int int_00 = 19;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 43;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_3(){
        int int_00 = 43;
    int []Stack_00_col = {36,-50,15,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -5;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_4(){
        int int_00 = 20;
    int []Stack_00_col = {-45,-23,-20,-30,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 13;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_5(){
        int int_00 = 16;
    int []Stack_00_col = {9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 15;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_6(){
        int int_00 = -20;
    int []Stack_00_col = {-2,35,-46,14,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 49;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_7(){
        int int_00 = 50;
    int []Stack_00_col = {25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 48;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_8(){
        int int_00 = -38;
    int []Stack_00_col = {-2,-16,36,24,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -12;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_9(){
        int int_00 = -24;
    int []Stack_00_col = {-10,25,-12,46,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -15;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_39_0_0(){
            
            try{return (t_39_0_0_0() && t_39_0_0_1() && t_39_0_0_2() && t_39_0_0_3() && t_39_0_0_4() && t_39_0_0_5() && t_39_0_0_6() && t_39_0_0_7() && t_39_0_0_8() && t_39_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_1(){
        int []Stack_00_col = {14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {14};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_2(){
        int []Stack_00_col = {11,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {11,-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {11,-13};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_4(){
        int []Stack_00_col = {-6,-10,-6,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-6,-10,-6,-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-6,-10,-6,-34};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_5(){
        int []Stack_00_col = {17,-7,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {17,-7,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {17,-7,-22};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_6(){
        int []Stack_00_col = {-32,-6,-10,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-32,-6,-10,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-32,-6,-10,49};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_7(){
        int []Stack_00_col = {18,13,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {18,13,-24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {18,13,-24};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_8(){
        int []Stack_00_col = {-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-27};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_9(){
        int []Stack_00_col = {-8,-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-8,-14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-8,-14};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_39_1_0(){
            
            try{return (t_39_1_0_0() && t_39_1_0_1() && t_39_1_0_2() && t_39_1_0_3() && t_39_1_0_4() && t_39_1_0_5() && t_39_1_0_6() && t_39_1_0_7() && t_39_1_0_8() && t_39_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_1(){
        int []Stack_00_col = {-42,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-42,-42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-33,-29,6,-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_3(){
        int []Stack_00_col = {-12,-11,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-12,-11,31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-2,26,41,16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_4(){
        int []Stack_00_col = {1,20,30,-40,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {1,20,30,-40,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-20,-30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_6(){
        int []Stack_00_col = {-3,33,34,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-3,33,34,10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_7(){
        int []Stack_00_col = {-24,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-24,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-49,-28,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_8(){
        int []Stack_00_col = {8,-15,28,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {8,-15,28,21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {39,-39,-40,-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_9(){
        int []Stack_00_col = {-30,-2,-17,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-30,-2,-17,-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_39_2_0(){
            
            try{return (t_39_2_0_0() && t_39_2_0_1() && t_39_2_0_2() && t_39_2_0_3() && t_39_2_0_4() && t_39_2_0_5() && t_39_2_0_6() && t_39_2_0_7() && t_39_2_0_8() && t_39_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_1(){
        int []Stack_00_col = {-5,26,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-5,26,-23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_2(){
        int []Stack_00_col = {19,22,-27,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-8,-6,-28,-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {19,22,-27,-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_3(){
        int []Stack_00_col = {35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-3,12,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_4(){
        int []Stack_00_col = {-9,8,-12,36,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-32,35,16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-9,8,-12,36,31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_5(){
        int []Stack_00_col = {-37,-8,-32,-38,-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {36,6,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-37,-8,-32,-38,-14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_6(){
        int []Stack_00_col = {-44,-21,-5,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {13,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-44,-21,-5,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_7(){
        int []Stack_00_col = {19,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {4,7,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {19,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_8(){
        int []Stack_00_col = {-7,8,47,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 14;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-7,8,47,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-32,16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_39_3_0(){
            
            try{return (t_39_3_0_0() && t_39_3_0_1() && t_39_3_0_2() && t_39_3_0_3() && t_39_3_0_4() && t_39_3_0_5() && t_39_3_0_6() && t_39_3_0_7() && t_39_3_0_8() && t_39_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-43,-41,39,30,33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-43,-41,39,30,33};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_2(){
        int []Stack_00_col = {5,14,-43,44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {3};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_3(){
        int []Stack_00_col = {47,-2,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-48,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-48,40};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_4(){
        int []Stack_00_col = {45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-19,-50,-42,-32,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-19,-50,-42,-32,-44};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_5(){
        int []Stack_00_col = {-26,26,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-26,6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-26,6};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {4,-44,-37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {4,-44,-37};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_7(){
        int []Stack_00_col = {-23,24,-1,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-35,-40,-36,-7,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-35,-40,-36,-7,48};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_8(){
        int []Stack_00_col = {43,-23,10,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-6,30,39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-6,30,39};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_9(){
        int []Stack_00_col = {25,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-12};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_39_4_0(){
            
            try{return (t_39_4_0_0() && t_39_4_0_1() && t_39_4_0_2() && t_39_4_0_3() && t_39_4_0_4() && t_39_4_0_5() && t_39_4_0_6() && t_39_4_0_7() && t_39_4_0_8() && t_39_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_4_0_1(){
        int []Stack_00_col = {4,13,23,31,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-12,27,1,1,-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {29,-48,-7,-44,42};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_4_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-6,-14,16,-10,-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-20,-2,6,27};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_4_0_3(){
        int []Stack_00_col = {-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-40,49,46,-13,22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-6,-24};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_4_0_4(){
        int []Stack_00_col = {-37,24,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {34};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_4_0_5(){
        int []Stack_00_col = {-18,0,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-12,-18,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {27,-35,5,38,33};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_4_0_6(){
        int []Stack_00_col = {32,1,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-48,-17};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_4_0_7(){
        int []Stack_00_col = {-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -2;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {22,-6,-45,5,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-28,-31,7,-44,29};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_4_0_8(){
        int []Stack_00_col = {-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-39,-8,-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-26,-49,42,-29,34};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_39_4_0_9(){
        int []Stack_00_col = {46,19,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-8,2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-22,-23,40,44,20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_40_0_0(){
            
            try{return (t_40_0_0_0() && t_40_0_0_1() && t_40_0_0_2() && t_40_0_0_3() && t_40_0_0_4() && t_40_0_0_5() && t_40_0_0_6() && t_40_0_0_7() && t_40_0_0_8() && t_40_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = -7;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_1(){
        int []Stack_00_col = {0,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {0,3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {0,3};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = -40;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_2(){
        int []Stack_00_col = {16,-26,2,-1,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {16,-26,2,-1,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {16,-26,2,-1,40};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = -20;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_3(){
        int []Stack_00_col = {-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-3};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = 26;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = -5;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_5(){
        int []Stack_00_col = {43,38,24,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {43,38,24,27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {43,38,24,27};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = 21;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_6(){
        int []Stack_00_col = {5,-34,8,13,30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {5,-34,8,13,30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {5,-34,8,13,30};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = 27;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_7(){
        int []Stack_00_col = {10,-10,-33,39,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {10,-10,-33,39,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {10,-10,-33,39,8};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = 21;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_8(){
        int []Stack_00_col = {18,-44,-42,14,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {18,-44,-42,14,13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {18,-44,-42,14,13};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = 33;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_9(){
        int []Stack_00_col = {42,-29,-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {42,-29,-14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {42,-29,-14};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = -18;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_40_1_0(){
            
            try{return (t_40_1_0_0() && t_40_1_0_1() && t_40_1_0_2() && t_40_1_0_3() && t_40_1_0_4() && t_40_1_0_5() && t_40_1_0_6() && t_40_1_0_7() && t_40_1_0_8() && t_40_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -30;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_1(){
        int []Stack_00_col = {-41,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-41,-6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {10,29,-26,-6,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -24;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-4,-2,-10,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 21;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_3(){
        int []Stack_00_col = {3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-34,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 18;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_4(){
        int []Stack_00_col = {36,-10,-23,22,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {36,-10,-23,22,13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-47,-22,-50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -23;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_5(){
        int []Stack_00_col = {-3,19,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-3,19,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {50,8,1,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 30;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_6(){
        int []Stack_00_col = {-14,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-14,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {23,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -31;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_7(){
        int []Stack_00_col = {2,-5,29,-27,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {2,-5,29,-27,-3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {21,-23,-40,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -41;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_8(){
        int []Stack_00_col = {-25,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-25,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {28,21,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 39;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_9(){
        int []Stack_00_col = {17,24,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {17,24,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {46,41,-10,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -5;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_40_2_0(){
            
            try{return (t_40_2_0_0() && t_40_2_0_1() && t_40_2_0_2() && t_40_2_0_3() && t_40_2_0_4() && t_40_2_0_5() && t_40_2_0_6() && t_40_2_0_7() && t_40_2_0_8() && t_40_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -22;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {34,-7,27,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 46;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_2(){
        int []Stack_00_col = {-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-29,-20,-23,-32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -39;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-10,39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 49;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_4(){
        int []Stack_00_col = {-20,-20,5,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-20,-20,5,10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 3;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_5(){
        int []Stack_00_col = {-46,-21,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {30,-35,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-46,-21,5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -49;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_6(){
        int []Stack_00_col = {-13,-48,24,-35,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-13,-48,24,-35,4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 32;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_7(){
        int []Stack_00_col = {38,22,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {44,-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {38,22,4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -13;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_8(){
        int []Stack_00_col = {-38,35,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-43,12,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-38,35,-15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -14;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_9(){
        int []Stack_00_col = {10,-19,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {47,33,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {10,-19,32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -7;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_40_3_0(){
            
            try{return (t_40_3_0_0() && t_40_3_0_1() && t_40_3_0_2() && t_40_3_0_3() && t_40_3_0_4() && t_40_3_0_5() && t_40_3_0_6() && t_40_3_0_7() && t_40_3_0_8() && t_40_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = 12;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {10,45,14,7,6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {10,45,14,7,6};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -20;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_2(){
        int []Stack_00_col = {44,-40,36,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {1,-11,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {1,-11,-10};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -15;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_3(){
        int []Stack_00_col = {38,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -47;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_4(){
        int []Stack_00_col = {-14,-24,-20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -34;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_5(){
        int []Stack_00_col = {-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = 36;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_6(){
        int []Stack_00_col = {43,-12,-28,28,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = 0;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_7(){
        int []Stack_00_col = {-43,-14,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -13;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_8(){
        int []Stack_00_col = {-17,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {50,34,-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {50,34,-2};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -38;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_9(){
        int []Stack_00_col = {-38,-46,24,16,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-30,-6,27,39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-30,-6,27,39};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = 38;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_40_4_0(){
            
            try{return (t_40_4_0_0() && t_40_4_0_1() && t_40_4_0_2() && t_40_4_0_3() && t_40_4_0_4() && t_40_4_0_5() && t_40_4_0_6() && t_40_4_0_7() && t_40_4_0_8() && t_40_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = 32;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_1(){
        int []Stack_00_col = {-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {46,22,-11,36,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {31,47,6,44};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = -43;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_2(){
        int []Stack_00_col = {-20,41,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-41,40,37,25,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {45,47,-48,-50};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = -32;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_3(){
        int []Stack_00_col = {2,36,45,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-12,40,7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {41,48,-36,-31,-20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = -12;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_4(){
        int []Stack_00_col = {-15,-32,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {5,-42,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {44,0,35,16};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = 10;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_5(){
        int []Stack_00_col = {29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {10,15,-30,7,35};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = 17;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_6(){
        int []Stack_00_col = {47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {9,-8,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-30};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = -22;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_7(){
        int []Stack_00_col = {38,-41,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-5,-8,50,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-35,31,-14,-23};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = 10;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_8(){
        int []Stack_00_col = {1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {14,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {49,-32};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = -37;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_9(){
        int []Stack_00_col = {34,26,4,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-6,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-36,50,-33,1};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = -45;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_41_0_0(){
            
            try{return (t_41_0_0_0() && t_41_0_0_1() && t_41_0_0_2() && t_41_0_0_3() && t_41_0_0_4() && t_41_0_0_5() && t_41_0_0_6() && t_41_0_0_7() && t_41_0_0_8() && t_41_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_0(){
        int int_00 = -40;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -40;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_1(){
        int int_00 = -46;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -46;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_2(){
        int int_00 = -40;
    int []Stack_00_col = {-15,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -40;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_3(){
        int int_00 = 3;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 3;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_4(){
        int int_00 = 27;
    int []Stack_00_col = {-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 27;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_5(){
        int int_00 = 29;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 29;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_6(){
        int int_00 = -28;
    int []Stack_00_col = {45,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -28;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_7(){
        int int_00 = 43;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 43;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_8(){
        int int_00 = -45;
    int []Stack_00_col = {-46,1,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -45;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_9(){
        int int_00 = 11;
    int []Stack_00_col = {30,33,-26,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 11;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_41_1_0(){
            
            try{return (t_41_1_0_0() && t_41_1_0_1() && t_41_1_0_2() && t_41_1_0_3() && t_41_1_0_4() && t_41_1_0_5() && t_41_1_0_6() && t_41_1_0_7() && t_41_1_0_8() && t_41_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_0(){
        int int_00 = 4;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -25;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_1(){
        int int_00 = 23;
    int []Stack_00_col = {-48,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 2;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_2(){
        int int_00 = -5;
    int []Stack_00_col = {-9,-39,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -33;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_3(){
        int int_00 = 13;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 12;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_4(){
        int int_00 = 23;
    int []Stack_00_col = {-3,12,-23,-48,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 7;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_5(){
        int int_00 = 45;
    int []Stack_00_col = {-14,1,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 17;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_6(){
        int int_00 = 18;
    int []Stack_00_col = {32,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 30;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_7(){
        int int_00 = -12;
    int []Stack_00_col = {-37,30,37,-10,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 21;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_8(){
        int int_00 = -26;
    int []Stack_00_col = {-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 40;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_9(){
        int int_00 = 6;
    int []Stack_00_col = {31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 49;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        
    }