
import java.util.*;
public class Test{
    public static void main(String args[]){
        System.out.println(f_0_0_0());
System.out.println(f_0_1_0());
System.out.println(f_1_0_0());
System.out.println(f_1_1_0());
System.out.println(f_2_0_0());
System.out.println(f_2_1_0());
System.out.println(f_2_2_0());
System.out.println(f_2_3_0());
System.out.println(f_3_0_0());
System.out.println(f_3_1_0());
System.out.println(f_3_2_0());
System.out.println(f_3_3_0());
System.out.println(f_4_0_0());
System.out.println(f_4_1_0());
System.out.println(f_4_2_0());
System.out.println(f_4_3_0());
System.out.println(f_5_0_0());
System.out.println(f_5_1_0());
System.out.println(f_6_0_0());
System.out.println(f_6_1_0());
System.out.println(f_6_2_0());
System.out.println(f_6_3_0());
System.out.println(f_6_4_0());
System.out.println(f_7_0_0());
System.out.println(f_7_1_0());
System.out.println(f_7_2_0());
System.out.println(f_7_3_0());
System.out.println(f_8_0_0());
System.out.println(f_9_0_0());
System.out.println(f_9_1_0());
System.out.println(f_9_2_0());
System.out.println(f_9_3_0());
System.out.println(f_9_4_0());
System.out.println(f_10_0_0());
System.out.println(f_10_1_0());
System.out.println(f_10_2_0());
System.out.println(f_10_3_0());
System.out.println(f_10_4_0());
System.out.println(f_11_0_0());
System.out.println(f_11_1_0());
System.out.println(f_12_0_0());
System.out.println(f_12_1_0());
System.out.println(f_12_2_0());
System.out.println(f_12_3_0());
System.out.println(f_12_4_0());
System.out.println(f_12_5_0());
System.out.println(f_12_6_0());
System.out.println(f_12_7_0());
System.out.println(f_12_8_0());
System.out.println(f_12_9_0());
System.out.println(f_12_10_0());
System.out.println(f_12_11_0());
System.out.println(f_12_12_0());
System.out.println(f_12_13_0());
System.out.println(f_12_14_0());
System.out.println(f_13_0_0());
System.out.println(f_13_1_0());
System.out.println(f_13_2_0());
System.out.println(f_13_3_0());
System.out.println(f_13_4_0());
System.out.println(f_14_0_0());
System.out.println(f_14_1_0());
System.out.println(f_14_2_0());
System.out.println(f_14_3_0());
System.out.println(f_15_0_0());
System.out.println(f_15_1_0());
System.out.println(f_16_0_0());
System.out.println(f_16_1_0());
System.out.println(f_16_2_0());
System.out.println(f_16_3_0());
System.out.println(f_17_0_0());
System.out.println(f_17_1_0());
System.out.println(f_17_2_0());
System.out.println(f_17_3_0());
System.out.println(f_17_4_0());
System.out.println(f_18_0_0());
System.out.println(f_18_1_0());
System.out.println(f_18_2_0());
System.out.println(f_18_3_0());
System.out.println(f_18_4_0());
System.out.println(f_19_0_0());
System.out.println(f_19_1_0());
System.out.println(f_19_2_0());
System.out.println(f_19_3_0());
System.out.println(f_20_0_0());
System.out.println(f_20_1_0());
System.out.println(f_20_2_0());
System.out.println(f_20_3_0());
System.out.println(f_20_4_0());
System.out.println(f_21_0_0());
System.out.println(f_21_1_0());
System.out.println(f_22_0_0());
System.out.println(f_22_1_0());
System.out.println(f_23_0_0());
System.out.println(f_23_1_0());
System.out.println(f_24_0_0());
System.out.println(f_24_1_0());
System.out.println(f_24_2_0());
System.out.println(f_24_3_0());
System.out.println(f_25_0_0());
System.out.println(f_25_1_0());
System.out.println(f_26_0_0());
System.out.println(f_26_1_0());
System.out.println(f_26_2_0());
System.out.println(f_26_3_0());
System.out.println(f_27_0_0());
System.out.println(f_27_1_0());
System.out.println(f_28_0_0());
System.out.println(f_29_0_0());
System.out.println(f_30_0_0());
System.out.println(f_30_1_0());
System.out.println(f_31_0_0());
System.out.println(f_31_1_0());
System.out.println(f_32_0_0());
System.out.println(f_32_1_0());
System.out.println(f_32_2_0());
System.out.println(f_32_3_0());
System.out.println(f_32_4_0());
System.out.println(f_32_5_0());
System.out.println(f_32_6_0());
System.out.println(f_32_7_0());
System.out.println(f_32_8_0());
System.out.println(f_32_9_0());
System.out.println(f_32_10_0());
System.out.println(f_32_11_0());
System.out.println(f_32_12_0());
System.out.println(f_32_13_0());
System.out.println(f_32_14_0());
System.out.println(f_33_0_0());
System.out.println(f_34_0_0());
System.out.println(f_34_1_0());
System.out.println(f_35_0_0());
System.out.println(f_35_1_0());
System.out.println(f_35_2_0());
System.out.println(f_35_3_0());
System.out.println(f_35_4_0());
System.out.println(f_36_0_0());
System.out.println(f_36_1_0());
System.out.println(f_37_0_0());
System.out.println(f_37_1_0());
System.out.println(f_38_0_0());
System.out.println(f_38_1_0());
System.out.println(f_38_2_0());
System.out.println(f_38_3_0());
System.out.println(f_38_4_0());
System.out.println(f_39_0_0());
System.out.println(f_39_1_0());
System.out.println(f_39_2_0());
System.out.println(f_39_3_0());
System.out.println(f_40_0_0());
System.out.println(f_40_1_0());
System.out.println(f_40_2_0());
System.out.println(f_40_3_0());
System.out.println(f_40_4_0());
System.out.println(f_41_0_0());
System.out.println(f_41_1_0());
     }
     
        private static boolean f_0_0_0(){
            
            try{return (t_0_0_0_0() && t_0_0_0_1() && t_0_0_0_2() && t_0_0_0_3() && t_0_0_0_4() && t_0_0_0_5() && t_0_0_0_6() && t_0_0_0_7() && t_0_0_0_8() && t_0_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_1(){
        int []Stack_00_col = {-9,-17,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-9,-17,22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_2(){
        int []Stack_00_col = {14,-10,-8,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {14,-10,-8,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_3(){
        int []Stack_00_col = {16,6,-32,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {16,6,-32,34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_4(){
        int []Stack_00_col = {24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_5(){
        int []Stack_00_col = {42,14,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {42,14,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_6(){
        int []Stack_00_col = {35,-11,2,12,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {35,-11,2,12,-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_7(){
        int []Stack_00_col = {-20,45,-35,-23,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 6;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-20,45,-35,-23,31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_8(){
        int []Stack_00_col = {-11,-16,19,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-11,-16,19,-25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_0_0_0_9(){
        int []Stack_00_col = {9,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {9,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_0_1_0(){
            
            try{return (t_0_1_0_0() && t_0_1_0_1() && t_0_1_0_2() && t_0_1_0_3() && t_0_1_0_4() && t_0_1_0_5() && t_0_1_0_6() && t_0_1_0_7() && t_0_1_0_8() && t_0_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {50,-32,-48,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_2(){
        int []Stack_00_col = {30,46,-36,-7,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-34,-42,12,-48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_3(){
        int []Stack_00_col = {41,11,38,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-14,-3,-6,-48,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_4(){
        int []Stack_00_col = {27,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_5(){
        int []Stack_00_col = {29,11,-23,5,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_6(){
        int []Stack_00_col = {15,50,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-40,26,-45,-34,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_7(){
        int []Stack_00_col = {-44,36,-44,-10,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {46,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_8(){
        int []Stack_00_col = {41,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {36,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_0_1_0_9(){
        int []Stack_00_col = {-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {7,-36,-14,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_1_0_0(){
            
            try{return (t_1_0_0_0() && t_1_0_0_1() && t_1_0_0_2() && t_1_0_0_3() && t_1_0_0_4() && t_1_0_0_5() && t_1_0_0_6() && t_1_0_0_7() && t_1_0_0_8() && t_1_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_0(){
        int int_00 = 49;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_1(){
        int int_00 = 32;
    int []Stack_00_col = {31,32,-35,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {31,32,-35,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_2(){
        int int_00 = 11;
    int []Stack_00_col = {-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_3(){
        int int_00 = 11;
    int []Stack_00_col = {-7,-39,20,20,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-7,-39,20,20,11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_4(){
        int int_00 = -33;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_5(){
        int int_00 = 30;
    int []Stack_00_col = {19,-9,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {19,-9,-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_6(){
        int int_00 = -13;
    int []Stack_00_col = {49,48,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {49,48,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_7(){
        int int_00 = 25;
    int []Stack_00_col = {39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_8(){
        int int_00 = -39;
    int []Stack_00_col = {-35,20,-31,19,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-35,20,-31,19,-6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_0_0_9(){
        int int_00 = 46;
    int []Stack_00_col = {-27,21,-31,-6,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-27,21,-31,-6,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_1_1_0(){
            
            try{return (t_1_1_0_0() && t_1_1_0_1() && t_1_1_0_2() && t_1_1_0_3() && t_1_1_0_4() && t_1_1_0_5() && t_1_1_0_6() && t_1_1_0_7() && t_1_1_0_8() && t_1_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_1_0_0(){
        int int_00 = -33;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_1_0_1(){
        int int_00 = 47;
    int []Stack_00_col = {-49,-47,26,-22,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-12,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_1_0_2(){
        int int_00 = 0;
    int []Stack_00_col = {-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-39,18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_1_0_3(){
        int int_00 = -36;
    int []Stack_00_col = {-33,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-42,17,-8,-43,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_1_0_4(){
        int int_00 = -6;
    int []Stack_00_col = {-17,-16,44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {44,-45,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_1_0_5(){
        int int_00 = 4;
    int []Stack_00_col = {41,40,22,-47,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-33,29,-9,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_1_0_6(){
        int int_00 = 23;
    int []Stack_00_col = {22,10,-18,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-36,43,25,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_1_0_7(){
        int int_00 = -38;
    int []Stack_00_col = {-50,-34,41,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-21,35,-20,-8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_1_0_8(){
        int int_00 = -49;
    int []Stack_00_col = {-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_1_1_0_9(){
        int int_00 = 11;
    int []Stack_00_col = {-39,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-26,8,-15,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_2_0_0(){
            
            try{return (t_2_0_0_0() && t_2_0_0_1() && t_2_0_0_2() && t_2_0_0_3() && t_2_0_0_4() && t_2_0_0_5() && t_2_0_0_6() && t_2_0_0_7() && t_2_0_0_8() && t_2_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -49;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_1(){
        int []Stack_00_col = {0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 4;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_2(){
        int []Stack_00_col = {3,11,-46,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -2;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {3,11,-46,1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -2;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_3(){
        int []Stack_00_col = {-7,-18,12,-31,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-7,-18,12,-31,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 0;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_4(){
        int []Stack_00_col = {19,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {19,-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -30;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_5(){
        int []Stack_00_col = {20,-16,16,41,30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {20,-16,16,41,30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -25;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 46;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_7(){
        int []Stack_00_col = {45,23,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {45,23,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 19;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_8(){
        int []Stack_00_col = {30,18,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {30,18,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 33;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_0_0_9(){
        int []Stack_00_col = {50,14,48,39,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {50,14,48,39,-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -10;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_2_1_0(){
            
            try{return (t_2_1_0_0() && t_2_1_0_1() && t_2_1_0_2() && t_2_1_0_3() && t_2_1_0_4() && t_2_1_0_5() && t_2_1_0_6() && t_2_1_0_7() && t_2_1_0_8() && t_2_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 22;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_1(){
        int []Stack_00_col = {46,-2,20,-14,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {46,-2,20,-14,-31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 23;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_2(){
        int []Stack_00_col = {-1,-28,-44,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-1,-28,-44,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 38;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_3(){
        int []Stack_00_col = {-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 49;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -12;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_5(){
        int []Stack_00_col = {32,-23,-32,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {32,-23,-32,-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 28;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_6(){
        int []Stack_00_col = {-45,-14,25,-21,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-45,-14,25,-21,21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -3;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_7(){
        int []Stack_00_col = {-9,31,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-9,31,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 34;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_8(){
        int []Stack_00_col = {18,42,-34,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {18,42,-34,-38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -46;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_1_0_9(){
        int []Stack_00_col = {-43,-9,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-43,-9,-50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -14;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_2_2_0(){
            
            try{return (t_2_2_0_0() && t_2_2_0_1() && t_2_2_0_2() && t_2_2_0_3() && t_2_2_0_4() && t_2_2_0_5() && t_2_2_0_6() && t_2_2_0_7() && t_2_2_0_8() && t_2_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 6;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 6;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_2_0_1(){
        int []Stack_00_col = {31,-23,46,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-43,40,-14,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 40;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_2_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {2,50,46,-41,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -46;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_2_0_3(){
        int []Stack_00_col = {13,-30,-19,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 23;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_2_0_4(){
        int []Stack_00_col = {-40,35,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-49,-15,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -30;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_2_0_5(){
        int []Stack_00_col = {-15,24,-34,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-43,-30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 26;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_2_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 7;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_2_0_7(){
        int []Stack_00_col = {-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-31,16,-49,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -15;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_2_0_8(){
        int []Stack_00_col = {17,-42,-8,-48,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {7,13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 25;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_2_0_9(){
        int []Stack_00_col = {38,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 10;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_2_3_0(){
            
            try{return (t_2_3_0_0() && t_2_3_0_1() && t_2_3_0_2() && t_2_3_0_3() && t_2_3_0_4() && t_2_3_0_5() && t_2_3_0_6() && t_2_3_0_7() && t_2_3_0_8() && t_2_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 49;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_3_0_1(){
        int []Stack_00_col = {12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 11;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_3_0_2(){
        int []Stack_00_col = {-10,-2,-4,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-27,-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 40;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_3_0_3(){
        int []Stack_00_col = {25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-36,-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 1;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_3_0_4(){
        int []Stack_00_col = {-30,-7,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-43,-6,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 22;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_3_0_5(){
        int []Stack_00_col = {41,11,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 6;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_3_0_6(){
        int []Stack_00_col = {5,44,2,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {25,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -37;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_3_0_7(){
        int []Stack_00_col = {-39,21,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 50;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_3_0_8(){
        int []Stack_00_col = {-36,0,-8,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 14;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_2_3_0_9(){
        int []Stack_00_col = {-17,-18,-33,-17,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -46;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_3_0_0(){
            
            try{return (t_3_0_0_0() && t_3_0_0_1() && t_3_0_0_2() && t_3_0_0_3() && t_3_0_0_4() && t_3_0_0_5() && t_3_0_0_6() && t_3_0_0_7() && t_3_0_0_8() && t_3_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -38;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_1(){
        int []Stack_00_col = {-33,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-33,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 20;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_2(){
        int []Stack_00_col = {18,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {18,41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -46;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_3(){
        int []Stack_00_col = {24,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {24,-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 5;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_4(){
        int []Stack_00_col = {-38,-18,-18,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-38,-18,-18,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 12;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -40;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_6(){
        int []Stack_00_col = {19,9,-28,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {19,9,-28,-33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 25;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_7(){
        int []Stack_00_col = {-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -6;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_8(){
        int []Stack_00_col = {30,11,-38,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {30,11,-38,22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -29;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_0_0_9(){
        int []Stack_00_col = {20,-16,-30,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {20,-16,-30,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 31;
    Stack_01.push(int_01);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_3_1_0(){
            
            try{return (t_3_1_0_0() && t_3_1_0_1() && t_3_1_0_2() && t_3_1_0_3() && t_3_1_0_4() && t_3_1_0_5() && t_3_1_0_6() && t_3_1_0_7() && t_3_1_0_8() && t_3_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 38;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_1(){
        int []Stack_00_col = {36,-35,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {36,-35,-50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -25;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_2(){
        int []Stack_00_col = {-12,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-12,-29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -22;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_3(){
        int []Stack_00_col = {-25,29,-6,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-25,29,-6,42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -36;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_4(){
        int []Stack_00_col = {-29,20,-47,-20,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-29,20,-47,-20,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -43;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -21;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_6(){
        int []Stack_00_col = {-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 34;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_7(){
        int []Stack_00_col = {-40,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-40,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -47;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_8(){
        int []Stack_00_col = {50,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {50,-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -29;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_1_0_9(){
        int []Stack_00_col = {16,-29,-47,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {16,-29,-47,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -10;
    Stack_01.push(int_10);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_3_2_0(){
            
            try{return (t_3_2_0_0() && t_3_2_0_1() && t_3_2_0_2() && t_3_2_0_3() && t_3_2_0_4() && t_3_2_0_5() && t_3_2_0_6() && t_3_2_0_7() && t_3_2_0_8() && t_3_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -8;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_2_0_1(){
        int []Stack_00_col = {32,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-16,50,47,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -47;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_2_0_2(){
        int []Stack_00_col = {22,27,-44,41,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {26,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -47;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_2_0_3(){
        int []Stack_00_col = {-18,-44,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-27,-46,4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -1;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_2_0_4(){
        int []Stack_00_col = {-41,-37,25,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -39;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_2_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {30,-22,8,-12,3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -33;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_2_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-50,-47,40,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 28;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_2_0_7(){
        int []Stack_00_col = {37,4,0,21,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 12;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_2_0_8(){
        int []Stack_00_col = {-48,45,-21,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-35,-20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -44;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_3_2_0_9(){
        int []Stack_00_col = {44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 15;
    Stack_10.push(int_01);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_3_3_0(){
            
            try{return (t_3_3_0_0() && t_3_3_0_1() && t_3_3_0_2() && t_3_3_0_3() && t_3_3_0_4() && t_3_3_0_5() && t_3_3_0_6() && t_3_3_0_7() && t_3_3_0_8() && t_3_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 1;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_3_0_1(){
        int []Stack_00_col = {-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {3,-32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -18;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_3_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-25,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -19;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_3_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {41,42,-48,17,-20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 12;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_3_0_4(){
        int []Stack_00_col = {21,-30,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 26;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_3_0_5(){
        int []Stack_00_col = {26,-25,49,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 44;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_3_0_6(){
        int []Stack_00_col = {-12,-41,-21,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 23;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_3_0_7(){
        int []Stack_00_col = {43,-18,-28,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {4,24,7,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -3;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_3_0_8(){
        int []Stack_00_col = {-16,11,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {12,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 17;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_3_3_0_9(){
        int []Stack_00_col = {5,-37,1,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {24,-20,40,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 24;
    Stack_10.push(int_10);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_4_0_0(){
            
            try{return (t_4_0_0_0() && t_4_0_0_1() && t_4_0_0_2() && t_4_0_0_3() && t_4_0_0_4() && t_4_0_0_5() && t_4_0_0_6() && t_4_0_0_7() && t_4_0_0_8() && t_4_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -24;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -24;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_1(){
        int []Stack_00_col = {13,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {13,-28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -12;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_2(){
        int []Stack_00_col = {40,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {40,-32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 42;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_3(){
        int []Stack_00_col = {3,-15,23,-16,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {3,-15,23,-16,-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 44;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_4(){
        int []Stack_00_col = {50,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {50,19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 18;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_5(){
        int []Stack_00_col = {11,49,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {11,49,35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -31;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_6(){
        int []Stack_00_col = {-45,-7,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-45,-7,-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -20;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 44;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 24;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_0_0_9(){
        int []Stack_00_col = {-43,44,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-43,44,-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 22;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_4_1_0(){
            
            try{return (t_4_1_0_0() && t_4_1_0_1() && t_4_1_0_2() && t_4_1_0_3() && t_4_1_0_4() && t_4_1_0_5() && t_4_1_0_6() && t_4_1_0_7() && t_4_1_0_8() && t_4_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 34;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_1(){
        int []Stack_00_col = {22,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {22,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -42;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_2(){
        int []Stack_00_col = {42,35,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {42,35,-25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -43;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_3(){
        int []Stack_00_col = {-3,37,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-3,37,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -14;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_4(){
        int []Stack_00_col = {2,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {2,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 5;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_5(){
        int []Stack_00_col = {28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -44;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 21;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_7(){
        int []Stack_00_col = {-23,-31,-45,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-23,-31,-45,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -32;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_8(){
        int []Stack_00_col = {33,50,30,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {33,50,30,5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -25;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_1_0_9(){
        int []Stack_00_col = {-20,8,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-20,8,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 38;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_4_2_0(){
            
            try{return (t_4_2_0_0() && t_4_2_0_1() && t_4_2_0_2() && t_4_2_0_3() && t_4_2_0_4() && t_4_2_0_5() && t_4_2_0_6() && t_4_2_0_7() && t_4_2_0_8() && t_4_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -37;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_1(){
        int []Stack_00_col = {-47,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {47,11,-49,49,-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -27;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_2(){
        int []Stack_00_col = {17,-50,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {26,24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -27;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_3(){
        int []Stack_00_col = {-20,12,36,-24,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -20;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_4(){
        int []Stack_00_col = {-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-5,50,21,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -4;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_5(){
        int []Stack_00_col = {28,-38,-31,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 44;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_6(){
        int []Stack_00_col = {-48,20,-21,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-6,-36,7,-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -35;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {49,-24,-45,16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -7;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_8(){
        int []Stack_00_col = {-12,-47,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-47,-21,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 44;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_2_0_9(){
        int []Stack_00_col = {35,12,-49,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-1,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 45;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_4_3_0(){
            
            try{return (t_4_3_0_0() && t_4_3_0_1() && t_4_3_0_2() && t_4_3_0_3() && t_4_3_0_4() && t_4_3_0_5() && t_4_3_0_6() && t_4_3_0_7() && t_4_3_0_8() && t_4_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 41;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_1(){
        int []Stack_00_col = {-17,-24,-17,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-33,1,-37,24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -24;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_2(){
        int []Stack_00_col = {-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-7,-33,8,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -41;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_3(){
        int []Stack_00_col = {1,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-47,-49,11,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 48;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -31;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_5(){
        int []Stack_00_col = {-45,32,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {15,-31,38,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -19;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_6(){
        int []Stack_00_col = {3,-26,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-31,-36,-21,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -28;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_7(){
        int []Stack_00_col = {12,8,-16,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {16,34,-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -14;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {36,15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -36;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_4_3_0_9(){
        int []Stack_00_col = {-26,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 3;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_5_0_0(){
            
            try{return (t_5_0_0_0() && t_5_0_0_1() && t_5_0_0_2() && t_5_0_0_3() && t_5_0_0_4() && t_5_0_0_5() && t_5_0_0_6() && t_5_0_0_7() && t_5_0_0_8() && t_5_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -21;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -29;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_2(){
        int []Stack_00_col = {-50,-16,11,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-50,-16,11,22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -49;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_3(){
        int []Stack_00_col = {30,36,-35,-42,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {30,36,-35,-42,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 32;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_4(){
        int []Stack_00_col = {-48,-8,7,29,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-48,-8,7,29,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 30;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_5(){
        int []Stack_00_col = {17,19,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {17,19,-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -48;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_6(){
        int []Stack_00_col = {17,-4,36,33,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {17,-4,36,33,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -2;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 18;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_8(){
        int []Stack_00_col = {45,18,25,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {45,18,25,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -12;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_0_0_9(){
        int []Stack_00_col = {-10,11,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-10,11,-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -1;
    Stack_01.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_5_1_0(){
            
            try{return (t_5_1_0_0() && t_5_1_0_1() && t_5_1_0_2() && t_5_1_0_3() && t_5_1_0_4() && t_5_1_0_5() && t_5_1_0_6() && t_5_1_0_7() && t_5_1_0_8() && t_5_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 27;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-38,47,41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -10;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_2(){
        int []Stack_00_col = {50,-15,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-5,47,-11,-34,-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 47;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_3(){
        int []Stack_00_col = {8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -16;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-39,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 14;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-22,36,-40,-26,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 16;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_6(){
        int []Stack_00_col = {1,3,32,48,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 50;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_7(){
        int []Stack_00_col = {-11,-32,-18,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-18,-21,-43,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 29;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_8(){
        int []Stack_00_col = {-15,6,-13,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-11,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 1;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_5_1_0_9(){
        int []Stack_00_col = {-21,-34,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-20,-9,33,11,-37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -21;
    Stack_10.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_6_0_0(){
            
            try{return (t_6_0_0_0() && t_6_0_0_1() && t_6_0_0_2() && t_6_0_0_3() && t_6_0_0_4() && t_6_0_0_5() && t_6_0_0_6() && t_6_0_0_7() && t_6_0_0_8() && t_6_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_2(){
        int []Stack_00_col = {-31,36,6,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-31,36,6,13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {-31,36,6,13};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_3(){
        int []Stack_00_col = {-28,-34,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-28,-34,-18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {-28,-34,-18};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_4(){
        int []Stack_00_col = {-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {-27};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_5(){
        int []Stack_00_col = {-45,18,-39,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-45,18,-39,1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {-45,18,-39,1};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_6(){
        int []Stack_00_col = {-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {-36};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_7(){
        int []Stack_00_col = {28,-33,26,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {28,-33,26,47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {28,-33,26,47};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_8(){
        int []Stack_00_col = {-31,-17,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-31,-17,-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {-31,-17,-30};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_0_0_9(){
        int []Stack_00_col = {-44,18,-50,-35,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-44,18,-50,-35,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_02_col = {-44,18,-50,-35,-49};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_6_1_0(){
            
            try{return (t_6_1_0_0() && t_6_1_0_1() && t_6_1_0_2() && t_6_1_0_3() && t_6_1_0_4() && t_6_1_0_5() && t_6_1_0_6() && t_6_1_0_7() && t_6_1_0_8() && t_6_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_1(){
        int []Stack_00_col = {-19,46,41,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-19,46,41,-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {34,-21,10,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_2(){
        int []Stack_00_col = {16,30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {16,30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-29,39,24,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_3(){
        int []Stack_00_col = {-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-50,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_4(){
        int []Stack_00_col = {-41,44,-38,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-41,44,-38,-15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_5(){
        int []Stack_00_col = {-18,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-18,36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-45,-9,-46,-38,-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-34,50,-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_8(){
        int []Stack_00_col = {-6,44,8,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-6,44,8,48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_1_0_9(){
        int []Stack_00_col = {3,-13,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {3,-13,-7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-4,-4,-29,12,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_6_2_0(){
            
            try{return (t_6_2_0_0() && t_6_2_0_1() && t_6_2_0_2() && t_6_2_0_3() && t_6_2_0_4() && t_6_2_0_5() && t_6_2_0_6() && t_6_2_0_7() && t_6_2_0_8() && t_6_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_2_0_1(){
        int []Stack_00_col = {-14,30,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-29,35,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-14,30,22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_2_0_2(){
        int []Stack_00_col = {2,30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-27,-50,5,-45,-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {2,30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_2_0_3(){
        int []Stack_00_col = {38,5,30,29,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-47,-12,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {38,5,30,29,-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_2_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {49,-31,-19,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_2_0_5(){
        int []Stack_00_col = {-28,17,14,15,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-28,17,14,15,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_2_0_6(){
        int []Stack_00_col = {11,-11,-44,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {11,-11,-44,-16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_2_0_7(){
        int []Stack_00_col = {-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {31,37,-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_2_0_8(){
        int []Stack_00_col = {47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {44,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_6_2_0_9(){
        int []Stack_00_col = {7,-14,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-49,2,-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {7,-14,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_6_3_0(){
            
            try{return (t_6_3_0_0() && t_6_3_0_1() && t_6_3_0_2() && t_6_3_0_3() && t_6_3_0_4() && t_6_3_0_5() && t_6_3_0_6() && t_6_3_0_7() && t_6_3_0_8() && t_6_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_3_0_1(){
        int []Stack_00_col = {29,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {26,28,-27,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {26,28,-27,-18};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_3_0_2(){
        int []Stack_00_col = {32,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-7,4,-47,-48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {-7,4,-47,-48};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_3_0_3(){
        int []Stack_00_col = {47,-29,-34,-15,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_3_0_4(){
        int []Stack_00_col = {2,-44,33,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {3};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_3_0_5(){
        int []Stack_00_col = {8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {-12};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_3_0_6(){
        int []Stack_00_col = {13,9,-45,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {39,38,25,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {39,38,25,27};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_3_0_7(){
        int []Stack_00_col = {-4,-4,44,34,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_3_0_8(){
        int []Stack_00_col = {-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-43,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {-43,45};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_6_3_0_9(){
        int []Stack_00_col = {-19,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-27,50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_11_col = {-27,50};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_6_4_0(){
            
            try{return (t_6_4_0_0() && t_6_4_0_1() && t_6_4_0_2() && t_6_4_0_3() && t_6_4_0_4() && t_6_4_0_5() && t_6_4_0_6() && t_6_4_0_7() && t_6_4_0_8() && t_6_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_6_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_6_4_0_1(){
        int []Stack_00_col = {-44,34,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {-16,-47,16,-28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_6_4_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-31,27,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {-47};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_6_4_0_3(){
        int []Stack_00_col = {-26,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {0};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_6_4_0_4(){
        int []Stack_00_col = {27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {3};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_6_4_0_5(){
        int []Stack_00_col = {19,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-11,-44,25,16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {-16,18,-38,-42,-44};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_6_4_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {2,9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {37,-6};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_6_4_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {18,-47,-38,36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {10,46,-26,-7};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_6_4_0_8(){
        int []Stack_00_col = {23,5,2,34,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-14,-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, size(Stack_1))) = size(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_6_4_0_9(){
        int []Stack_00_col = {-34,-47,-23,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {2,11,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_20_col = {-25,13};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_7_0_0(){
            
            try{return (t_7_0_0_0() && t_7_0_0_1() && t_7_0_0_2() && t_7_0_0_3() && t_7_0_0_4() && t_7_0_0_5() && t_7_0_0_6() && t_7_0_0_7() && t_7_0_0_8() && t_7_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -32;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_1(){
        int []Stack_00_col = {4,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {4,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -44;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_2(){
        int []Stack_00_col = {4,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -21;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {4,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -21;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_3(){
        int []Stack_00_col = {36,-9,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {36,-9,-50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -5;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_4(){
        int []Stack_00_col = {17,23,-31,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {17,23,-31,18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -47;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 28;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_6(){
        int []Stack_00_col = {-19,39,-30,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-19,39,-30,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -15;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_7(){
        int []Stack_00_col = {6,-36,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {6,-36,-45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 43;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -15;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_0_0_9(){
        int []Stack_00_col = {20,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {20,-23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -38;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_7_1_0(){
            
            try{return (t_7_1_0_0() && t_7_1_0_1() && t_7_1_0_2() && t_7_1_0_3() && t_7_1_0_4() && t_7_1_0_5() && t_7_1_0_6() && t_7_1_0_7() && t_7_1_0_8() && t_7_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -45;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_1(){
        int []Stack_00_col = {-32,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-32,12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -41;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_2(){
        int []Stack_00_col = {39,-42,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {39,-42,35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 5;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_3(){
        int []Stack_00_col = {-27,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-27,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -38;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_4(){
        int []Stack_00_col = {1,12,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {1,12,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -41;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_5(){
        int []Stack_00_col = {32,-27,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {32,-27,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -19;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_6(){
        int []Stack_00_col = {2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -40;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 15;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_8(){
        int []Stack_00_col = {-2,26,-34,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-2,26,-34,-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -49;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_1_0_9(){
        int []Stack_00_col = {25,-29,42,8,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {25,-29,42,8,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -49;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_7_2_0(){
            
            try{return (t_7_2_0_0() && t_7_2_0_1() && t_7_2_0_2() && t_7_2_0_3() && t_7_2_0_4() && t_7_2_0_5() && t_7_2_0_6() && t_7_2_0_7() && t_7_2_0_8() && t_7_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 34;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_1(){
        int []Stack_00_col = {26,29,-27,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 41;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_2(){
        int []Stack_00_col = {-50,10,-34,-16,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {21,-44,21,-19,35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -36;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_3(){
        int []Stack_00_col = {20,-24,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-46,49,-43,-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -6;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_4(){
        int []Stack_00_col = {-42,40,-27,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {28,-32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -30;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_5(){
        int []Stack_00_col = {-17,24,20,7,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-7,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -25;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_6(){
        int []Stack_00_col = {-16,18,-19,1,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {19,-27,-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -38;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_7(){
        int []Stack_00_col = {-38,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -8;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 2;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_2_0_9(){
        int []Stack_00_col = {22,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {1,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -47;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_7_3_0(){
            
            try{return (t_7_3_0_0() && t_7_3_0_1() && t_7_3_0_2() && t_7_3_0_3() && t_7_3_0_4() && t_7_3_0_5() && t_7_3_0_6() && t_7_3_0_7() && t_7_3_0_8() && t_7_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -32;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_1(){
        int []Stack_00_col = {-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-45,-38,21,38,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 34;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_2(){
        int []Stack_00_col = {-42,44,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {22,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -44;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_3(){
        int []Stack_00_col = {1,49,29,-3,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -21;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-22,11,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 24;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_4(){
        int []Stack_00_col = {32,17,38,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {5,12,-1,-17,-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -28;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_5(){
        int []Stack_00_col = {-50,-34,28,-29,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {16,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 18;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_6(){
        int []Stack_00_col = {-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-42,-11,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 3;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_7(){
        int []Stack_00_col = {46,0,-16,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {1,1,-22,29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -26;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_8(){
        int []Stack_00_col = {44,-47,23,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-3,-43,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 30;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_7_3_0_9(){
        int []Stack_00_col = {-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {31,-50,-44,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -1;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_8_0_0(){
            
            try{return (t_8_0_0_0() && t_8_0_0_1() && t_8_0_0_2() && t_8_0_0_3() && t_8_0_0_4() && t_8_0_0_5() && t_8_0_0_6() && t_8_0_0_7() && t_8_0_0_8() && t_8_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_0(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_1(){
        boolean bool_00 = true;
    int []Stack_00_col = {47,-44,4,40,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_2(){
        boolean bool_00 = true;
    int []Stack_00_col = {-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_3(){
        boolean bool_00 = false;
    int []Stack_00_col = {-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_4(){
        boolean bool_00 = true;
    int []Stack_00_col = {-31,18,13,33,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_5(){
        boolean bool_00 = true;
    int []Stack_00_col = {-24,25,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_6(){
        boolean bool_00 = false;
    int []Stack_00_col = {-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_7(){
        boolean bool_00 = false;
    int []Stack_00_col = {-33,18,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_8(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_8_0_0_9(){
        boolean bool_00 = true;
    int []Stack_00_col = {-15,27,-5,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_9_0_0(){
            
            try{return (t_9_0_0_0() && t_9_0_0_1() && t_9_0_0_2() && t_9_0_0_3() && t_9_0_0_4() && t_9_0_0_5() && t_9_0_0_6() && t_9_0_0_7() && t_9_0_0_8() && t_9_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_1(){
        int []Stack_00_col = {36,-46,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {36,-46,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {36,-46,2};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_2(){
        int []Stack_00_col = {-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-25};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_3(){
        int []Stack_00_col = {-32,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-32,31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-32,31};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_4(){
        int []Stack_00_col = {-30,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-30,-32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-30,-32};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_5(){
        int []Stack_00_col = {-4,-48,-13,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-4,-48,-13,34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-4,-48,-13,34};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_6(){
        int []Stack_00_col = {-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-23};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_7(){
        int []Stack_00_col = {-32,18,-28,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-32,18,-28,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-32,18,-28,9};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_8(){
        int []Stack_00_col = {23,-32,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {23,-32,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {23,-32,-46};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_0_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_9_1_0(){
            
            try{return (t_9_1_0_0() && t_9_1_0_1() && t_9_1_0_2() && t_9_1_0_3() && t_9_1_0_4() && t_9_1_0_5() && t_9_1_0_6() && t_9_1_0_7() && t_9_1_0_8() && t_9_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-41,7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_2(){
        int []Stack_00_col = {33,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {33,15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {3,-20,-33,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_3(){
        int []Stack_00_col = {5,-42,50,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {5,-42,50,22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {48,-29,50,12,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_4(){
        int []Stack_00_col = {24,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {24,-24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-38,26,-33,0,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_5(){
        int []Stack_00_col = {36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-29,-34,-33,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_6(){
        int []Stack_00_col = {-3,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-3,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_7(){
        int []Stack_00_col = {-17,43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-17,43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_8(){
        int []Stack_00_col = {-32,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-32,47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-15,-46,-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_1_0_9(){
        int []Stack_00_col = {42,-11,44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {42,-11,44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_9_2_0(){
            
            try{return (t_9_2_0_0() && t_9_2_0_1() && t_9_2_0_2() && t_9_2_0_3() && t_9_2_0_4() && t_9_2_0_5() && t_9_2_0_6() && t_9_2_0_7() && t_9_2_0_8() && t_9_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_1(){
        int []Stack_00_col = {-9,-2,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-14,26,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-9,-2,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_2(){
        int []Stack_00_col = {6,-29,41,-24,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {6,-29,41,-24,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-19,41,-11,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_4(){
        int []Stack_00_col = {-31,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-31,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_5(){
        int []Stack_00_col = {-4,-40,15,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 6;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {43,27,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-4,-40,15,-25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_6(){
        int []Stack_00_col = {7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_7(){
        int []Stack_00_col = {47,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {20,7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {47,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_8(){
        int []Stack_00_col = {-19,38,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {2,11,23,-40,-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-19,38,-32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_2_0_9(){
        int []Stack_00_col = {-2,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {36,38,-36,26,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-2,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_9_3_0(){
            
            try{return (t_9_3_0_0() && t_9_3_0_1() && t_9_3_0_2() && t_9_3_0_3() && t_9_3_0_4() && t_9_3_0_5() && t_9_3_0_6() && t_9_3_0_7() && t_9_3_0_8() && t_9_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_1(){
        int []Stack_00_col = {26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-12,-20,13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-12,-20,13};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_2(){
        int []Stack_00_col = {-18,-14,10,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-44};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {5,19,19,16,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {5,19,19,16,-33};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_4(){
        int []Stack_00_col = {-40,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-43,16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-43,16};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_6(){
        int []Stack_00_col = {40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {3,33,-5,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {3,33,-5,49};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_7(){
        int []Stack_00_col = {-48,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {8,30,49,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {8,30,49,27};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_3_0_9(){
        int []Stack_00_col = {-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-1,-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-1,-28};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_9_4_0(){
            
            try{return (t_9_4_0_0() && t_9_4_0_1() && t_9_4_0_2() && t_9_4_0_3() && t_9_4_0_4() && t_9_4_0_5() && t_9_4_0_6() && t_9_4_0_7() && t_9_4_0_8() && t_9_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_4_0_1(){
        int []Stack_00_col = {43,-4,37,-50,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {43,28,-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {14,9,-28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_4_0_2(){
        int []Stack_00_col = {34,-21,36,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-49,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_4_0_3(){
        int []Stack_00_col = {6,-30,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-21,-32,46,-20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {39,16,-39};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_4_0_4(){
        int []Stack_00_col = {49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-45};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_4_0_5(){
        int []Stack_00_col = {-11,20,-47,3,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-39,33,-8,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-49};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_4_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {3,22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {2,-50,-1,-43,44};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_4_0_7(){
        int []Stack_00_col = {49,17,15,-24,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {19,-7,31,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-21,12};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_4_0_8(){
        int []Stack_00_col = {-25,11,-43,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-10};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_9_4_0_9(){
        int []Stack_00_col = {31,1,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-37,-28,-15,24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-39,50};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_10_0_0(){
            
            try{return (t_10_0_0_0() && t_10_0_0_1() && t_10_0_0_2() && t_10_0_0_3() && t_10_0_0_4() && t_10_0_0_5() && t_10_0_0_6() && t_10_0_0_7() && t_10_0_0_8() && t_10_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_1(){
        int []Stack_00_col = {46,27,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 29;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {46,27,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {46,27,37};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_2(){
        int []Stack_00_col = {-17,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-17,-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-17,-41};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_4(){
        int []Stack_00_col = {-31,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-31,-19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-31,-19};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_5(){
        int []Stack_00_col = {46,-49,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {46,-49,36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {46,-49,36};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_6(){
        int []Stack_00_col = {5,-9,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {5,-9,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {5,-9,-22};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_7(){
        int []Stack_00_col = {42,19,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {42,19,27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {42,19,27};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_8(){
        int []Stack_00_col = {17,-15,-8,-8,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {17,-15,-8,-8,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {17,-15,-8,-8,-44};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_0_0_9(){
        int []Stack_00_col = {30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {30};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_10_1_0(){
            
            try{return (t_10_1_0_0() && t_10_1_0_1() && t_10_1_0_2() && t_10_1_0_3() && t_10_1_0_4() && t_10_1_0_5() && t_10_1_0_6() && t_10_1_0_7() && t_10_1_0_8() && t_10_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -2;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_2(){
        int []Stack_00_col = {-34,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-34,5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_3(){
        int []Stack_00_col = {42,-7,-32,27,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -28;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {42,-7,-32,27,-24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {13,41,32,-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_4(){
        int []Stack_00_col = {32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {31,-28,8,-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_5(){
        int []Stack_00_col = {-31,50,-2,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-31,50,-2,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_6(){
        int []Stack_00_col = {12,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {12,3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-31,28,20,-20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_7(){
        int []Stack_00_col = {20,-47,-9,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {20,-47,-9,10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-15,43,-13,5,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_8(){
        int []Stack_00_col = {29,39,49,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {29,39,49,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {6,-18,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_1_0_9(){
        int []Stack_00_col = {-10,-25,-14,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-10,-25,-14,6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-2,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_10_2_0(){
            
            try{return (t_10_2_0_0() && t_10_2_0_1() && t_10_2_0_2() && t_10_2_0_3() && t_10_2_0_4() && t_10_2_0_5() && t_10_2_0_6() && t_10_2_0_7() && t_10_2_0_8() && t_10_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_1(){
        int []Stack_00_col = {-30,-31,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-24,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-30,-31,48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_2(){
        int []Stack_00_col = {37,21,9,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-42,-29,-24,44,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {37,21,9,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_3(){
        int []Stack_00_col = {15,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {39,47,26,20,33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {15,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_4(){
        int []Stack_00_col = {4,31,34,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 29;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {4,31,34,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {19,-46,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_6(){
        int []Stack_00_col = {50,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -13;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-5,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {50,17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_7(){
        int []Stack_00_col = {18,-12,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {38,-11,-48,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {18,-12,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_8(){
        int []Stack_00_col = {-29,-10,4,-42,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-8,29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-29,-10,4,-42,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_2_0_9(){
        int []Stack_00_col = {6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_10_3_0(){
            
            try{return (t_10_3_0_0() && t_10_3_0_1() && t_10_3_0_2() && t_10_3_0_3() && t_10_3_0_4() && t_10_3_0_5() && t_10_3_0_6() && t_10_3_0_7() && t_10_3_0_8() && t_10_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_1(){
        int []Stack_00_col = {15,8,30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {37};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_2(){
        int []Stack_00_col = {-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {5,-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {5,-4};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_4(){
        int []Stack_00_col = {-19,25,14,14,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {50};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_5(){
        int []Stack_00_col = {1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-6,3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-6,3};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_6(){
        int []Stack_00_col = {0,-27,-11,-46,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-48,-40,12,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-48,-40,12,-16};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -18;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {21,43,-42,21,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {21,43,-42,21,0};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_8(){
        int []Stack_00_col = {20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-37,27,-39,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-37,27,-39,46};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_3_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {25,-18,-23,2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {25,-18,-23,2};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_10_4_0(){
            
            try{return (t_10_4_0_0() && t_10_4_0_1() && t_10_4_0_2() && t_10_4_0_3() && t_10_4_0_4() && t_10_4_0_5() && t_10_4_0_6() && t_10_4_0_7() && t_10_4_0_8() && t_10_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_4_0_1(){
        int []Stack_00_col = {-14,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {14,5,14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {5};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_4_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-22,22,15};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_4_0_3(){
        int []Stack_00_col = {-13,10,11,16,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {39,17,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-28,18};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_4_0_4(){
        int []Stack_00_col = {-3,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-12,33,-50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {31,-31};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_4_0_5(){
        int []Stack_00_col = {-24,6,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {33,12,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {26};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_4_0_6(){
        int []Stack_00_col = {-31,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-31,46,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {45,-34};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_4_0_7(){
        int []Stack_00_col = {-13,-20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {23};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_4_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {45,2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {15};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_10_4_0_9(){
        int []Stack_00_col = {39,-39,36,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-1,42,14,-13,43};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_11_0_0(){
            
            try{return (t_11_0_0_0() && t_11_0_0_1() && t_11_0_0_2() && t_11_0_0_3() && t_11_0_0_4() && t_11_0_0_5() && t_11_0_0_6() && t_11_0_0_7() && t_11_0_0_8() && t_11_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_1(){
        int []Stack_00_col = {-8,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-8,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_2(){
        int []Stack_00_col = {-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 36;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_3(){
        int []Stack_00_col = {28,4,-34,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {28,4,-34,-17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_4(){
        int []Stack_00_col = {24,43,9,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {24,43,9,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_5(){
        int []Stack_00_col = {21,12,-39,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {21,12,-39,10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_6(){
        int []Stack_00_col = {36,43,-5,37,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {36,43,-5,37,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_7(){
        int []Stack_00_col = {-45,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-45,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_8(){
        int []Stack_00_col = {-43,-12,-38,-16,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-43,-12,-38,-16,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_11_0_0_9(){
        int []Stack_00_col = {-32,-35,-46,-36,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-32,-35,-46,-36,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_11_1_0(){
            
            try{return (t_11_1_0_0() && t_11_1_0_1() && t_11_1_0_2() && t_11_1_0_3() && t_11_1_0_4() && t_11_1_0_5() && t_11_1_0_6() && t_11_1_0_7() && t_11_1_0_8() && t_11_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 6;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_1(){
        int []Stack_00_col = {-8,-18,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {19,48,-40,-11,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_2(){
        int []Stack_00_col = {-28,16,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {46,-40,22,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {26,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_4(){
        int []Stack_00_col = {-26,7,21,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {10,0,-7,-11,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_5(){
        int []Stack_00_col = {-39,-42,35,0,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_6(){
        int []Stack_00_col = {49,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-38,-15,-9,-32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-18,-19,-20,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_8(){
        int []Stack_00_col = {29,5,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_11_1_0_9(){
        int []Stack_00_col = {-35,-49,9,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_0_0(){
            
            try{return (t_12_0_0_0() && t_12_0_0_1() && t_12_0_0_2() && t_12_0_0_3() && t_12_0_0_4() && t_12_0_0_5() && t_12_0_0_6() && t_12_0_0_7() && t_12_0_0_8() && t_12_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_1(){
        int []Stack_00_col = {-4,10,41,21,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-4,10,41,21,-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-4,10,41,21,-41};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-4,10,41,21,-41};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_2(){
        int []Stack_00_col = {16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {16};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {16};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_3(){
        int []Stack_00_col = {-41,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-41,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-41,2};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-41,2};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_4(){
        int []Stack_00_col = {45,-43,39,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {45,-43,39,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {45,-43,39,-22};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {45,-43,39,-22};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_5(){
        int []Stack_00_col = {-20,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-20,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-20,-1};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-20,-1};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_6(){
        int []Stack_00_col = {-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-45};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-45};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_7(){
        int []Stack_00_col = {-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-31};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-31};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_8(){
        int []Stack_00_col = {41,-22,-21,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {41,-22,-21,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {41,-22,-21,-22};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {41,-22,-21,-22};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_0_0_9(){
        int []Stack_00_col = {-6,18,-38,-10,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-6,18,-38,-10,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-6,18,-38,-10,39};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-6,18,-38,-10,39};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_1_0(){
            
            try{return (t_12_1_0_0() && t_12_1_0_1() && t_12_1_0_2() && t_12_1_0_3() && t_12_1_0_4() && t_12_1_0_5() && t_12_1_0_6() && t_12_1_0_7() && t_12_1_0_8() && t_12_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_1(){
        int []Stack_00_col = {40,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {40,-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {40,-9};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_2(){
        int []Stack_00_col = {25,-49,-46,19,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {25,-49,-46,19,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {25,-49,-46,19,39};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_3(){
        int []Stack_00_col = {-49,13,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-49,13,-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-49,13,-47};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-30,-48,6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_4(){
        int []Stack_00_col = {-6,-12,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-6,-12,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-6,-12,23};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {7,-21,-29,-35,22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-32,22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_6(){
        int []Stack_00_col = {43,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {43,-3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {43,-3};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {34,-44,13,-28,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_7(){
        int []Stack_00_col = {14,-42,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {14,-42,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {14,-42,37};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {11,12,-29,-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_8(){
        int []Stack_00_col = {17,-42,13,-31,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {17,-42,13,-31,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {17,-42,13,-31,-10};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {40,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_1_0_9(){
        int []Stack_00_col = {12,-21,-43,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {12,-21,-43,-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {12,-21,-43,-36};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    int peek_ret0 = (int)(Stack_02.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_2_0(){
            
            try{return (t_12_2_0_0() && t_12_2_0_1() && t_12_2_0_2() && t_12_2_0_3() && t_12_2_0_4() && t_12_2_0_5() && t_12_2_0_6() && t_12_2_0_7() && t_12_2_0_8() && t_12_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_2_0_1(){
        int []Stack_00_col = {-50,26,25,20,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-50,26,25,20,-23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-46,44,-2,-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {-50,26,25,20,-23};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_2_0_2(){
        int []Stack_00_col = {3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {3};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_2_0_3(){
        int []Stack_00_col = {33,-23,17,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {33,-23,17,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-31,35,31,-6,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {33,-23,17,-22};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_2_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-21,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_2_0_5(){
        int []Stack_00_col = {36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {36};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_2_0_6(){
        int []Stack_00_col = {45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {45};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_2_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {38,49,-38,-43,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_2_0_8(){
        int []Stack_00_col = {26,-37,-3,21,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {26,-37,-3,21,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-34,-43,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {26,-37,-3,21,-2};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_2_0_9(){
        int []Stack_00_col = {-17,20,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-17,20,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {-17,20,24};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_3_0(){
            
            try{return (t_12_3_0_0() && t_12_3_0_1() && t_12_3_0_2() && t_12_3_0_3() && t_12_3_0_4() && t_12_3_0_5() && t_12_3_0_6() && t_12_3_0_7() && t_12_3_0_8() && t_12_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_3_0_1(){
        int []Stack_00_col = {-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-36};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_3_0_2(){
        int []Stack_00_col = {-40,20,-45,17,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-40,20,-45,17,-6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_3_0_3(){
        int []Stack_00_col = {35,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {35,-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-39,18,-30,39,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-39,18,-30,39,-13};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_3_0_4(){
        int []Stack_00_col = {11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_3_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-31,-49,14,-23,-30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-31,-49,14,-23,-30};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_3_0_6(){
        int []Stack_00_col = {-3,15,-32,-25,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-3,15,-32,-25,14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_3_0_7(){
        int []Stack_00_col = {14,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {14,-23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {40,48,40,12,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {40,48,40,12,-40};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-34,-49,-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-34,-49,-1};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_3_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_4_0(){
            
            try{return (t_12_4_0_0() && t_12_4_0_1() && t_12_4_0_2() && t_12_4_0_3() && t_12_4_0_4() && t_12_4_0_5() && t_12_4_0_6() && t_12_4_0_7() && t_12_4_0_8() && t_12_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_4_0_1(){
        int []Stack_00_col = {30,22,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {30,22,-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-11,45,9,44,14};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_4_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_4_0_3(){
        int []Stack_00_col = {2,-11,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {2,-11,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-12,-13,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {46,14,-39};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_4_0_4(){
        int []Stack_00_col = {32,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {32,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-46,-25,28,-38};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_4_0_5(){
        int []Stack_00_col = {-20,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-20,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {38,50,6,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-35,-28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_4_0_6(){
        int []Stack_00_col = {-30,-40,-36,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-30,-40,-36,5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {31,3,-43,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {24,39,10};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_4_0_7(){
        int []Stack_00_col = {-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-33};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_4_0_8(){
        int []Stack_00_col = {-39,32,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-39,32,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {39,3,-2,-41};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_4_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-13,30,19,-30,5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {23,-29,3,-47,4};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_5_0(){
            
            try{return (t_12_5_0_0() && t_12_5_0_1() && t_12_5_0_2() && t_12_5_0_3() && t_12_5_0_4() && t_12_5_0_5() && t_12_5_0_6() && t_12_5_0_7() && t_12_5_0_8() && t_12_5_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_5_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_5_0_1(){
        int []Stack_00_col = {-8,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-8,41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-8,41};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_5_0_2(){
        int []Stack_00_col = {38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-26,18,17,-12,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {38};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_5_0_3(){
        int []Stack_00_col = {25,33,19,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-36,26,-48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {25,33,19,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {25,33,19,24};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_5_0_4(){
        int []Stack_00_col = {10,-29,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {10,-29,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {10,-29,28};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_5_0_5(){
        int []Stack_00_col = {30,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {30,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {30,-5};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_5_0_6(){
        int []Stack_00_col = {35,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {14,45,-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {35,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {35,9};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_5_0_7(){
        int []Stack_00_col = {-12,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {14,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-12,50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-12,50};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_5_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {31,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_5_0_9(){
        int []Stack_00_col = {-14,-35,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-14,-35,10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-14,-35,10};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_6_0(){
            
            try{return (t_12_6_0_0() && t_12_6_0_1() && t_12_6_0_2() && t_12_6_0_3() && t_12_6_0_4() && t_12_6_0_5() && t_12_6_0_6() && t_12_6_0_7() && t_12_6_0_8() && t_12_6_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_6_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_6_0_1(){
        int []Stack_00_col = {15,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {15,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_6_0_2(){
        int []Stack_00_col = {32,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-15,-22,-47,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {32,-24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-15,-22,-47,-47};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_6_0_3(){
        int []Stack_00_col = {-27,12,-22,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-20,-32,5,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-27,12,-22,17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-20,-32,5,-47};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_6_0_4(){
        int []Stack_00_col = {17,-39,13,-8,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {17,-39,13,-8,-38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {35};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_6_0_5(){
        int []Stack_00_col = {-46,16,-7,-22,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-34,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-46,16,-7,-22,-17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-34,-16};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_6_0_6(){
        int []Stack_00_col = {-47,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-47,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-24};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_6_0_7(){
        int []Stack_00_col = {-23,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-36,-33,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-23,34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-36,-33,-35};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_6_0_8(){
        int []Stack_00_col = {4,45,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-47,11,20,-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {4,45,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-47,11,20,-15};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_6_0_9(){
        int []Stack_00_col = {-9,-8,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-49,-33,27,-43,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-9,-8,-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-49,-33,27,-43,-22};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_7_0(){
            
            try{return (t_12_7_0_0() && t_12_7_0_1() && t_12_7_0_2() && t_12_7_0_3() && t_12_7_0_4() && t_12_7_0_5() && t_12_7_0_6() && t_12_7_0_7() && t_12_7_0_8() && t_12_7_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_7_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_7_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-41,-4,-12,-44,-6};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_7_0_2(){
        int []Stack_00_col = {32,28,11,-31,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-34,-43,-38,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {32,28,11,-31,18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {11,-19,-38,-37,-45};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_7_0_3(){
        int []Stack_00_col = {-33,-19,-7,-13,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {35,-39,-41,-23,9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-33,-19,-7,-13,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {15,21,-34,-9,-33};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_7_0_4(){
        int []Stack_00_col = {35,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-31,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {35,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-15,-33};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_7_0_5(){
        int []Stack_00_col = {18,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-48,-37,-10,-27,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {18,46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_7_0_6(){
        int []Stack_00_col = {5,18,44,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {5,18,44,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-6,-28,10,-33,7};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_7_0_7(){
        int []Stack_00_col = {0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_7_0_8(){
        int []Stack_00_col = {12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-9,47,-16,-47,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {46,-48};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_7_0_9(){
        int []Stack_00_col = {-12,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {38,-47,-50,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-12,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-41,36,37,-1,37};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_8_0(){
            
            try{return (t_12_8_0_0() && t_12_8_0_1() && t_12_8_0_2() && t_12_8_0_3() && t_12_8_0_4() && t_12_8_0_5() && t_12_8_0_6() && t_12_8_0_7() && t_12_8_0_8() && t_12_8_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_8_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_8_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {21,10,46,39,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {21,10,46,39,-18};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_8_0_2(){
        int []Stack_00_col = {26,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-28,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-28,-35};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {26,-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_8_0_3(){
        int []Stack_00_col = {14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-23};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_8_0_4(){
        int []Stack_00_col = {21,31,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-19};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {21,31,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_8_0_5(){
        int []Stack_00_col = {6,15,-28,11,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {5,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {5,48};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {6,15,-28,11,13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_8_0_6(){
        int []Stack_00_col = {39,32,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-34,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-34,-7};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {39,32,25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_8_0_7(){
        int []Stack_00_col = {-50,-45,46,23,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-37,35,-25,39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-37,35,-25,39};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {-50,-45,46,23,-28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_8_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_8_0_9(){
        int []Stack_00_col = {16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {8,4,-14,15,-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {8,4,-14,15,-42};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_9_0(){
            
            try{return (t_12_9_0_0() && t_12_9_0_1() && t_12_9_0_2() && t_12_9_0_3() && t_12_9_0_4() && t_12_9_0_5() && t_12_9_0_6() && t_12_9_0_7() && t_12_9_0_8() && t_12_9_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_9_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_9_0_1(){
        int []Stack_00_col = {-36,-34,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-1,-47,-44,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-1,-47,-44,44};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-1,-47,-44,44};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_9_0_2(){
        int []Stack_00_col = {-29,-20,-26,24,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-44,-11,-42,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-44,-11,-42,23};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-44,-11,-42,23};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_9_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-12,-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-12,-14};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-12,-14};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_9_0_4(){
        int []Stack_00_col = {17,4,45,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {6,35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {6,35};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {6,35};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_9_0_5(){
        int []Stack_00_col = {9,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-30};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-30};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_9_0_6(){
        int []Stack_00_col = {18,27,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-45};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-45};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_9_0_7(){
        int []Stack_00_col = {32,50,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {24,7,-43,36,39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {24,7,-43,36,39};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {24,7,-43,36,39};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_9_0_8(){
        int []Stack_00_col = {-5,-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {8};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {8};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_9_0_9(){
        int []Stack_00_col = {5,6,-41,19,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {48,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {48,-43};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {48,-43};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_10_0(){
            
            try{return (t_12_10_0_0() && t_12_10_0_1() && t_12_10_0_2() && t_12_10_0_3() && t_12_10_0_4() && t_12_10_0_5() && t_12_10_0_6() && t_12_10_0_7() && t_12_10_0_8() && t_12_10_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_10_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_10_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-27,-25,42,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-27,-25,42,-10};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-50,30};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_10_0_2(){
        int []Stack_00_col = {21,23,-46,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-25,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-25,20};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-7,25,41,46};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_10_0_3(){
        int []Stack_00_col = {39,-44,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-46,47,28,36,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-46,47,28,36,31};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {10};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_10_0_4(){
        int []Stack_00_col = {39,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {15,-42,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {15,-42,-7};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-25,-26,3,14,13};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_10_0_5(){
        int []Stack_00_col = {-25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {41,7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {41,7};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_10_0_6(){
        int []Stack_00_col = {28,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {48,21,-4,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {48,21,-4,30};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_10_0_7(){
        int []Stack_00_col = {27,-49,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-5,10,44,-24,-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-5,10,44,-24,-3};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-31,-18,8,3};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_10_0_8(){
        int []Stack_00_col = {-33,-34,-29,-26,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-15,-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-15,-38};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {49,23,-40,3};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_10_0_9(){
        int []Stack_00_col = {-37,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-19,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-19,34};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {43,36};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    int peek_ret0 = (int)(Stack_11.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_11_0(){
            
            try{return (t_12_11_0_0() && t_12_11_0_1() && t_12_11_0_2() && t_12_11_0_3() && t_12_11_0_4() && t_12_11_0_5() && t_12_11_0_6() && t_12_11_0_7() && t_12_11_0_8() && t_12_11_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_11_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_11_0_1(){
        int []Stack_00_col = {17,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-13,16,-11,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {17,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_11_0_2(){
        int []Stack_00_col = {21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {26,-25,39,-12,29};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_11_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {17};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_11_0_4(){
        int []Stack_00_col = {-39,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {15,39,-48,48,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-38};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-39,-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_11_0_5(){
        int []Stack_00_col = {6,16,38,21,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-9,41,-32,-27,-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {21,2,-6};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {6,16,38,21,-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_11_0_6(){
        int []Stack_00_col = {28,50,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {13,-46,-48,21,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-40,36};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {28,50,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_11_0_7(){
        int []Stack_00_col = {32,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {31,-41,-39,22,-17};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {32,3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_11_0_8(){
        int []Stack_00_col = {10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {44,-38,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {46,-40,-46,-36};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_11_0_9(){
        int []Stack_00_col = {-8,-10,21,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {28,40,-33,-23,-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {18,48,-7,-19};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-8,-10,21,-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_12_0(){
            
            try{return (t_12_12_0_0() && t_12_12_0_1() && t_12_12_0_2() && t_12_12_0_3() && t_12_12_0_4() && t_12_12_0_5() && t_12_12_0_6() && t_12_12_0_7() && t_12_12_0_8() && t_12_12_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_12_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_12_0_1(){
        int []Stack_00_col = {-40,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-12,20,-4,30,-7};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-39};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_12_0_2(){
        int []Stack_00_col = {-20,-5,-8,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {6,48,6};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {2};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_12_0_3(){
        int []Stack_00_col = {-3,-35,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {22,-30,26,-28,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {23,-29,-27,-18};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {22,-30,26,-28,-13};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_12_0_4(){
        int []Stack_00_col = {15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-7,22,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-7,22,17};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_12_0_5(){
        int []Stack_00_col = {-41,-9,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {47,43,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {4};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {47,43,11};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_12_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-5,-49,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-32};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-5,-49,21};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_12_0_7(){
        int []Stack_00_col = {-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {1,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {1,43};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_12_0_8(){
        int []Stack_00_col = {-35,4,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-14,-33};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_12_0_9(){
        int []Stack_00_col = {31,32,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-41,-21,-21,-19,22};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_13_0(){
            
            try{return (t_12_13_0_0() && t_12_13_0_1() && t_12_13_0_2() && t_12_13_0_3() && t_12_13_0_4() && t_12_13_0_5() && t_12_13_0_6() && t_12_13_0_7() && t_12_13_0_8() && t_12_13_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_13_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_13_0_1(){
        int []Stack_00_col = {-32,0,38,-15,-20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {42,26,-7,17,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {30,3,-9,-50};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {30,3,-9,-50};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_13_0_2(){
        int []Stack_00_col = {6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-17,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {24,31,41,26,26};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {24,31,41,26,26};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_13_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {0,14,19,-5,-23};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {0,14,19,-5,-23};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_13_0_4(){
        int []Stack_00_col = {-13,41,10,12,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-34,11,-50,16,50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_13_0_5(){
        int []Stack_00_col = {-13,49,-43,-7,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-5,-6,37,-18,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {17};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {17};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_13_0_6(){
        int []Stack_00_col = {-33,5,40,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-49,13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {50,24,-45,38,-8};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {50,24,-45,38,-8};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_13_0_7(){
        int []Stack_00_col = {-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-50,27,-48,-38,33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {44,-12,10};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {44,-12,10};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_13_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {42,20,13};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {42,20,13};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_13_0_9(){
        int []Stack_00_col = {12,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {16,-15,27};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {16,-15,27};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_12_14_0(){
            
            try{return (t_12_14_0_0() && t_12_14_0_1() && t_12_14_0_2() && t_12_14_0_3() && t_12_14_0_4() && t_12_14_0_5() && t_12_14_0_6() && t_12_14_0_7() && t_12_14_0_8() && t_12_14_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_14_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_14_0_1(){
        int []Stack_00_col = {24,3,45,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-34,6,-38,3,-30};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_14_0_2(){
        int []Stack_00_col = {16,-16,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-9,-44,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {28,0,7};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-37,-24};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_14_0_3(){
        int []Stack_00_col = {-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {10,22,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-49,-30};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_14_0_4(){
        int []Stack_00_col = {21,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {14,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-26,-6};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-11,-34,21,29};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_14_0_5(){
        int []Stack_00_col = {31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {4,-17,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {47,42,37};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-12,16};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_14_0_6(){
        int []Stack_00_col = {-19,16,-17,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {15,-12,44,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-43,11,-8,17};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {17,-14,-15,17};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_14_0_7(){
        int []Stack_00_col = {43,39,13,19,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-7,-48,31,6,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-30,-49,-15,-40,-35};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_14_0_8(){
        int []Stack_00_col = {-31,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-9,24,2,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {7,8,-50,-47};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {50,-28,-1,-15};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = peek(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_12_14_0_9(){
        int []Stack_00_col = {-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    int peek_ret0 = (int)(Stack_20.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_13_0_0(){
            
            try{return (t_13_0_0_0() && t_13_0_0_1() && t_13_0_0_2() && t_13_0_0_3() && t_13_0_0_4() && t_13_0_0_5() && t_13_0_0_6() && t_13_0_0_7() && t_13_0_0_8() && t_13_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_1(){
        int []Stack_00_col = {-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-30};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_4(){
        int []Stack_00_col = {-4,26,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-4,26,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-4,26,33};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_5(){
        int []Stack_00_col = {-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-8};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_6(){
        int []Stack_00_col = {2,30,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {2,30,14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {2,30,14};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_7(){
        int []Stack_00_col = {-39,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-39,-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-39,-48};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_8(){
        int []Stack_00_col = {-15,29,-50,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-15,29,-50,6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-15,29,-50,6};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_0_0_9(){
        int []Stack_00_col = {36,15,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {36,15,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {36,15,8};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_13_1_0(){
            
            try{return (t_13_1_0_0() && t_13_1_0_1() && t_13_1_0_2() && t_13_1_0_3() && t_13_1_0_4() && t_13_1_0_5() && t_13_1_0_6() && t_13_1_0_7() && t_13_1_0_8() && t_13_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_1(){
        int []Stack_00_col = {7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-24,-45,5,19,-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_2(){
        int []Stack_00_col = {-27,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-27,-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {3,-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_3(){
        int []Stack_00_col = {4,0,-6,44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {4,0,-6,44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-18,28,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_4(){
        int []Stack_00_col = {50,18,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {50,18,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-49,-39,15,-12,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-27,-41,5,15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_6(){
        int []Stack_00_col = {0,-38,0,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {0,-38,0,38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_7(){
        int []Stack_00_col = {36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-34,18,-29,-46,3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_8(){
        int []Stack_00_col = {17,32,41,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {17,32,41,41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-41,46,39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_1_0_9(){
        int []Stack_00_col = {-8,-50,-5,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-8,-50,-5,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_13_2_0(){
            
            try{return (t_13_2_0_0() && t_13_2_0_1() && t_13_2_0_2() && t_13_2_0_3() && t_13_2_0_4() && t_13_2_0_5() && t_13_2_0_6() && t_13_2_0_7() && t_13_2_0_8() && t_13_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_1(){
        int []Stack_00_col = {-24,-9,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-47,-44,-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-24,-9,10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-24,-46,-7,-7,-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_3(){
        int []Stack_00_col = {-34,-6,11,12,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -28;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {0,-9,47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-34,-6,11,12,-45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_4(){
        int []Stack_00_col = {-19,41,-23,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-7,-13,43,34,-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-19,41,-23,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_5(){
        int []Stack_00_col = {3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_6(){
        int []Stack_00_col = {29,50,-48,-11,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {1,-2,-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {29,50,-48,-11,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_7(){
        int []Stack_00_col = {45,-8,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-11,14,-30,40,-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {45,-8,-3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_8(){
        int []Stack_00_col = {39,-7,-15,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {39,-7,-15,-41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_2_0_9(){
        int []Stack_00_col = {35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {10,-6,9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_13_3_0(){
            
            try{return (t_13_3_0_0() && t_13_3_0_1() && t_13_3_0_2() && t_13_3_0_3() && t_13_3_0_4() && t_13_3_0_5() && t_13_3_0_6() && t_13_3_0_7() && t_13_3_0_8() && t_13_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -2;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-24,-28,11,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-24,-28,11,26};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_2(){
        int []Stack_00_col = {10,-35,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-42,-49,-12,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-42,-49,-12,38};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_3(){
        int []Stack_00_col = {19,-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {16,37,36,-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {16,37,36,-36};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_4(){
        int []Stack_00_col = {46,0,-27,-42,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-36};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_5(){
        int []Stack_00_col = {-23,46,-7,2,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {29,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {29,11};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_6(){
        int []Stack_00_col = {-11,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-41,44,-47,-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-41,44,-47,-42};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-25};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_3_0_9(){
        int []Stack_00_col = {-14,-17,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_13_4_0(){
            
            try{return (t_13_4_0_0() && t_13_4_0_1() && t_13_4_0_2() && t_13_4_0_3() && t_13_4_0_4() && t_13_4_0_5() && t_13_4_0_6() && t_13_4_0_7() && t_13_4_0_8() && t_13_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_4_0_1(){
        int []Stack_00_col = {42,43,13,15,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-44,7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-47,-50,9,-48,8};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_4_0_2(){
        int []Stack_00_col = {44,27,-38,-26,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {4};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_4_0_3(){
        int []Stack_00_col = {23,42,12,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {35,26,19};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_4_0_4(){
        int []Stack_00_col = {-22,-32,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_4_0_5(){
        int []Stack_00_col = {-45,25,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {5,49,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_4_0_6(){
        int []Stack_00_col = {-43,-10,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_4_0_7(){
        int []Stack_00_col = {-24,33,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-34,-47,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_4_0_8(){
        int []Stack_00_col = {-49,-40,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-8};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(pop(push(Stack_0, int_0))) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_13_4_0_9(){
        int []Stack_00_col = {35,43,25,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_0_0(){
            
            try{return (t_14_0_0_0() && t_14_0_0_1() && t_14_0_0_2() && t_14_0_0_3() && t_14_0_0_4() && t_14_0_0_5() && t_14_0_0_6() && t_14_0_0_7() && t_14_0_0_8() && t_14_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -47;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_1(){
        int []Stack_00_col = {50,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {50,-7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 39;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_2(){
        int []Stack_00_col = {48,-32,23,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {48,-32,23,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 37;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_3(){
        int []Stack_00_col = {-42,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-42,18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 17;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_4(){
        int []Stack_00_col = {42,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {42,-45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -29;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_5(){
        int []Stack_00_col = {-12,-16,-20,-31,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-12,-16,-20,-31,-38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 37;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_6(){
        int []Stack_00_col = {16,-29,50,-45,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {16,-29,50,-45,15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 40;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_7(){
        int []Stack_00_col = {26,32,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {26,32,18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 35;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_8(){
        int []Stack_00_col = {-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 2;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_0_0_9(){
        int []Stack_00_col = {-13,44,26,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-13,44,26,14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -4;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_1_0(){
            
            try{return (t_14_1_0_0() && t_14_1_0_1() && t_14_1_0_2() && t_14_1_0_3() && t_14_1_0_4() && t_14_1_0_5() && t_14_1_0_6() && t_14_1_0_7() && t_14_1_0_8() && t_14_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 49;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_1(){
        int []Stack_00_col = {46,3,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {46,3,6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 3;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_2(){
        int []Stack_00_col = {-41,42,-25,-41,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-41,42,-25,-41,27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 28;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_3(){
        int []Stack_00_col = {-19,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-19,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 36;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_4(){
        int []Stack_00_col = {32,37,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {32,37,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 22;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 36;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_6(){
        int []Stack_00_col = {31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 6;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_7(){
        int []Stack_00_col = {0,-45,12,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {0,-45,12,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 22;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_8(){
        int []Stack_00_col = {15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 35;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_1_0_9(){
        int []Stack_00_col = {40,-28,-47,29,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {40,-28,-47,29,-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 31;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_2_0(){
            
            try{return (t_14_2_0_0() && t_14_2_0_1() && t_14_2_0_2() && t_14_2_0_3() && t_14_2_0_4() && t_14_2_0_5() && t_14_2_0_6() && t_14_2_0_7() && t_14_2_0_8() && t_14_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -10;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_1(){
        int []Stack_00_col = {-43,7,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 21;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_2(){
        int []Stack_00_col = {-20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-9,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -34;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_3(){
        int []Stack_00_col = {-32,48,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {27,12,-25,3,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 50;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_4(){
        int []Stack_00_col = {46,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-29,-47,-3,-36,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -46;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_5(){
        int []Stack_00_col = {29,-13,40,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-33,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 15;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-50,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 37;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_7(){
        int []Stack_00_col = {37,12,-10,3,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 40;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_8(){
        int []Stack_00_col = {-47,22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 31;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_2_0_9(){
        int []Stack_00_col = {33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {20,20,31,-6,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 14;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_14_3_0(){
            
            try{return (t_14_3_0_0() && t_14_3_0_1() && t_14_3_0_2() && t_14_3_0_3() && t_14_3_0_4() && t_14_3_0_5() && t_14_3_0_6() && t_14_3_0_7() && t_14_3_0_8() && t_14_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 36;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_1(){
        int []Stack_00_col = {33,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {17,-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -23;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_2(){
        int []Stack_00_col = {21,-12,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-29,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 42;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 34;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_4(){
        int []Stack_00_col = {-11,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {31,15,22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 0;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_5(){
        int []Stack_00_col = {-14,-21,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-31,-9,-34,8,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -27;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_6(){
        int []Stack_00_col = {25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-14,-1,-8,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 21;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_7(){
        int []Stack_00_col = {-12,21,37,-6,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-13,36,30,2,-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -49;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_8(){
        int []Stack_00_col = {-10,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {21,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -30;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(pop(push(Stack_0, int_0))) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_14_3_0_9(){
        int []Stack_00_col = {41,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {7,-38,-31,-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -25;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_15_0_0(){
            
            try{return (t_15_0_0_0() && t_15_0_0_1() && t_15_0_0_2() && t_15_0_0_3() && t_15_0_0_4() && t_15_0_0_5() && t_15_0_0_6() && t_15_0_0_7() && t_15_0_0_8() && t_15_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_1(){
        int []Stack_00_col = {1,23,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {1,23,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_2(){
        int []Stack_00_col = {-5,16,-14,38,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 6;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-5,16,-14,38,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_3(){
        int []Stack_00_col = {39,35,26,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {39,35,26,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_4(){
        int []Stack_00_col = {34,32,24,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {34,32,24,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_5(){
        int []Stack_00_col = {32,-7,-42,26,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {32,-7,-42,26,27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_7(){
        int []Stack_00_col = {49,1,-6,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {49,1,-6,-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_8(){
        int []Stack_00_col = {-43,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-43,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_15_0_0_9(){
        int []Stack_00_col = {-28,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-28,-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_15_1_0(){
            
            try{return (t_15_1_0_0() && t_15_1_0_1() && t_15_1_0_2() && t_15_1_0_3() && t_15_1_0_4() && t_15_1_0_5() && t_15_1_0_6() && t_15_1_0_7() && t_15_1_0_8() && t_15_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_1(){
        int []Stack_00_col = {-35,-26,-10,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {2,25,-36,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_2(){
        int []Stack_00_col = {-11,8,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_3(){
        int []Stack_00_col = {-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {49,0,-2,13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_4(){
        int []Stack_00_col = {-32,6,48,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_5(){
        int []Stack_00_col = {-12,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-38,-28,18,-18,-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_6(){
        int []Stack_00_col = {-19,34,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-20,-8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_7(){
        int []Stack_00_col = {-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-32,-38,-43,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_8(){
        int []Stack_00_col = {24,-11,33,43,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {42,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_15_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {3,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_16_0_0(){
            
            try{return (t_16_0_0_0() && t_16_0_0_1() && t_16_0_0_2() && t_16_0_0_3() && t_16_0_0_4() && t_16_0_0_5() && t_16_0_0_6() && t_16_0_0_7() && t_16_0_0_8() && t_16_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 22;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_1(){
        int []Stack_00_col = {-2,26,39,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-2,26,39,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 46;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_2(){
        int []Stack_00_col = {47,42,-2,-24,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {47,42,-2,-24,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 42;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -32;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_4(){
        int []Stack_00_col = {-50,11,28,46,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-50,11,28,46,-28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 17;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_5(){
        int []Stack_00_col = {0,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {0,21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 32;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_6(){
        int []Stack_00_col = {32,-31,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {32,-31,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -36;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_7(){
        int []Stack_00_col = {-46,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-46,-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 23;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 34;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_0_0_9(){
        int []Stack_00_col = {18,40,-1,44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {18,40,-1,44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -17;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_16_1_0(){
            
            try{return (t_16_1_0_0() && t_16_1_0_1() && t_16_1_0_2() && t_16_1_0_3() && t_16_1_0_4() && t_16_1_0_5() && t_16_1_0_6() && t_16_1_0_7() && t_16_1_0_8() && t_16_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -18;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_1(){
        int []Stack_00_col = {23,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {23,47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 30;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_2(){
        int []Stack_00_col = {14,-24,1,-37,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {14,-24,1,-37,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -42;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_3(){
        int []Stack_00_col = {48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -26;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_4(){
        int []Stack_00_col = {-31,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-31,-32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 21;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_5(){
        int []Stack_00_col = {41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -15;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 29;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -39;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_7(){
        int []Stack_00_col = {-36,21,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-36,21,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 8;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_8(){
        int []Stack_00_col = {-10,43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {-10,43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -42;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_1_0_9(){
        int []Stack_00_col = {29,41,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -28;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_01_col = {29,41,-40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 4;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    int size_ret0 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_16_2_0(){
            
            try{return (t_16_2_0_0() && t_16_2_0_1() && t_16_2_0_2() && t_16_2_0_3() && t_16_2_0_4() && t_16_2_0_5() && t_16_2_0_6() && t_16_2_0_7() && t_16_2_0_8() && t_16_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 35;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_1(){
        int []Stack_00_col = {50,15,-20,-40,30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 17;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_2(){
        int []Stack_00_col = {-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-30,7,25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -20;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_3(){
        int []Stack_00_col = {38,-31,22,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-7,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 25;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_4(){
        int []Stack_00_col = {16,-32,30,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 46;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_5(){
        int []Stack_00_col = {-43,10,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-5,-21,44,-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 24;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_6(){
        int []Stack_00_col = {-3,47,19,-48,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 5;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_7(){
        int []Stack_00_col = {4,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-26,-1,-33,-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -22;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_8(){
        int []Stack_00_col = {-30,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -46;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_2_0_9(){
        int []Stack_00_col = {43,-4,15,-23,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {49,34,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -10;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_16_3_0(){
            
            try{return (t_16_3_0_0() && t_16_3_0_1() && t_16_3_0_2() && t_16_3_0_3() && t_16_3_0_4() && t_16_3_0_5() && t_16_3_0_6() && t_16_3_0_7() && t_16_3_0_8() && t_16_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -9;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_1(){
        int []Stack_00_col = {-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-41,-13,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 33;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_2(){
        int []Stack_00_col = {-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-20,27,21,-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 49;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_3(){
        int []Stack_00_col = {26,7,-5,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-19,-30,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 30;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_4(){
        int []Stack_00_col = {-42,-34,38,10,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {21,-11,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 39;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_5(){
        int []Stack_00_col = {23,-13,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 14;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {-22,-44,48,-31,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -25;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_7(){
        int []Stack_00_col = {-44,-41,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {40,-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -46;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_8(){
        int []Stack_00_col = {37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {48,-33,-19,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -12;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        

        //testing peek(push(Stack_0, int_0)) = size(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_16_3_0_9(){
        int []Stack_00_col = {13,-40,-44,4,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    int peek_ret0 = (int)(Stack_00.peek());
    int []Stack_10_col = {26,40,24,33,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -17;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    int size_ret0 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(peek_ret0 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_17_0_0(){
            
            try{return (t_17_0_0_0() && t_17_0_0_1() && t_17_0_0_2() && t_17_0_0_3() && t_17_0_0_4() && t_17_0_0_5() && t_17_0_0_6() && t_17_0_0_7() && t_17_0_0_8() && t_17_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_1(){
        int []Stack_00_col = {-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-38};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_2(){
        int []Stack_00_col = {23,-4,-28,-42,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {23,-4,-28,-42,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {23,-4,-28,-42,37};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_3(){
        int []Stack_00_col = {33,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {33,36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {33,36};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_4(){
        int []Stack_00_col = {-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-44};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_5(){
        int []Stack_00_col = {10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {10};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_6(){
        int []Stack_00_col = {-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-21};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_7(){
        int []Stack_00_col = {-18,28,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-18,28,21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-18,28,21};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_8(){
        int []Stack_00_col = {-34,25,-45,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-34,25,-45,-4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-34,25,-45,-4};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_0_0_9(){
        int []Stack_00_col = {-43,13,-12,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-43,13,-12,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-43,13,-12,28};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_17_1_0(){
            
            try{return (t_17_1_0_0() && t_17_1_0_1() && t_17_1_0_2() && t_17_1_0_3() && t_17_1_0_4() && t_17_1_0_5() && t_17_1_0_6() && t_17_1_0_7() && t_17_1_0_8() && t_17_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_1(){
        int []Stack_00_col = {45,48,38,1,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {45,48,38,1,-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_2(){
        int []Stack_00_col = {-43,50,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-43,50,25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {10,-28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_3(){
        int []Stack_00_col = {6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-12,-16,13,25,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_4(){
        int []Stack_00_col = {-49,-31,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-49,-31,50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-15,6,-38,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {50,-32,16,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_7(){
        int []Stack_00_col = {32,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {32,46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_8(){
        int []Stack_00_col = {25,10,-39,20,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {25,10,-39,20,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_1_0_9(){
        int []Stack_00_col = {-12,-16,-16,40,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-12,-16,-16,40,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-19,-30,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_17_2_0(){
            
            try{return (t_17_2_0_0() && t_17_2_0_1() && t_17_2_0_2() && t_17_2_0_3() && t_17_2_0_4() && t_17_2_0_5() && t_17_2_0_6() && t_17_2_0_7() && t_17_2_0_8() && t_17_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_2_0_1(){
        int []Stack_00_col = {25,39,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-2,14,-9,17,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {25,39,-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_2_0_2(){
        int []Stack_00_col = {19,34,43,33,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {19,34,43,33,-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_2_0_3(){
        int []Stack_00_col = {-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-38,-36,-16,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_2_0_4(){
        int []Stack_00_col = {-39,-7,23,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-16,-42,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-39,-7,23,-21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_2_0_5(){
        int []Stack_00_col = {28,10,24,-22,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {28,10,24,-22,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_2_0_6(){
        int []Stack_00_col = {13,34,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {13,34,36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_2_0_7(){
        int []Stack_00_col = {-17,28,-22,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-17,28,-22,-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_2_0_8(){
        int []Stack_00_col = {-42,27,-37,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-42,27,-37,48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_2_0_9(){
        int []Stack_00_col = {7,-47,6,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {24,24,22,7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {7,-47,6,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_17_3_0(){
            
            try{return (t_17_3_0_0() && t_17_3_0_1() && t_17_3_0_2() && t_17_3_0_3() && t_17_3_0_4() && t_17_3_0_5() && t_17_3_0_6() && t_17_3_0_7() && t_17_3_0_8() && t_17_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_3_0_1(){
        int []Stack_00_col = {-14,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {38,-36,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {38,-36,-40};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_3_0_2(){
        int []Stack_00_col = {49,18,45,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {18,50,-45,15,39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {18,50,-45,15,39};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_3_0_3(){
        int []Stack_00_col = {42,35,-24,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-17};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_3_0_4(){
        int []Stack_00_col = {29,45,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {10};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_3_0_5(){
        int []Stack_00_col = {-25,-24,10,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-14,20,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-14,20,-10};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_3_0_6(){
        int []Stack_00_col = {50,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_3_0_7(){
        int []Stack_00_col = {-33,8,-17,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-39,-28,-29,-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-39,-28,-29,-4};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_3_0_8(){
        int []Stack_00_col = {-30,42,-44,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {9,3,40,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {9,3,40,-18};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_3_0_9(){
        int []Stack_00_col = {13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-44};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_17_4_0(){
            
            try{return (t_17_4_0_0() && t_17_4_0_1() && t_17_4_0_2() && t_17_4_0_3() && t_17_4_0_4() && t_17_4_0_5() && t_17_4_0_6() && t_17_4_0_7() && t_17_4_0_8() && t_17_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_4_0_1(){
        int []Stack_00_col = {-35,17,45,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-17,22,19,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-26,9,-15};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_4_0_2(){
        int []Stack_00_col = {0,-18,17,-5,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {25,47,-18,-37,43};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_4_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-38,-42,-48,8,-41};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_4_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-7,-22,-42,-16,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_4_0_5(){
        int []Stack_00_col = {-32,-37,-8,39,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-10,-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-10,-47,25,37};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_4_0_6(){
        int []Stack_00_col = {50,17,37,-15,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-46,-38,16,-10};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_4_0_7(){
        int []Stack_00_col = {35,35,2,-39,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {29,38,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {24,-35,30};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_4_0_8(){
        int []Stack_00_col = {41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-10,-16,23,13,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_17_4_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-44,-19,3,-25,15};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_18_0_0(){
            
            try{return (t_18_0_0_0() && t_18_0_0_1() && t_18_0_0_2() && t_18_0_0_3() && t_18_0_0_4() && t_18_0_0_5() && t_18_0_0_6() && t_18_0_0_7() && t_18_0_0_8() && t_18_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_1(){
        int []Stack_00_col = {-8,44,-35,-29,-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-8,44,-35,-29,-14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-8,44,-35,-29,-14};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_2(){
        int []Stack_00_col = {40,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {40,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {40,37};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_3(){
        int []Stack_00_col = {-45,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-45,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-45,49};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_4(){
        int []Stack_00_col = {-46,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-46,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-46,8};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_5(){
        int []Stack_00_col = {14,-35,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {14,-35,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {14,-35,37};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_6(){
        int []Stack_00_col = {3,-37,-37,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {3,-37,-37,-32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {3,-37,-37,-32};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_7(){
        int []Stack_00_col = {33,-20,24,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {33,-20,24,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {33,-20,24,29};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_8(){
        int []Stack_00_col = {21,47,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {21,47,-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {21,47,-11};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_0_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_18_1_0(){
            
            try{return (t_18_1_0_0() && t_18_1_0_1() && t_18_1_0_2() && t_18_1_0_3() && t_18_1_0_4() && t_18_1_0_5() && t_18_1_0_6() && t_18_1_0_7() && t_18_1_0_8() && t_18_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_1(){
        int []Stack_00_col = {49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_2(){
        int []Stack_00_col = {50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {25,-46,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_3(){
        int []Stack_00_col = {-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {39,49,37,-23,3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-16,12,48,29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_5(){
        int []Stack_00_col = {-12,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-12,-28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_6(){
        int []Stack_00_col = {34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_7(){
        int []Stack_00_col = {15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-2,-49,24,-41,-37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_8(){
        int []Stack_00_col = {19,23,8,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {19,23,8,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_1_0_9(){
        int []Stack_00_col = {42,38,-44,41,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {42,38,-44,41,-24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_18_2_0(){
            
            try{return (t_18_2_0_0() && t_18_2_0_1() && t_18_2_0_2() && t_18_2_0_3() && t_18_2_0_4() && t_18_2_0_5() && t_18_2_0_6() && t_18_2_0_7() && t_18_2_0_8() && t_18_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_2_0_1(){
        int []Stack_00_col = {8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {13,44,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_2_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_2_0_3(){
        int []Stack_00_col = {16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_2_0_4(){
        int []Stack_00_col = {15,6,-40,40,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-13,43,39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {15,6,-40,40,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_2_0_5(){
        int []Stack_00_col = {-41,-40,39,26,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-44,16,43,-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-41,-40,39,26,38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_2_0_6(){
        int []Stack_00_col = {-38,-46,-50,7,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-38,-46,-50,7,27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_2_0_7(){
        int []Stack_00_col = {-24,11,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {42,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-24,11,48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_2_0_8(){
        int []Stack_00_col = {46,-27,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {42,27,-28,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {46,-27,-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_2_0_9(){
        int []Stack_00_col = {-14,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-17,43,5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-14,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_18_3_0(){
            
            try{return (t_18_3_0_0() && t_18_3_0_1() && t_18_3_0_2() && t_18_3_0_3() && t_18_3_0_4() && t_18_3_0_5() && t_18_3_0_6() && t_18_3_0_7() && t_18_3_0_8() && t_18_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_3_0_1(){
        int []Stack_00_col = {-1,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-2,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-2,20};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_3_0_2(){
        int []Stack_00_col = {27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_3_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-3};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_3_0_4(){
        int []Stack_00_col = {-21,5,-24,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {35,11,-40,-47,33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {35,11,-40,-47,33};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_3_0_5(){
        int []Stack_00_col = {-27,-30,13,-31,44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-8,47,28,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-8,47,28,-16};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_3_0_6(){
        int []Stack_00_col = {-32,-9,-22,42,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-33,43,-23,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-33,43,-23,1};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_3_0_7(){
        int []Stack_00_col = {-4,29,-5,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_3_0_8(){
        int []Stack_00_col = {-11,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {44,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {44,-12};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_3_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {30,5,9,-25,18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {30,5,9,-25,18};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_18_4_0(){
            
            try{return (t_18_4_0_0() && t_18_4_0_1() && t_18_4_0_2() && t_18_4_0_3() && t_18_4_0_4() && t_18_4_0_5() && t_18_4_0_6() && t_18_4_0_7() && t_18_4_0_8() && t_18_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_4_0_1(){
        int []Stack_00_col = {-1,11,17,-40,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {3};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_4_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_4_0_3(){
        int []Stack_00_col = {-5,46,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {36,20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_4_0_4(){
        int []Stack_00_col = {-50,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-13,13,26,14,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {18,-31,48,-6,-2};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_4_0_5(){
        int []Stack_00_col = {43,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_4_0_6(){
        int []Stack_00_col = {27,-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 3;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {6,7,9,45};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_4_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {27,41,37,-21,-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {41,8,-6,23};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_4_0_8(){
        int []Stack_00_col = {16,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {0,-10,-15,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_18_4_0_9(){
        int []Stack_00_col = {-17,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-3,39,-50,-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {11,42};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_19_0_0(){
            
            try{return (t_19_0_0_0() && t_19_0_0_1() && t_19_0_0_2() && t_19_0_0_3() && t_19_0_0_4() && t_19_0_0_5() && t_19_0_0_6() && t_19_0_0_7() && t_19_0_0_8() && t_19_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 33;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_1(){
        int []Stack_00_col = {-23,14,44,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-23,14,44,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 17;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_2(){
        int []Stack_00_col = {-47,30,-29,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-47,30,-29,-15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 32;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_3(){
        int []Stack_00_col = {-27,-31,-31,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-27,-31,-31,18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 42;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_4(){
        int []Stack_00_col = {34,-28,41,6,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {34,-28,41,6,-30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -35;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_5(){
        int []Stack_00_col = {-11,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -21;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-11,35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -21;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -8;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_7(){
        int []Stack_00_col = {-50,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-50,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -11;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_8(){
        int []Stack_00_col = {11,-10,24,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {11,-10,24,13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 34;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_0_0_9(){
        int []Stack_00_col = {-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -47;
    Stack_01.push(int_01);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_19_1_0(){
            
            try{return (t_19_1_0_0() && t_19_1_0_1() && t_19_1_0_2() && t_19_1_0_3() && t_19_1_0_4() && t_19_1_0_5() && t_19_1_0_6() && t_19_1_0_7() && t_19_1_0_8() && t_19_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -21;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_1(){
        int []Stack_00_col = {27,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {27,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 45;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -22;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_3(){
        int []Stack_00_col = {34,-48,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {34,-48,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 27;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_4(){
        int []Stack_00_col = {-14,-15,3,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-14,-15,3,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 18;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_5(){
        int []Stack_00_col = {-21,-7,4,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-21,-7,4,-40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 30;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_6(){
        int []Stack_00_col = {23,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {23,-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -39;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -29;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_8(){
        int []Stack_00_col = {15,8,24,-49,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {15,8,24,-49,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -35;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -13;
    Stack_01.push(int_10);
    int pop_ret1 = (int)(Stack_01.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_19_2_0(){
            
            try{return (t_19_2_0_0() && t_19_2_0_1() && t_19_2_0_2() && t_19_2_0_3() && t_19_2_0_4() && t_19_2_0_5() && t_19_2_0_6() && t_19_2_0_7() && t_19_2_0_8() && t_19_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 49;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_1(){
        int []Stack_00_col = {-4,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 49;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_2(){
        int []Stack_00_col = {-37,-29,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-36,-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -27;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_3(){
        int []Stack_00_col = {50,11,49,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {7,-50,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 12;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_4(){
        int []Stack_00_col = {20,33,-49,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -6;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -6;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_5(){
        int []Stack_00_col = {-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-33,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 4;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_6(){
        int []Stack_00_col = {-32,28,-50,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {26,-20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 42;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_7(){
        int []Stack_00_col = {50,-38,41,-5,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-42,-41,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -38;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_8(){
        int []Stack_00_col = {35,-26,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-1,-30,-48,9,-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 4;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_2_0_9(){
        int []Stack_00_col = {25,-48,48,13,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-9,-29,8,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 8;
    Stack_10.push(int_01);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_19_3_0(){
            
            try{return (t_19_3_0_0() && t_19_3_0_1() && t_19_3_0_2() && t_19_3_0_3() && t_19_3_0_4() && t_19_3_0_5() && t_19_3_0_6() && t_19_3_0_7() && t_19_3_0_8() && t_19_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 14;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_1(){
        int []Stack_00_col = {0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {16,43,-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -40;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_2(){
        int []Stack_00_col = {38,-1,0,22,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 31;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_3(){
        int []Stack_00_col = {50,-9,-26,-47,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -17;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-14,-9,-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 47;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_4(){
        int []Stack_00_col = {-1,49,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {26,33,33,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -27;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_5(){
        int []Stack_00_col = {-40,34,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-23,48,34,-26,25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 19;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_6(){
        int []Stack_00_col = {36,23,-2,47,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {44,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 27;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_7(){
        int []Stack_00_col = {3,3,17,-43,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {3,-45,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 43;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_8(){
        int []Stack_00_col = {-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-6,-50,43,17,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 22;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_19_3_0_9(){
        int []Stack_00_col = {18,-16,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -19;
    Stack_10.push(int_10);
    int pop_ret1 = (int)(Stack_10.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_20_0_0(){
            
            try{return (t_20_0_0_0() && t_20_0_0_1() && t_20_0_0_2() && t_20_0_0_3() && t_20_0_0_4() && t_20_0_0_5() && t_20_0_0_6() && t_20_0_0_7() && t_20_0_0_8() && t_20_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_2(){
        int []Stack_00_col = {13,17,-29,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {13,17,-29,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {13,17,-29,39};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_3(){
        int []Stack_00_col = {-45,1,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-45,1,14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-45,1,14};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_4(){
        int []Stack_00_col = {-4,-39,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-4,-39,6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-4,-39,6};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_5(){
        int []Stack_00_col = {37,14,11,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {37,14,11,12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {37,14,11,12};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_6(){
        int []Stack_00_col = {-48,36,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-48,36,-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-48,36,-27};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_7(){
        int []Stack_00_col = {-14,-20,21,-41,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-14,-20,21,-41,-32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-14,-20,21,-41,-32};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_8(){
        int []Stack_00_col = {-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-24};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_0_0_9(){
        int []Stack_00_col = {18,0,-35,15,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {18,0,-35,15,-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {18,0,-35,15,-43};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_20_1_0(){
            
            try{return (t_20_1_0_0() && t_20_1_0_1() && t_20_1_0_2() && t_20_1_0_3() && t_20_1_0_4() && t_20_1_0_5() && t_20_1_0_6() && t_20_1_0_7() && t_20_1_0_8() && t_20_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {8,-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_2(){
        int []Stack_00_col = {-46,-10,9,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-46,-10,9,-6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {32,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_3(){
        int []Stack_00_col = {-6,-39,-11,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-6,-39,-11,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-19,-19,-12,9,2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_4(){
        int []Stack_00_col = {-42,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-42,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-4,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_5(){
        int []Stack_00_col = {-32,2,43,23,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-32,2,43,23,6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_6(){
        int []Stack_00_col = {8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-14,-31,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_7(){
        int []Stack_00_col = {-5,-30,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-5,-30,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_8(){
        int []Stack_00_col = {-19,-10,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-19,-10,-16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {28,0,-39,5,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_1_0_9(){
        int []Stack_00_col = {-37,-32,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-37,-32,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {6,24,6,-41,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_20_2_0(){
            
            try{return (t_20_2_0_0() && t_20_2_0_1() && t_20_2_0_2() && t_20_2_0_3() && t_20_2_0_4() && t_20_2_0_5() && t_20_2_0_6() && t_20_2_0_7() && t_20_2_0_8() && t_20_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_2_0_1(){
        int []Stack_00_col = {44,21,-37,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {44,21,-37,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_2_0_2(){
        int []Stack_00_col = {-21,48,-39,-7,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-21,48,-39,-7,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_2_0_3(){
        int []Stack_00_col = {15,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {15,-29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_2_0_4(){
        int []Stack_00_col = {34,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {34,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_2_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-7,24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_2_0_6(){
        int []Stack_00_col = {-26,8,-19,-42,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-11,23,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-26,8,-19,-42,-21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_2_0_7(){
        int []Stack_00_col = {-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-12,-35,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_2_0_8(){
        int []Stack_00_col = {-11,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {11,22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-11,-15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_20_2_0_9(){
        int []Stack_00_col = {26,44,40,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {42,-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {26,44,40,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_20_3_0(){
            
            try{return (t_20_3_0_0() && t_20_3_0_1() && t_20_3_0_2() && t_20_3_0_3() && t_20_3_0_4() && t_20_3_0_5() && t_20_3_0_6() && t_20_3_0_7() && t_20_3_0_8() && t_20_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_3_0_1(){
        int []Stack_00_col = {-5,-10,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {36,-36,-38,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {36,-36,-38,45};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_3_0_2(){
        int []Stack_00_col = {33,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {13,5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {13,5};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_3_0_3(){
        int []Stack_00_col = {16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {47,22,-27,-31,2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {47,22,-27,-31,2};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_3_0_4(){
        int []Stack_00_col = {44,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_3_0_5(){
        int []Stack_00_col = {14,5,20,26,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {9,30,-6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {9,30,-6};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_3_0_6(){
        int []Stack_00_col = {10,-4,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_3_0_7(){
        int []Stack_00_col = {33,-24,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {23,-1,49,-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {23,-1,49,-36};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_3_0_8(){
        int []Stack_00_col = {-21,32,30,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-20,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-20,49};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_20_3_0_9(){
        int []Stack_00_col = {40,42,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_20_4_0(){
            
            try{return (t_20_4_0_0() && t_20_4_0_1() && t_20_4_0_2() && t_20_4_0_3() && t_20_4_0_4() && t_20_4_0_5() && t_20_4_0_6() && t_20_4_0_7() && t_20_4_0_8() && t_20_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_20_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_20_4_0_1(){
        int []Stack_00_col = {13,-25,39,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {7,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {26,-35,34,-11};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_20_4_0_2(){
        int []Stack_00_col = {-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_20_4_0_3(){
        int []Stack_00_col = {25,-40,-20,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {9,-30,22,40};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_20_4_0_4(){
        int []Stack_00_col = {34,22,28,-32,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-7,29};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_20_4_0_5(){
        int []Stack_00_col = {-23,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {49,26,-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {25,5,10,39};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_20_4_0_6(){
        int []Stack_00_col = {-37,-6,-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-42,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-15,19};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_20_4_0_7(){
        int []Stack_00_col = {27,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-27,21,12,-18,41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {26,22,48,-27};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_20_4_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(Stack_2)
        @SuppressWarnings("unchecked")
        private static boolean t_20_4_0_9(){
        int []Stack_00_col = {19,-4,-9,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {12,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {44};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_21_0_0(){
            
            try{return (t_21_0_0_0() && t_21_0_0_1() && t_21_0_0_2() && t_21_0_0_3() && t_21_0_0_4() && t_21_0_0_5() && t_21_0_0_6() && t_21_0_0_7() && t_21_0_0_8() && t_21_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_0(){
        int int_00 = 4;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 4;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_1(){
        int int_00 = 5;
    int []Stack_00_col = {13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 5;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_2(){
        int int_00 = 39;
    int []Stack_00_col = {-29,-45,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 39;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_3(){
        int int_00 = -8;
    int []Stack_00_col = {30,-8,50,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -8;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_4(){
        int int_00 = 31;
    int []Stack_00_col = {16,-46,-29,-31,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 31;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_5(){
        int int_00 = 30;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 30;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_6(){
        int int_00 = 6;
    int []Stack_00_col = {23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 6;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_7(){
        int int_00 = 43;
    int []Stack_00_col = {6,-2,8,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 43;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_8(){
        int int_00 = 37;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 37;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_21_0_0_9(){
        int int_00 = -18;
    int []Stack_00_col = {27,4,25,-49,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -18;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_21_1_0(){
            
            try{return (t_21_1_0_0() && t_21_1_0_1() && t_21_1_0_2() && t_21_1_0_3() && t_21_1_0_4() && t_21_1_0_5() && t_21_1_0_6() && t_21_1_0_7() && t_21_1_0_8() && t_21_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_0(){
        int int_00 = -36;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 4;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_1(){
        int int_00 = 42;
    int []Stack_00_col = {-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -13;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_2(){
        int int_00 = -15;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -19;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_3(){
        int int_00 = 42;
    int []Stack_00_col = {-44,-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 36;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_4(){
        int int_00 = -35;
    int []Stack_00_col = {40,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 46;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_5(){
        int int_00 = -2;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 43;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_6(){
        int int_00 = -13;
    int []Stack_00_col = {-22,21,-32,-40,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 17;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_7(){
        int int_00 = 0;
    int []Stack_00_col = {46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -28;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_8(){
        int int_00 = -2;
    int []Stack_00_col = {31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -40;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = pop(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_21_1_0_9(){
        int int_00 = -12;
    int []Stack_00_col = {29,27,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 20;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean eq_ret0 = (boolean)(int_00 == pop_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_22_0_0(){
            
            try{return (t_22_0_0_0() && t_22_0_0_1() && t_22_0_0_2() && t_22_0_0_3() && t_22_0_0_4() && t_22_0_0_5() && t_22_0_0_6() && t_22_0_0_7() && t_22_0_0_8() && t_22_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_1(){
        int []Stack_00_col = {30,-50,7,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {30,-50,7,-28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_2(){
        int []Stack_00_col = {-18,4,19,-16,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-18,4,19,-16,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_3(){
        int []Stack_00_col = {-2,-27,9,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-2,-27,9,19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_4(){
        int []Stack_00_col = {10,22,24,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {10,22,24,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_5(){
        int []Stack_00_col = {-6,31,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-6,31,-39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_6(){
        int []Stack_00_col = {24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_7(){
        int []Stack_00_col = {33,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {33,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_8(){
        int []Stack_00_col = {33,-49,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {33,-49,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_22_0_0_9(){
        int []Stack_00_col = {24,46,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {24,46,41};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_22_1_0(){
            
            try{return (t_22_1_0_0() && t_22_1_0_1() && t_22_1_0_2() && t_22_1_0_3() && t_22_1_0_4() && t_22_1_0_5() && t_22_1_0_6() && t_22_1_0_7() && t_22_1_0_8() && t_22_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_22_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_22_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {29,20,-25,-46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_22_1_0_2(){
        int []Stack_00_col = {13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {20,48,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_22_1_0_3(){
        int []Stack_00_col = {-22,-9,1,-43,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_22_1_0_4(){
        int []Stack_00_col = {-40,3,7,-11,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_22_1_0_5(){
        int []Stack_00_col = {-26,23,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_22_1_0_6(){
        int []Stack_00_col = {-40,-8,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-19,-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_22_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {4,-27,24,-32,-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_22_1_0_8(){
        int []Stack_00_col = {32,-35,-26,18,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {30,47,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(pop(push(Stack_0, int_0))) = empty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_22_1_0_9(){
        int []Stack_00_col = {39,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_0_0(){
            
            try{return (t_23_0_0_0() && t_23_0_0_1() && t_23_0_0_2() && t_23_0_0_3() && t_23_0_0_4() && t_23_0_0_5() && t_23_0_0_6() && t_23_0_0_7() && t_23_0_0_8() && t_23_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_0(){
        int int_00 = 0;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 0;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_1(){
        int int_00 = 47;
    int []Stack_00_col = {23,36,-18,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 47;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_2(){
        int int_00 = -36;
    int []Stack_00_col = {-16,3,11,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -36;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_3(){
        int int_00 = -34;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -34;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_4(){
        int int_00 = 9;
    int []Stack_00_col = {-28,-44,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 9;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_5(){
        int int_00 = 1;
    int []Stack_00_col = {-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 1;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_6(){
        int int_00 = 14;
    int []Stack_00_col = {-36,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 14;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_7(){
        int int_00 = 43;
    int []Stack_00_col = {5,6,2,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 43;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_8(){
        int int_00 = -48;
    int []Stack_00_col = {-6,5,10,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -48;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_0_0_9(){
        int int_00 = 29;
    int []Stack_00_col = {28,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 29;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_23_1_0(){
            
            try{return (t_23_1_0_0() && t_23_1_0_1() && t_23_1_0_2() && t_23_1_0_3() && t_23_1_0_4() && t_23_1_0_5() && t_23_1_0_6() && t_23_1_0_7() && t_23_1_0_8() && t_23_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_0(){
        int int_00 = -28;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 1;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_1(){
        int int_00 = -36;
    int []Stack_00_col = {49,-29,4,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 33;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_2(){
        int int_00 = 10;
    int []Stack_00_col = {35,43,-48,17,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 10;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_3(){
        int int_00 = -43;
    int []Stack_00_col = {-7,5,6,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -42;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_4(){
        int int_00 = 35;
    int []Stack_00_col = {-10,16,-12,-9,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 17;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_5(){
        int int_00 = -36;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 45;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_6(){
        int int_00 = -39;
    int []Stack_00_col = {32,-38,-1,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 18;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_7(){
        int int_00 = -13;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 12;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_8(){
        int int_00 = -24;
    int []Stack_00_col = {42,-15,-7,-45,-30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -33;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_23_1_0_9(){
        int int_00 = 35;
    int []Stack_00_col = {6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -45;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_24_0_0(){
            
            try{return (t_24_0_0_0() && t_24_0_0_1() && t_24_0_0_2() && t_24_0_0_3() && t_24_0_0_4() && t_24_0_0_5() && t_24_0_0_6() && t_24_0_0_7() && t_24_0_0_8() && t_24_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 46;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_1(){
        int []Stack_00_col = {-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -5;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_2(){
        int []Stack_00_col = {-4,-36,-13,-2,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-4,-36,-13,-2,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -43;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_3(){
        int []Stack_00_col = {-37,28,14,30};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-37,28,14,30};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 46;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_4(){
        int []Stack_00_col = {-39,-16,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-39,-16,6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -3;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -15;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_6(){
        int []Stack_00_col = {-18,31,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-18,31,-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 31;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_7(){
        int []Stack_00_col = {-26,10,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-26,10,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -46;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_8(){
        int []Stack_00_col = {-21,-24,-44,-12,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 14;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-21,-24,-44,-12,34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 14;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_0_0_9(){
        int []Stack_00_col = {-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -42;
    Stack_01.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_24_1_0(){
            
            try{return (t_24_1_0_0() && t_24_1_0_1() && t_24_1_0_2() && t_24_1_0_3() && t_24_1_0_4() && t_24_1_0_5() && t_24_1_0_6() && t_24_1_0_7() && t_24_1_0_8() && t_24_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 27;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_1_0_1(){
        int []Stack_00_col = {45,-3,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -43;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {45,-3,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 0;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_1_0_2(){
        int []Stack_00_col = {45,-32,-19,-40,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {45,-32,-19,-40,-5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -18;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_1_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 30;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_1_0_4(){
        int []Stack_00_col = {32,17,-44,37,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -37;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {32,17,-44,37,-21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 12;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 14;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_1_0_6(){
        int []Stack_00_col = {-48,-29,-46,-37,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-48,-29,-46,-37,36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -3;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -8;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_1_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 40;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_1_0_9(){
        int []Stack_00_col = {-29,-29,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-29,-29,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -32;
    Stack_01.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_24_2_0(){
            
            try{return (t_24_2_0_0() && t_24_2_0_1() && t_24_2_0_2() && t_24_2_0_3() && t_24_2_0_4() && t_24_2_0_5() && t_24_2_0_6() && t_24_2_0_7() && t_24_2_0_8() && t_24_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 22;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_2_0_1(){
        int []Stack_00_col = {-8,-10,-31,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {44,-2,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -45;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_2_0_2(){
        int []Stack_00_col = {-21,-37,-1,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-24,-37,-16,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 20;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_2_0_3(){
        int []Stack_00_col = {-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {48,-37,-6,50,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 0;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_2_0_4(){
        int []Stack_00_col = {30,33,-6,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -27;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_2_0_5(){
        int []Stack_00_col = {28,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-28,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 40;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_2_0_6(){
        int []Stack_00_col = {-14,-26,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 6;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 6;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_2_0_7(){
        int []Stack_00_col = {34,-8,4,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -2;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -2;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-47,-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 40;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_24_2_0_9(){
        int []Stack_00_col = {-22,6,-32,-18,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-31,25,-44,8,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -12;
    Stack_10.push(int_01);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_24_3_0(){
            
            try{return (t_24_3_0_0() && t_24_3_0_1() && t_24_3_0_2() && t_24_3_0_3() && t_24_3_0_4() && t_24_3_0_5() && t_24_3_0_6() && t_24_3_0_7() && t_24_3_0_8() && t_24_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 10;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_3_0_1(){
        int []Stack_00_col = {13,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-21,1,16,4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -37;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_3_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-24,-13,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 27;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_3_0_3(){
        int []Stack_00_col = {32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {47,32,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 49;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_3_0_4(){
        int []Stack_00_col = {25,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 25;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_3_0_5(){
        int []Stack_00_col = {19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 29;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {6,19,41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -20;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_3_0_6(){
        int []Stack_00_col = {-43,-6,2,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {33,26,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 31;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_3_0_7(){
        int []Stack_00_col = {-32,-46,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 22;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_3_0_8(){
        int []Stack_00_col = {-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {38,-26,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 25;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_24_3_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-43,-33,-14,-30,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 0;
    Stack_10.push(int_10);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_25_0_0(){
            
            try{return (t_25_0_0_0() && t_25_0_0_1() && t_25_0_0_2() && t_25_0_0_3() && t_25_0_0_4() && t_25_0_0_5() && t_25_0_0_6() && t_25_0_0_7() && t_25_0_0_8() && t_25_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_1(){
        int []Stack_00_col = {13,28,5,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 30;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {13,28,5,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_2(){
        int []Stack_00_col = {8,-17,45,28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 6;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {8,-17,45,28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_3(){
        int []Stack_00_col = {26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_4(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_5(){
        int []Stack_00_col = {44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_6(){
        int []Stack_00_col = {-12,-15,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-12,-15,3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_7(){
        int []Stack_00_col = {3,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {3,17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_8(){
        int []Stack_00_col = {6,36,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {6,36,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_25_0_0_9(){
        int []Stack_00_col = {-46,-22,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-46,-22,50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_25_1_0(){
            
            try{return (t_25_1_0_0() && t_25_1_0_1() && t_25_1_0_2() && t_25_1_0_3() && t_25_1_0_4() && t_25_1_0_5() && t_25_1_0_6() && t_25_1_0_7() && t_25_1_0_8() && t_25_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -31;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {7,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_2(){
        int []Stack_00_col = {-5,-4,15,38,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-38,-49,-6,-37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_3(){
        int []Stack_00_col = {-17,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {31,17,-41,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_4(){
        int []Stack_00_col = {50,1,-15,-35,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {23,-10,-16,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_5(){
        int []Stack_00_col = {5,-5,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {4,-26,-36,29,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {21,38,9,35,-23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_7(){
        int []Stack_00_col = {-18,8,-12,40,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_8(){
        int []Stack_00_col = {19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(pop(push(Stack_0, int_0))) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_25_1_0_9(){
        int []Stack_00_col = {40,4,-1,50,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {10,19,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_26_0_0(){
            
            try{return (t_26_0_0_0() && t_26_0_0_1() && t_26_0_0_2() && t_26_0_0_3() && t_26_0_0_4() && t_26_0_0_5() && t_26_0_0_6() && t_26_0_0_7() && t_26_0_0_8() && t_26_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 16;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_1(){
        int []Stack_00_col = {-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 27;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -32;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -32;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_3(){
        int []Stack_00_col = {-27,-6,-42,-25,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 23;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-27,-6,-42,-25,25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 23;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_4(){
        int []Stack_00_col = {-8,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-8,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 22;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 37;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 37;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_6(){
        int []Stack_00_col = {47,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {47,-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -25;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_7(){
        int []Stack_00_col = {47,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {47,4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 46;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_8(){
        int []Stack_00_col = {-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -10;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_0_0_9(){
        int []Stack_00_col = {-29,5,44,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-29,5,44,11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 0;
    Stack_01.push(int_01);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_26_1_0(){
            
            try{return (t_26_1_0_0() && t_26_1_0_1() && t_26_1_0_2() && t_26_1_0_3() && t_26_1_0_4() && t_26_1_0_5() && t_26_1_0_6() && t_26_1_0_7() && t_26_1_0_8() && t_26_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 28;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_1(){
        int []Stack_00_col = {-9,31,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-9,31,-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -17;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_2(){
        int []Stack_00_col = {-37,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-37,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 30;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_3(){
        int []Stack_00_col = {-27,45,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-27,45,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -13;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_4(){
        int []Stack_00_col = {33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -28;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_5(){
        int []Stack_00_col = {-15,36,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-15,36,-16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 43;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -49;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -31;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_8(){
        int []Stack_00_col = {-8,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {-8,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 32;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -27;
    Stack_01.push(int_10);
    int pop_ret0 = (int)(Stack_01.pop());
    boolean empty_ret0 = (boolean)(Stack_01.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_26_2_0(){
            
            try{return (t_26_2_0_0() && t_26_2_0_1() && t_26_2_0_2() && t_26_2_0_3() && t_26_2_0_4() && t_26_2_0_5() && t_26_2_0_6() && t_26_2_0_7() && t_26_2_0_8() && t_26_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -35;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_2_0_1(){
        int []Stack_00_col = {-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {4,-31,-6,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 43;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_2_0_2(){
        int []Stack_00_col = {40,33,33,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-31,-10,-38,8,-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 42;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_2_0_3(){
        int []Stack_00_col = {2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-9,45,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 19;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_2_0_4(){
        int []Stack_00_col = {23,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 17;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_2_0_5(){
        int []Stack_00_col = {45,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {29,-44,32,10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -3;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_2_0_6(){
        int []Stack_00_col = {-50,7,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-25,47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -27;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_2_0_7(){
        int []Stack_00_col = {-16,-29,32,19,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -14;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_2_0_8(){
        int []Stack_00_col = {-18,37,44,21,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-33,-39,40,-49,9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 2;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_2_0_9(){
        int []Stack_00_col = {-40,19,35,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 36;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {49,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 36;
    Stack_10.push(int_01);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_26_3_0(){
            
            try{return (t_26_3_0_0() && t_26_3_0_1() && t_26_3_0_2() && t_26_3_0_3() && t_26_3_0_4() && t_26_3_0_5() && t_26_3_0_6() && t_26_3_0_7() && t_26_3_0_8() && t_26_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -5;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_3_0_1(){
        int []Stack_00_col = {-22,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -31;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_3_0_2(){
        int []Stack_00_col = {-46,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 49;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_3_0_3(){
        int []Stack_00_col = {46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {40,45,18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 34;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_3_0_4(){
        int []Stack_00_col = {-33,-34,-27,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-43,-10,47,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -49;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_3_0_5(){
        int []Stack_00_col = {15,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {2,-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -36;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_3_0_6(){
        int []Stack_00_col = {48,32,25,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {39,42,-22,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 13;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_3_0_7(){
        int []Stack_00_col = {14,-9,28,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {39,-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 18;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 49;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {-43,-45,23,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 24;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        

        //testing isEmpty(push(Stack_0, int_0)) = empty(pop(push(Stack_1, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_26_3_0_9(){
        int []Stack_00_col = {43,45,7,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    int []Stack_10_col = {12,-25,-8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -45;
    Stack_10.push(int_10);
    int pop_ret0 = (int)(Stack_10.pop());
    boolean empty_ret0 = (boolean)(Stack_10.empty());
    boolean eq_ret0 = (boolean)(isEmpty_ret0 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_27_0_0(){
            
            try{return (t_27_0_0_0() && t_27_0_0_1() && t_27_0_0_2() && t_27_0_0_3() && t_27_0_0_4() && t_27_0_0_5() && t_27_0_0_6() && t_27_0_0_7() && t_27_0_0_8() && t_27_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_0(){
        int int_00 = 47;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 47;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_1(){
        int int_00 = 29;
    int []Stack_00_col = {41,50,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 29;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_2(){
        int int_00 = -14;
    int []Stack_00_col = {12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -14;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_3(){
        int int_00 = -44;
    int []Stack_00_col = {-19,41,1,-39,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -44;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_4(){
        int int_00 = 28;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 28;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_5(){
        int int_00 = 38;
    int []Stack_00_col = {32,50,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 38;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_6(){
        int int_00 = -50;
    int []Stack_00_col = {-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -50;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_7(){
        int int_00 = -9;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -9;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_8(){
        int int_00 = 19;
    int []Stack_00_col = {-25,-35,43,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 19;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_0_0_9(){
        int int_00 = -37;
    int []Stack_00_col = {-10,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -37;
    Stack_00.push(int_01);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_27_1_0(){
            
            try{return (t_27_1_0_0() && t_27_1_0_1() && t_27_1_0_2() && t_27_1_0_3() && t_27_1_0_4() && t_27_1_0_5() && t_27_1_0_6() && t_27_1_0_7() && t_27_1_0_8() && t_27_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_0(){
        int int_00 = 17;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 16;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_1(){
        int int_00 = -26;
    int []Stack_00_col = {-11,1,16,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -41;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_2(){
        int int_00 = 42;
    int []Stack_00_col = {17,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -44;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_3(){
        int int_00 = 34;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 29;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_4(){
        int int_00 = 20;
    int []Stack_00_col = {16,25,11,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -45;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_5(){
        int int_00 = 17;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 17;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_6(){
        int int_00 = -24;
    int []Stack_00_col = {21,-26,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -15;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_7(){
        int int_00 = 27;
    int []Stack_00_col = {-32,47,46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 25;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_8(){
        int int_00 = -9;
    int []Stack_00_col = {48,-48,-2,39,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 39;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(pop(push(Stack_0, int_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_27_1_0_9(){
        int int_00 = 43;
    int []Stack_00_col = {-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -1;
    Stack_00.push(int_10);
    int pop_ret0 = (int)(Stack_00.pop());
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_28_0_0(){
            
            try{return (t_28_0_0_0() && t_28_0_0_1() && t_28_0_0_2() && t_28_0_0_3() && t_28_0_0_4() && t_28_0_0_5() && t_28_0_0_6() && t_28_0_0_7() && t_28_0_0_8() && t_28_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_0(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_1(){
        boolean bool_00 = true;
    int []Stack_00_col = {-9,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_2(){
        boolean bool_00 = false;
    int []Stack_00_col = {27,-13,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_3(){
        boolean bool_00 = false;
    int []Stack_00_col = {-20,-38,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_4(){
        boolean bool_00 = false;
    int []Stack_00_col = {-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_5(){
        boolean bool_00 = false;
    int []Stack_00_col = {-37,-13,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_6(){
        boolean bool_00 = true;
    int []Stack_00_col = {-32,-28,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_7(){
        boolean bool_00 = true;
    int []Stack_00_col = {46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_8(){
        boolean bool_00 = true;
    int []Stack_00_col = {41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -27;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_28_0_0_9(){
        boolean bool_00 = true;
    int []Stack_00_col = {-13,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_29_0_0(){
            
            try{return (t_29_0_0_0() && t_29_0_0_1() && t_29_0_0_2() && t_29_0_0_3() && t_29_0_0_4() && t_29_0_0_5() && t_29_0_0_6() && t_29_0_0_7() && t_29_0_0_8() && t_29_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_0(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_1(){
        boolean bool_00 = true;
    int []Stack_00_col = {47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_2(){
        boolean bool_00 = true;
    int []Stack_00_col = {-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 1;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_3(){
        boolean bool_00 = true;
    int []Stack_00_col = {-49,9,2,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_4(){
        boolean bool_00 = false;
    int []Stack_00_col = {-50,11,14,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_5(){
        boolean bool_00 = false;
    int []Stack_00_col = {18,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_6(){
        boolean bool_00 = true;
    int []Stack_00_col = {-20,-20,-21,-42,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_7(){
        boolean bool_00 = false;
    int []Stack_00_col = {30,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -44;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_8(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -19;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_29_0_0_9(){
        boolean bool_00 = true;
    int []Stack_00_col = {43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 28;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_30_0_0(){
            
            try{return (t_30_0_0_0() && t_30_0_0_1() && t_30_0_0_2() && t_30_0_0_3() && t_30_0_0_4() && t_30_0_0_5() && t_30_0_0_6() && t_30_0_0_7() && t_30_0_0_8() && t_30_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_0(){
        int int_00 = 4;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_1(){
        int int_00 = 47;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_2(){
        int int_00 = 2;
    int []Stack_00_col = {-14,-39,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-14,-39,48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_3(){
        int int_00 = -21;
    int []Stack_00_col = {-6,-32,-41,18,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-6,-32,-41,18,11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_4(){
        int int_00 = 8;
    int []Stack_00_col = {-33,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-33,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_5(){
        int int_00 = -16;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_6(){
        int int_00 = 27;
    int []Stack_00_col = {37,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {37,-31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_7(){
        int int_00 = 47;
    int []Stack_00_col = {9,2,4,-25,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {9,2,4,-25,-33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_8(){
        int int_00 = -5;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_0_0_9(){
        int int_00 = 22;
    int []Stack_00_col = {21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_30_1_0(){
            
            try{return (t_30_1_0_0() && t_30_1_0_1() && t_30_1_0_2() && t_30_1_0_3() && t_30_1_0_4() && t_30_1_0_5() && t_30_1_0_6() && t_30_1_0_7() && t_30_1_0_8() && t_30_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_0(){
        int int_00 = 15;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_1(){
        int int_00 = 43;
    int []Stack_00_col = {14,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {19,28,-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_2(){
        int int_00 = 13;
    int []Stack_00_col = {11,-25,-41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {31,14,-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_3(){
        int int_00 = 36;
    int []Stack_00_col = {9,24,-13,-42,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {34,15,-15,-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_4(){
        int int_00 = 10;
    int []Stack_00_col = {6,-30,-18,-11,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {20,39,-20,-17,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_5(){
        int int_00 = 17;
    int []Stack_00_col = {1,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_6(){
        int int_00 = -23;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-3,49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_7(){
        int int_00 = -11;
    int []Stack_00_col = {-33,10,-30,34,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {15,39,35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_8(){
        int int_00 = 40;
    int []Stack_00_col = {4,3,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_30_1_0_9(){
        int int_00 = 9;
    int []Stack_00_col = {26,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {10,-44,-34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_31_0_0(){
            
            try{return (t_31_0_0_0() && t_31_0_0_1() && t_31_0_0_2() && t_31_0_0_3() && t_31_0_0_4() && t_31_0_0_5() && t_31_0_0_6() && t_31_0_0_7() && t_31_0_0_8() && t_31_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_0(){
        int int_00 = -27;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -27;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_1(){
        int int_00 = 48;
    int []Stack_00_col = {14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 48;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_2(){
        int int_00 = -33;
    int []Stack_00_col = {10,16,-9,41};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -33;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_3(){
        int int_00 = 34;
    int []Stack_00_col = {1,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 34;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_4(){
        int int_00 = 39;
    int []Stack_00_col = {-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 39;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_5(){
        int int_00 = 45;
    int []Stack_00_col = {12,-45,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 45;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_6(){
        int int_00 = 47;
    int []Stack_00_col = {-3,-43,-6,18,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 47;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_7(){
        int int_00 = -32;
    int []Stack_00_col = {1,-36,-41,27,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -32;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_8(){
        int int_00 = -32;
    int []Stack_00_col = {28,25,33,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -32;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_31_0_0_9(){
        int int_00 = -4;
    int []Stack_00_col = {49,-23,-33,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -4;
    Stack_00.push(int_01);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_31_1_0(){
            
            try{return (t_31_1_0_0() && t_31_1_0_1() && t_31_1_0_2() && t_31_1_0_3() && t_31_1_0_4() && t_31_1_0_5() && t_31_1_0_6() && t_31_1_0_7() && t_31_1_0_8() && t_31_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_0(){
        int int_00 = 37;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 35;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_1(){
        int int_00 = 40;
    int []Stack_00_col = {-28,-32,48,-45,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -35;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_2(){
        int int_00 = 48;
    int []Stack_00_col = {-25,31,11,29,10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -36;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_3(){
        int int_00 = 32;
    int []Stack_00_col = {6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -48;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_4(){
        int int_00 = -38;
    int []Stack_00_col = {5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -46;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_5(){
        int int_00 = 7;
    int []Stack_00_col = {9,11,35,-29,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 31;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_6(){
        int int_00 = 47;
    int []Stack_00_col = {8,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 20;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_7(){
        int int_00 = 25;
    int []Stack_00_col = {-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -23;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_8(){
        int int_00 = -42;
    int []Stack_00_col = {-43,49,20,-25,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 31;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = size(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_31_1_0_9(){
        int int_00 = -34;
    int []Stack_00_col = {26,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -45;
    Stack_00.push(int_10);
    int size_ret0 = (int)(Stack_00.size());
    boolean eq_ret0 = (boolean)(int_00 == size_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_0_0(){
            
            try{return (t_32_0_0_0() && t_32_0_0_1() && t_32_0_0_2() && t_32_0_0_3() && t_32_0_0_4() && t_32_0_0_5() && t_32_0_0_6() && t_32_0_0_7() && t_32_0_0_8() && t_32_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_1(){
        int []Stack_00_col = {-18,28,34,-1,43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-18,28,34,-1,43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-18,28,34,-1,43};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-18,28,34,-1,43};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_2(){
        int []Stack_00_col = {-26,47,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-26,47,35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-26,47,35};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-26,47,35};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_3(){
        int []Stack_00_col = {23,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {23,13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {23,13};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {23,13};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_4(){
        int []Stack_00_col = {-44,-2,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-44,-2,47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-44,-2,47};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-44,-2,47};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_5(){
        int []Stack_00_col = {3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {3};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {3};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_6(){
        int []Stack_00_col = {34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {34};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {34};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_7(){
        int []Stack_00_col = {17,-3,-37,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {17,-3,-37,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {17,-3,-37,-37};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {17,-3,-37,-37};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_8(){
        int []Stack_00_col = {-10,-12,-34,-41,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-10,-12,-34,-41,-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-10,-12,-34,-41,-48};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {-10,-12,-34,-41,-48};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_0_0_9(){
        int []Stack_00_col = {21,-6,-33,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {21,-6,-33,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {21,-6,-33,-46};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_03_col = {21,-6,-33,-46};
Stack Stack_03 = new Stack();
for(int i = Stack_03_col.length-1; i>=0 ; --i) Stack_03.push(Stack_03_col[i]);
    int size_ret1 = (int)(Stack_03.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_1_0(){
            
            try{return (t_32_1_0_0() && t_32_1_0_1() && t_32_1_0_2() && t_32_1_0_3() && t_32_1_0_4() && t_32_1_0_5() && t_32_1_0_6() && t_32_1_0_7() && t_32_1_0_8() && t_32_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_1(){
        int []Stack_00_col = {-48,4,-17,-40,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-48,4,-17,-40,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-48,4,-17,-40,37};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-11,9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_2(){
        int []Stack_00_col = {-29,-41,-22,-26,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-29,-41,-22,-26,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-29,-41,-22,-26,26};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {23,-8,-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_4(){
        int []Stack_00_col = {-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-9};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_5(){
        int []Stack_00_col = {-49,-5,-6,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-49,-5,-6,31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-49,-5,-6,31};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {49,32,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_6(){
        int []Stack_00_col = {44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {44};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-27,34,-32,-17,-1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_7(){
        int []Stack_00_col = {2,37,-42,-25,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {2,37,-42,-25,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {2,37,-42,-25,-26};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-2,10,-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_8(){
        int []Stack_00_col = {29,-35,-37,1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {29,-35,-37,1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {29,-35,-37,1};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_1_0_9(){
        int []Stack_00_col = {-16,-10,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-16,-10,-26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_02_col = {-16,-10,-26};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int []Stack_10_col = {-24,-38,7,-3,-48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_02.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_02.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_2_0(){
            
            try{return (t_32_2_0_0() && t_32_2_0_1() && t_32_2_0_2() && t_32_2_0_3() && t_32_2_0_4() && t_32_2_0_5() && t_32_2_0_6() && t_32_2_0_7() && t_32_2_0_8() && t_32_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_2_0_1(){
        int []Stack_00_col = {47,23,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {47,23,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-27,-46,29,-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {47,23,24};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_2_0_2(){
        int []Stack_00_col = {-27,-26,30,21,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-27,-26,30,21,25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {38,0,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {-27,-26,30,21,25};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_2_0_3(){
        int []Stack_00_col = {8,-27,12,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {8,-27,12,6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-2,34,-14,40,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {8,-27,12,6};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_2_0_4(){
        int []Stack_00_col = {8,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {8,-32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {9,44,-15,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {8,-32};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_2_0_5(){
        int []Stack_00_col = {10,-50,32,49,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {10,-50,32,49,-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {30,31,4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {10,-50,32,49,-13};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_2_0_6(){
        int []Stack_00_col = {9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-32,21,36,4,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {9};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_2_0_7(){
        int []Stack_00_col = {-40,39,-36,32,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-40,39,-36,32,-50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {32,-25,-18,28,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {-40,39,-36,32,-50};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_2_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-26,-40,-5,-8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_3_0(){
            
            try{return (t_32_3_0_0() && t_32_3_0_1() && t_32_3_0_2() && t_32_3_0_3() && t_32_3_0_4() && t_32_3_0_5() && t_32_3_0_6() && t_32_3_0_7() && t_32_3_0_8() && t_32_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_3_0_1(){
        int []Stack_00_col = {-28,0,48,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-28,0,48,-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {8,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {8,34};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_3_0_2(){
        int []Stack_00_col = {-19,-2,45,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-19,-2,45,19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_3_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {16,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {16,43};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_3_0_4(){
        int []Stack_00_col = {-12,18,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-12,18,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_3_0_5(){
        int []Stack_00_col = {-44,-20,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-44,-20,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {44,-14,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {44,-14,-26};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_3_0_6(){
        int []Stack_00_col = {-22,12,-14,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-22,12,-14,12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-26,-50,-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-26,-50,-14};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_3_0_7(){
        int []Stack_00_col = {50,-5,-40,14,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {50,-5,-40,14,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-34,20,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-34,20,28};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_3_0_8(){
        int []Stack_00_col = {-48,32,4,-44,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-48,32,4,-44,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-14,-2,-19,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-14,-2,-19,23};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_3_0_9(){
        int []Stack_00_col = {39,4,-36,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {39,4,-36,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-6,2,-16,-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-6,2,-16,-4};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_4_0(){
            
            try{return (t_32_4_0_0() && t_32_4_0_1() && t_32_4_0_2() && t_32_4_0_3() && t_32_4_0_4() && t_32_4_0_5() && t_32_4_0_6() && t_32_4_0_7() && t_32_4_0_8() && t_32_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_4_0_1(){
        int []Stack_00_col = {28,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {28,-33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {42};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_4_0_2(){
        int []Stack_00_col = {-45,-11,1,-4,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-45,-11,1,-4,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_4_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-29,36,27,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {4,28,13,-6,22};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_4_0_4(){
        int []Stack_00_col = {-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {40,15,-2,38};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_4_0_5(){
        int []Stack_00_col = {27,47,-28,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {27,47,-28,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-15,32,18,35,2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-9};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_4_0_6(){
        int []Stack_00_col = {22,34,39,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {22,34,39,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-4};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-35,-7,31,-23,-29};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_4_0_7(){
        int []Stack_00_col = {50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_4_0_8(){
        int []Stack_00_col = {-28,0,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-28,0,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-2,-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-24,-9};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_0))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_4_0_9(){
        int []Stack_00_col = {43,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {43,21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-30,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_5_0(){
            
            try{return (t_32_5_0_0() && t_32_5_0_1() && t_32_5_0_2() && t_32_5_0_3() && t_32_5_0_4() && t_32_5_0_5() && t_32_5_0_6() && t_32_5_0_7() && t_32_5_0_8() && t_32_5_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_5_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_5_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {25,37,35,-27,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_5_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_5_0_3(){
        int []Stack_00_col = {6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {27,-46,13,40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {6};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_5_0_4(){
        int []Stack_00_col = {27,27,3,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {27,27,3,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {27,27,3,8};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_5_0_5(){
        int []Stack_00_col = {-22,-29,-38,7,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {34,22,4,-18,-14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-22,-29,-38,7,-8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-22,-29,-38,7,-8};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_5_0_6(){
        int []Stack_00_col = {-14,16,14,9,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {38,-36,41,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-14,16,14,9,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-14,16,14,9,29};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_5_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_5_0_8(){
        int []Stack_00_col = {-1,-1,-36,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {29,36,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-1,-1,-36,-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-1,-1,-36,-48};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_5_0_9(){
        int []Stack_00_col = {26,-25,7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-13,44,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {26,-25,7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {26,-25,7};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_6_0(){
            
            try{return (t_32_6_0_0() && t_32_6_0_1() && t_32_6_0_2() && t_32_6_0_3() && t_32_6_0_4() && t_32_6_0_5() && t_32_6_0_6() && t_32_6_0_7() && t_32_6_0_8() && t_32_6_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_6_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_6_0_1(){
        int []Stack_00_col = {-20,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-40,-30,-18,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-20,25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-40,-30,-18,-13};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_6_0_2(){
        int []Stack_00_col = {-4,36,25,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {38,-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-4,36,25,-16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {38,-19};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_6_0_3(){
        int []Stack_00_col = {27,-4,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {7,24,-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {27,-4,-39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {7,24,-45};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_6_0_4(){
        int []Stack_00_col = {35,10,15,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {35,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {35,10,15,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {35,30};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_6_0_5(){
        int []Stack_00_col = {41,-16,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-31,-48,-28,8,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {41,-16,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-31,-48,-28,8,11};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_6_0_6(){
        int []Stack_00_col = {36,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {36,-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_6_0_7(){
        int []Stack_00_col = {25,-17,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {45,-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {25,-17,32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {45,-5};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_6_0_8(){
        int []Stack_00_col = {6,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-34,-16,42,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {6,-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-34,-16,42,27};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_6_0_9(){
        int []Stack_00_col = {-20,28,-18,7,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-29,-29,-48,-17,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-20,28,-18,7,34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_11_col = {-29,-29,-48,-17,21};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_7_0(){
            
            try{return (t_32_7_0_0() && t_32_7_0_1() && t_32_7_0_2() && t_32_7_0_3() && t_32_7_0_4() && t_32_7_0_5() && t_32_7_0_6() && t_32_7_0_7() && t_32_7_0_8() && t_32_7_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_7_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_7_0_1(){
        int []Stack_00_col = {20,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {20,-24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_7_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-17,28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_7_0_3(){
        int []Stack_00_col = {-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {26,2,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {38,-31,3};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_7_0_4(){
        int []Stack_00_col = {-26,35,-33,6,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {38,15,-10,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-26,35,-33,6,14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {39,-7,-33,-33,27};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_7_0_5(){
        int []Stack_00_col = {14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-28,-31,15,1,-50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {15,-25,-41,-24};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_7_0_6(){
        int []Stack_00_col = {44,19,-21,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-40,16,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {44,19,-21,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-23,-25,-4};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_7_0_7(){
        int []Stack_00_col = {-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-31};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {0,-46};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_7_0_8(){
        int []Stack_00_col = {7,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-44,-47,0,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {7,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-3,50,-35};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_0, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_7_0_9(){
        int []Stack_00_col = {21,-11,-14,14,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {21,-11,-14,14,50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_20_col = {-41,22};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_01.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_8_0(){
            
            try{return (t_32_8_0_0() && t_32_8_0_1() && t_32_8_0_2() && t_32_8_0_3() && t_32_8_0_4() && t_32_8_0_5() && t_32_8_0_6() && t_32_8_0_7() && t_32_8_0_8() && t_32_8_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_8_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_8_0_1(){
        int []Stack_00_col = {18,28,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {18,28,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_8_0_2(){
        int []Stack_00_col = {18,-28,-5,-27,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {6,6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {6,6};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {18,-28,-5,-27,-15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_8_0_3(){
        int []Stack_00_col = {50,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {17};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {50,-44};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_8_0_4(){
        int []Stack_00_col = {-36,-4,-47,-10,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-25,33,-6,14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-25,33,-6,14};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {-36,-4,-47,-10,29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_8_0_5(){
        int []Stack_00_col = {-29,19,-25,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-11,21,-49,-46,36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-11,21,-49,-46,36};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {-29,19,-25,16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_8_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {49};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_8_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_8_0_8(){
        int []Stack_00_col = {36,33,37,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-19,-48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-19,-48};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {36,33,37,27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_8_0_9(){
        int []Stack_00_col = {7,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-50,-48,-37,-26,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-50,-48,-37,-26,-12};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_01_col = {7,32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_9_0(){
            
            try{return (t_32_9_0_0() && t_32_9_0_1() && t_32_9_0_2() && t_32_9_0_3() && t_32_9_0_4() && t_32_9_0_5() && t_32_9_0_6() && t_32_9_0_7() && t_32_9_0_8() && t_32_9_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_9_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_9_0_1(){
        int []Stack_00_col = {-8,24,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {50,43,-8,-23,-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {50,43,-8,-23,-36};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {50,43,-8,-23,-36};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_9_0_2(){
        int []Stack_00_col = {12,-24,-40,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {7,44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {7,44};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {7,44};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_9_0_3(){
        int []Stack_00_col = {-29,12,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {36,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {36,-29};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {36,-29};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_9_0_4(){
        int []Stack_00_col = {-35,20,38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-12,12,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-12,12,34};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-12,12,34};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_9_0_5(){
        int []Stack_00_col = {-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {20,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {20,-21};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {20,-21};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_9_0_6(){
        int []Stack_00_col = {48,-36,-34,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_9_0_7(){
        int []Stack_00_col = {17,-3,30,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {0};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {0};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_9_0_8(){
        int []Stack_00_col = {50,46,-39,5,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-22,7,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-22,7,-10};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-22,7,-10};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_9_0_9(){
        int []Stack_00_col = {-16,31,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-48,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-48,38};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_12_col = {-48,38};
Stack Stack_12 = new Stack();
for(int i = Stack_12_col.length-1; i>=0 ; --i) Stack_12.push(Stack_12_col[i]);
    int size_ret1 = (int)(Stack_12.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_10_0(){
            
            try{return (t_32_10_0_0() && t_32_10_0_1() && t_32_10_0_2() && t_32_10_0_3() && t_32_10_0_4() && t_32_10_0_5() && t_32_10_0_6() && t_32_10_0_7() && t_32_10_0_8() && t_32_10_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_10_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_10_0_1(){
        int []Stack_00_col = {50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-29,-45,-13,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-29,-45,-13,-33};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {0};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_10_0_2(){
        int []Stack_00_col = {-10,4,-17,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-50,15,-38,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-50,15,-38,-7};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-25,-8,-33};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_10_0_3(){
        int []Stack_00_col = {18,12,17,7,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {27,13,-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {27,13,-18};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-41,41,-48,33,-11};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_10_0_4(){
        int []Stack_00_col = {27,-13,21,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {37,10,2,-22,-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {37,10,2,-22,-2};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_10_0_5(){
        int []Stack_00_col = {-50,29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_10_0_6(){
        int []Stack_00_col = {-37,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-8,-42,26,-1,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-8,-42,26,-1,38};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {30,14,17,-22};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_10_0_7(){
        int []Stack_00_col = {13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {15,-45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {15,-45};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-40,-43,-6};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_10_0_8(){
        int []Stack_00_col = {41,-29,28,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-2,-31,31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-2,-31,31};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_10_0_9(){
        int []Stack_00_col = {-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-46,-9,-25,-36,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_11_col = {-46,-9,-25,-36,-43};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int []Stack_20_col = {-27,16};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_11.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_11.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_11_0(){
            
            try{return (t_32_11_0_0() && t_32_11_0_1() && t_32_11_0_2() && t_32_11_0_3() && t_32_11_0_4() && t_32_11_0_5() && t_32_11_0_6() && t_32_11_0_7() && t_32_11_0_8() && t_32_11_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_11_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_11_0_1(){
        int []Stack_00_col = {-42,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {25,-17};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-42,-10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_11_0_2(){
        int []Stack_00_col = {2,-49,-50,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {49,-15};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {15,-29,43};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {2,-49,-50,-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_11_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {16,45,-26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {42};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_11_0_4(){
        int []Stack_00_col = {-20,44,-19,19,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {31,18,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-7,-12,-31};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-20,44,-19,19,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_11_0_5(){
        int []Stack_00_col = {31,11,-2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {28,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {9,30,-2,-36,-38};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {31,11,-2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_11_0_6(){
        int []Stack_00_col = {-30,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {18,-9,17,13,4};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-30,-8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_11_0_7(){
        int []Stack_00_col = {-48,-47,-11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-20,39,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {32,-42,15,25,-37};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-48,-47,-11};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_11_0_8(){
        int []Stack_00_col = {-4,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-8,33,-17,-46,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-34,-24};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {-4,-19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_11_0_9(){
        int []Stack_00_col = {49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {35,43,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {10,-3,11,48,47};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_01_col = {49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_12_0(){
            
            try{return (t_32_12_0_0() && t_32_12_0_1() && t_32_12_0_2() && t_32_12_0_3() && t_32_12_0_4() && t_32_12_0_5() && t_32_12_0_6() && t_32_12_0_7() && t_32_12_0_8() && t_32_12_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_12_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_12_0_1(){
        int []Stack_00_col = {-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {10,6,-36};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_12_0_2(){
        int []Stack_00_col = {-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-41};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-29};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_12_0_3(){
        int []Stack_00_col = {-5,6,-37,30,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-45,15,-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {24,21,17,-41};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-45,15,-41};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_12_0_4(){
        int []Stack_00_col = {-49,-48,-50,-39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-39,-35,-31,-1,-9};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_12_0_5(){
        int []Stack_00_col = {-46,41,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {14,37,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {46,10};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {14,37,21};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_12_0_6(){
        int []Stack_00_col = {33,-26,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-9,40,-18,15,-25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-9,40,-18,15,-25};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_12_0_7(){
        int []Stack_00_col = {7,-41,47,0,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-29,-25,-21,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {38,-6,-8};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-29,-25,-21,43};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_12_0_8(){
        int []Stack_00_col = {-34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-50,34};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_12_0_9(){
        int []Stack_00_col = {27,0,35,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-2,-22,-12,-39,12};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_11_col = {-18};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_13_0(){
            
            try{return (t_32_13_0_0() && t_32_13_0_1() && t_32_13_0_2() && t_32_13_0_3() && t_32_13_0_4() && t_32_13_0_5() && t_32_13_0_6() && t_32_13_0_7() && t_32_13_0_8() && t_32_13_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_13_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_13_0_1(){
        int []Stack_00_col = {-45,-4,-16,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {4};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {4};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_13_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-5,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-9,20,-10,35,20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {-9,20,-10,35,20};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_13_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {16,16,30,44,33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_13_0_4(){
        int []Stack_00_col = {24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {45,36,33};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {45,36,33};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_13_0_5(){
        int []Stack_00_col = {48,-5,3,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-19,19,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {1,7,-27,-19};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {1,7,-27,-19};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_13_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {9,-19,10,-21,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {31,-2};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {31,-2};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_13_0_7(){
        int []Stack_00_col = {-36,-38,10,6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-31,-8,-45,-33,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {45};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {45};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_13_0_8(){
        int []Stack_00_col = {31,-34,-42,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-18,-34,-32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {0,23,-38,-39,7};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {0,23,-38,-39,7};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_13_0_9(){
        int []Stack_00_col = {41,-46,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {30,-11,-10,-30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-44};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_21_col = {-44};
Stack Stack_21 = new Stack();
for(int i = Stack_21_col.length-1; i>=0 ; --i) Stack_21.push(Stack_21_col[i]);
    int size_ret1 = (int)(Stack_21.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_32_14_0(){
            
            try{return (t_32_14_0_0() && t_32_14_0_1() && t_32_14_0_2() && t_32_14_0_3() && t_32_14_0_4() && t_32_14_0_5() && t_32_14_0_6() && t_32_14_0_7() && t_32_14_0_8() && t_32_14_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_14_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_14_0_1(){
        int []Stack_00_col = {-45,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-12,14};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {18,47};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_14_0_2(){
        int []Stack_00_col = {-36,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-18};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {1};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_14_0_3(){
        int []Stack_00_col = {28,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-5,12,50,-6,17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-35};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-48,44};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_14_0_4(){
        int []Stack_00_col = {-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {32,8,-6,-19,46};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_14_0_5(){
        int []Stack_00_col = {40,-7,5,12,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {49,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {36,-9};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_14_0_6(){
        int []Stack_00_col = {-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-39,27,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {26};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {27,12,46,42,-34};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_14_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-18,-36,14,-37,-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-38,9,-37,1};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-43,-37};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_14_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-4,37,34,-23,37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-38,4,13,-2};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, size(Stack_1))) = isEmpty(push(Stack_2, size(Stack_3)))
        @SuppressWarnings("unchecked")
        private static boolean t_32_14_0_9(){
        int []Stack_00_col = {-24,-9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-2,-6,-22,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_20_col = {-33,-16,35,40};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int []Stack_30_col = {-50,-44,11};
Stack Stack_30 = new Stack();
for(int i = Stack_30_col.length-1; i>=0 ; --i) Stack_30.push(Stack_30_col[i]);
    int size_ret1 = (int)(Stack_30.size());
    Stack_20.push(size_ret1);
    boolean isEmpty_ret0 = (boolean)(Stack_20.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_33_0_0(){
            
            try{return (t_33_0_0_0() && t_33_0_0_1() && t_33_0_0_2() && t_33_0_0_3() && t_33_0_0_4() && t_33_0_0_5() && t_33_0_0_6() && t_33_0_0_7() && t_33_0_0_8() && t_33_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_0(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_1(){
        boolean bool_00 = true;
    int []Stack_00_col = {22,-42,13,-19,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_2(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_3(){
        boolean bool_00 = false;
    int []Stack_00_col = {-33,-18,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_4(){
        boolean bool_00 = false;
    int []Stack_00_col = {11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_5(){
        boolean bool_00 = false;
    int []Stack_00_col = {40,-17,30,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_6(){
        boolean bool_00 = true;
    int []Stack_00_col = {-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_7(){
        boolean bool_00 = false;
    int []Stack_00_col = {-37,-33,14,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_8(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -9;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_33_0_0_9(){
        boolean bool_00 = false;
    int []Stack_00_col = {7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_34_0_0(){
            
            try{return (t_34_0_0_0() && t_34_0_0_1() && t_34_0_0_2() && t_34_0_0_3() && t_34_0_0_4() && t_34_0_0_5() && t_34_0_0_6() && t_34_0_0_7() && t_34_0_0_8() && t_34_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_0(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_1(){
        boolean bool_00 = false;
    int []Stack_00_col = {39,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {39,-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_2(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_3(){
        boolean bool_00 = false;
    int []Stack_00_col = {27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_4(){
        boolean bool_00 = true;
    int []Stack_00_col = {4,1,-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {4,1,-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_5(){
        boolean bool_00 = true;
    int []Stack_00_col = {-43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_6(){
        boolean bool_00 = false;
    int []Stack_00_col = {49,-30,-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {49,-30,-16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_7(){
        boolean bool_00 = true;
    int []Stack_00_col = {35,-11,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {35,-11,20};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_8(){
        boolean bool_00 = true;
    int []Stack_00_col = {32,24,34,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {32,24,34,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_0_0_9(){
        boolean bool_00 = true;
    int []Stack_00_col = {-2,-11,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-2,-11,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_34_1_0(){
            
            try{return (t_34_1_0_0() && t_34_1_0_1() && t_34_1_0_2() && t_34_1_0_3() && t_34_1_0_4() && t_34_1_0_5() && t_34_1_0_6() && t_34_1_0_7() && t_34_1_0_8() && t_34_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_0(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_1(){
        boolean bool_00 = true;
    int []Stack_00_col = {-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {24,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_2(){
        boolean bool_00 = false;
    int []Stack_00_col = {10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-28,-19,-39,3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_3(){
        boolean bool_00 = true;
    int []Stack_00_col = {42,-46,-33,-46,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {32,13,-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_4(){
        boolean bool_00 = false;
    int []Stack_00_col = {-23,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {4,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_5(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-34,-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_6(){
        boolean bool_00 = false;
    int []Stack_00_col = {-6,-47,-39,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_7(){
        boolean bool_00 = false;
    int []Stack_00_col = {-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {39,-8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_8(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {32,-48,-9,4,30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = empty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_34_1_0_9(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {36,-23,28,19,13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    boolean eq_ret0 = (boolean)(bool_00 == empty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_35_0_0(){
            
            try{return (t_35_0_0_0() && t_35_0_0_1() && t_35_0_0_2() && t_35_0_0_3() && t_35_0_0_4() && t_35_0_0_5() && t_35_0_0_6() && t_35_0_0_7() && t_35_0_0_8() && t_35_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_1(){
        int []Stack_00_col = {8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {8};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_3(){
        int []Stack_00_col = {20,35,-10,-29,21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -30;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {20,35,-10,-29,21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {20,35,-10,-29,21};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_4(){
        int []Stack_00_col = {35,43,-39,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {35,43,-39,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {35,43,-39,33};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_5(){
        int []Stack_00_col = {-4,-39,37,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -26;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-4,-39,37,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-4,-39,37,8};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_6(){
        int []Stack_00_col = {8,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 39;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {8,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {8,-22};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -47;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_8(){
        int []Stack_00_col = {47,-37,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {47,-37,-29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {47,-37,-29};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_0_0_9(){
        int []Stack_00_col = {-36,26,43,-22,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-36,26,43,-22,12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-36,26,43,-22,12};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret0 = (int)(Stack_02.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_35_1_0(){
            
            try{return (t_35_1_0_0() && t_35_1_0_1() && t_35_1_0_2() && t_35_1_0_3() && t_35_1_0_4() && t_35_1_0_5() && t_35_1_0_6() && t_35_1_0_7() && t_35_1_0_8() && t_35_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 20;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {2,-11,-48,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_2(){
        int []Stack_00_col = {46,-35,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {46,-35,-38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-11,-26,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_3(){
        int []Stack_00_col = {-27,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 15;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-27,27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {7,-32,-48,21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_4(){
        int []Stack_00_col = {-50,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-50,-22};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {26,21,22,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_5(){
        int []Stack_00_col = {24,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {24,-28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-33,-9,7,-23,2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_6(){
        int []Stack_00_col = {20,17,40,6,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {20,17,40,6,49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_7(){
        int []Stack_00_col = {13,-15,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -42;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {13,-15,-49};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {33,38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_8(){
        int []Stack_00_col = {-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-32};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_1_0_9(){
        int []Stack_00_col = {-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {28,-33,29,-9,-29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_01.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_35_2_0(){
            
            try{return (t_35_2_0_0() && t_35_2_0_1() && t_35_2_0_2() && t_35_2_0_3() && t_35_2_0_4() && t_35_2_0_5() && t_35_2_0_6() && t_35_2_0_7() && t_35_2_0_8() && t_35_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 36;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_2_0_1(){
        int []Stack_00_col = {-39,6,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-39,6,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_2_0_2(){
        int []Stack_00_col = {5,8,-46,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {5,8,-46,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_2_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -39;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {17,43,40,-12,42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_2_0_4(){
        int []Stack_00_col = {7,43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -8;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {12,12,-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {7,43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_2_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {32,-37,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_2_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-47,-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_2_0_7(){
        int []Stack_00_col = {-44,-37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-44,-37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-32,17,15,-50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_2_0_9(){
        int []Stack_00_col = {21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-37,-14,-38,24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_35_3_0(){
            
            try{return (t_35_3_0_0() && t_35_3_0_1() && t_35_3_0_2() && t_35_3_0_3() && t_35_3_0_4() && t_35_3_0_5() && t_35_3_0_6() && t_35_3_0_7() && t_35_3_0_8() && t_35_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 2;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_3_0_1(){
        int []Stack_00_col = {26,4,-35,-2,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 26;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {32,-32,-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {32,-32,-5};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_3_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-50,-20,40,-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-50,-20,40,-42};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_3_0_3(){
        int []Stack_00_col = {-35,37,14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-32,6,6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-32,6,6};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_3_0_4(){
        int []Stack_00_col = {43,31,-30,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {31,0,22,23};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {31,0,22,23};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_3_0_5(){
        int []Stack_00_col = {-50,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-26,29,-37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-26,29,-37};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_3_0_6(){
        int []Stack_00_col = {14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -41;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-7,3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-7,3};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_3_0_7(){
        int []Stack_00_col = {45,50,-36,-49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 21;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-41,-35,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-41,-35,-22};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {11,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {11,46};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_3_0_9(){
        int []Stack_00_col = {-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 50;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-35,8,32,-32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-35,8,32,-32};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret0 = (int)(Stack_11.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_35_4_0(){
            
            try{return (t_35_4_0_0() && t_35_4_0_1() && t_35_4_0_2() && t_35_4_0_3() && t_35_4_0_4() && t_35_4_0_5() && t_35_4_0_6() && t_35_4_0_7() && t_35_4_0_8() && t_35_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -21;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_4_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 9;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {25,15,-45,36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-3,-40,27,50};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_4_0_2(){
        int []Stack_00_col = {-13,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-16,-37,35,43,39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {29,33,44,48,-13};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_4_0_3(){
        int []Stack_00_col = {-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {0,39,26,-23,43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {36,27,-3,-7,-35};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_4_0_4(){
        int []Stack_00_col = {8,44,-12,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {5,-45,20,-7};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_4_0_5(){
        int []Stack_00_col = {-24,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-4,50,-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {38,-35,-32,-34,23};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_4_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-39};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_4_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-25,44,-32,-22,-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-34,7,22,20,-44};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_4_0_8(){
        int []Stack_00_col = {50,-3,-26,-21,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {10,-31,-10,29,-6};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-2,1,20};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(push(Stack_0, int_0)) = isEmpty(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_35_4_0_9(){
        int []Stack_00_col = {39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 32;
    Stack_00.push(int_00);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret0 = (int)(Stack_20.size());
    Stack_10.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_36_0_0(){
            
            try{return (t_36_0_0_0() && t_36_0_0_1() && t_36_0_0_2() && t_36_0_0_3() && t_36_0_0_4() && t_36_0_0_5() && t_36_0_0_6() && t_36_0_0_7() && t_36_0_0_8() && t_36_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_1(){
        int []Stack_00_col = {-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_2(){
        int []Stack_00_col = {-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_4(){
        int []Stack_00_col = {24,-41,41,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {24,-41,41,-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_6(){
        int []Stack_00_col = {-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {-28};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_7(){
        int []Stack_00_col = {22,10,-43,17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {22,10,-43,17};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_0)
        @SuppressWarnings("unchecked")
        private static boolean t_36_0_0_9(){
        int []Stack_00_col = {24,28,50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_01_col = {24,28,50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_01.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_36_1_0(){
            
            try{return (t_36_1_0_0() && t_36_1_0_1() && t_36_1_0_2() && t_36_1_0_3() && t_36_1_0_4() && t_36_1_0_5() && t_36_1_0_6() && t_36_1_0_7() && t_36_1_0_8() && t_36_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_36_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_36_1_0_1(){
        int []Stack_00_col = {-11,17,-18,11};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {36,11,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_36_1_0_2(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_36_1_0_3(){
        int []Stack_00_col = {43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_36_1_0_4(){
        int []Stack_00_col = {19,17,50,-42,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-5,26,33,-37,27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_36_1_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_36_1_0_6(){
        int []Stack_00_col = {-6,31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {19,-10,5,-20,20};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_36_1_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-16,-42,44,48,33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_36_1_0_8(){
        int []Stack_00_col = {-21,1,-12,-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing empty(Stack_0) = isEmpty(Stack_1)
        @SuppressWarnings("unchecked")
        private static boolean t_36_1_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    boolean empty_ret0 = (boolean)(Stack_00.empty());
    int []Stack_10_col = {-46,24,0,34,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    boolean isEmpty_ret0 = (boolean)(Stack_10.isEmpty());
    boolean eq_ret0 = (boolean)(empty_ret0 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_37_0_0(){
            
            try{return (t_37_0_0_0() && t_37_0_0_1() && t_37_0_0_2() && t_37_0_0_3() && t_37_0_0_4() && t_37_0_0_5() && t_37_0_0_6() && t_37_0_0_7() && t_37_0_0_8() && t_37_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_0(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_1(){
        boolean bool_00 = true;
    int []Stack_00_col = {2,-38};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {2,-38};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_2(){
        boolean bool_00 = false;
    int []Stack_00_col = {7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_3(){
        boolean bool_00 = true;
    int []Stack_00_col = {0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_4(){
        boolean bool_00 = true;
    int []Stack_00_col = {-30,-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-30,-18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_5(){
        boolean bool_00 = true;
    int []Stack_00_col = {30,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {30,27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_6(){
        boolean bool_00 = true;
    int []Stack_00_col = {10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {10};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_7(){
        boolean bool_00 = true;
    int []Stack_00_col = {-5,-11,-47,-7};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-5,-11,-47,-7};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_8(){
        boolean bool_00 = false;
    int []Stack_00_col = {-5,11,13,-32,24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-5,11,13,-32,24};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_0_0_9(){
        boolean bool_00 = true;
    int []Stack_00_col = {-7,-30,34,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-7,-30,34,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_37_1_0(){
            
            try{return (t_37_1_0_0() && t_37_1_0_1() && t_37_1_0_2() && t_37_1_0_3() && t_37_1_0_4() && t_37_1_0_5() && t_37_1_0_6() && t_37_1_0_7() && t_37_1_0_8() && t_37_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_0(){
        boolean bool_00 = false;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_1(){
        boolean bool_00 = false;
    int []Stack_00_col = {7,19,19,2,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_2(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {37,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_3(){
        boolean bool_00 = true;
    int []Stack_00_col = {-9,19,42,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_4(){
        boolean bool_00 = false;
    int []Stack_00_col = {50,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_5(){
        boolean bool_00 = true;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_6(){
        boolean bool_00 = false;
    int []Stack_00_col = {9,23,-22};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_7(){
        boolean bool_00 = false;
    int []Stack_00_col = {-30,4,29,20};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_8(){
        boolean bool_00 = true;
    int []Stack_00_col = {33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-10};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        

        //testing bool_0 = isEmpty(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_37_1_0_9(){
        boolean bool_00 = false;
    int []Stack_00_col = {9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {17,44,42,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    boolean isEmpty_ret0 = (boolean)(Stack_00.isEmpty());
    boolean eq_ret0 = (boolean)(bool_00 == isEmpty_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_38_0_0(){
            
            try{return (t_38_0_0_0() && t_38_0_0_1() && t_38_0_0_2() && t_38_0_0_3() && t_38_0_0_4() && t_38_0_0_5() && t_38_0_0_6() && t_38_0_0_7() && t_38_0_0_8() && t_38_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_1(){
        int []Stack_00_col = {-26,-43,1,4,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-26,-43,1,4,-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-26,-43,1,4,-47};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_2(){
        int []Stack_00_col = {-44,-37,-39,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-44,-37,-39,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-44,-37,-39,-12};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_3(){
        int []Stack_00_col = {36,-22,-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -23;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {36,-22,-21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {36,-22,-21};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_4(){
        int []Stack_00_col = {-40,-17,21,-19,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 47;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-40,-17,21,-19,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-40,-17,21,-19,9};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -33;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_6(){
        int []Stack_00_col = {-18,4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-18,4};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-18,4};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_7(){
        int []Stack_00_col = {-23,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-23,-29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-23,-29};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -35;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_0_0_9(){
        int []Stack_00_col = {-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -12;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-48};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_02_col = {-48};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int size_ret1 = (int)(Stack_02.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_38_1_0(){
            
            try{return (t_38_1_0_0() && t_38_1_0_1() && t_38_1_0_2() && t_38_1_0_3() && t_38_1_0_4() && t_38_1_0_5() && t_38_1_0_6() && t_38_1_0_7() && t_38_1_0_8() && t_38_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -36;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 46;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {39,-24,46,-41};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_2(){
        int []Stack_00_col = {-29,-47,38,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -18;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-29,-47,38,-33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {48,-45,-18,-46,-35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_3(){
        int []Stack_00_col = {0,-13,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -48;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {0,-13,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-14,-15,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_4(){
        int []Stack_00_col = {-16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-13,-28,-47,36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_5(){
        int []Stack_00_col = {-17,-1};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 12;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-17,-1};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-10,6,34,36,7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_6(){
        int []Stack_00_col = {12,-6,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {12,-6,-47};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-36,43,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_7(){
        int []Stack_00_col = {27,25,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {27,25,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_8(){
        int []Stack_00_col = {20,-23,-41,43,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 44;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {20,-23,-41,43,2};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {9,27,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_0, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_1_0_9(){
        int []Stack_00_col = {-27,14,38,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_01_col = {-27,14,38,19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int []Stack_10_col = {-32,-24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret1 = (int)(Stack_10.size());
    Stack_01.push(size_ret1);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_38_2_0(){
            
            try{return (t_38_2_0_0() && t_38_2_0_1() && t_38_2_0_2() && t_38_2_0_3() && t_38_2_0_4() && t_38_2_0_5() && t_38_2_0_6() && t_38_2_0_7() && t_38_2_0_8() && t_38_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 22;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_2_0_1(){
        int []Stack_00_col = {-32,35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 5;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-32,35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_2_0_2(){
        int []Stack_00_col = {44,-1,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {2,-43};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {44,-1,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_2_0_3(){
        int []Stack_00_col = {7,-7,45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 31;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-27,9,-23,-2};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {7,-7,45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_2_0_4(){
        int []Stack_00_col = {-21};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -34;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-23,8,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-21};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_2_0_5(){
        int []Stack_00_col = {12,48,29,-22,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 38;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-24,-17};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {12,48,29,-22,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_2_0_6(){
        int []Stack_00_col = {-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 43;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-14,-33,28};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_2_0_7(){
        int []Stack_00_col = {-28,-19,0,13,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-47,-33,8,-32,-21};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {-28,-19,0,13,3};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_2_0_8(){
        int []Stack_00_col = {25,43,-38,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-24,-50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {25,43,-38,-6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_2_0_9(){
        int []Stack_00_col = {50,-14,-24,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {33,-9,29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_01_col = {50,-14,-24,18};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret1 = (int)(Stack_01.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_38_3_0(){
            
            try{return (t_38_3_0_0() && t_38_3_0_1() && t_38_3_0_2() && t_38_3_0_3() && t_38_3_0_4() && t_38_3_0_5() && t_38_3_0_6() && t_38_3_0_7() && t_38_3_0_8() && t_38_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_3_0_1(){
        int []Stack_00_col = {28,13,-9,29,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -38;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {38,49,44,16,24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {38,49,44,16,24};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_3_0_2(){
        int []Stack_00_col = {47,-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-47,29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-47,29};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_3_0_3(){
        int []Stack_00_col = {-43,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 45;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {6,-33,48};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {6,-33,48};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_3_0_4(){
        int []Stack_00_col = {-50,24,2,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -3;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-25,27,-33,42,14};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-25,27,-33,42,14};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_3_0_5(){
        int []Stack_00_col = {-41,46,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-7};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_3_0_6(){
        int []Stack_00_col = {-4,17,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_3_0_7(){
        int []Stack_00_col = {16,-24,16,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -14;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-50,-12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-50,-12};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_3_0_8(){
        int []Stack_00_col = {-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -46;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {46,-50,-27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {46,-50,-27};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_1)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_3_0_9(){
        int []Stack_00_col = {44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 24;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-50,-13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_11_col = {-50,-13};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int size_ret1 = (int)(Stack_11.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_38_4_0(){
            
            try{return (t_38_4_0_0() && t_38_4_0_1() && t_38_4_0_2() && t_38_4_0_3() && t_38_4_0_4() && t_38_4_0_5() && t_38_4_0_6() && t_38_4_0_7() && t_38_4_0_8() && t_38_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 18;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_4_0_1(){
        int []Stack_00_col = {-42,43,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-42};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {23,-25,9,28,-1};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_4_0_2(){
        int []Stack_00_col = {-20,-13,-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-13,-34,24};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-27,-3,-7,39};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_4_0_3(){
        int []Stack_00_col = {47,-21,-32,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 25;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {35};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {48};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_4_0_4(){
        int []Stack_00_col = {-8,38,-33,3,-32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 17;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-38,7,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-27};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_4_0_5(){
        int []Stack_00_col = {-7,-10,-18,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-28,32};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {36};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_4_0_6(){
        int []Stack_00_col = {-42,16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 40;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {18,-38,19};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_4_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-39};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-48};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_4_0_8(){
        int []Stack_00_col = {44,42,15,-28,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {-14,29,-30,8,25};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {-27,14,-36,50};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing size(push(Stack_0, int_0)) = peek(push(Stack_1, size(Stack_2)))
        @SuppressWarnings("unchecked")
        private static boolean t_38_4_0_9(){
        int []Stack_00_col = {-43,2,12,-7,-4};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int size_ret0 = (int)(Stack_00.size());
    int []Stack_10_col = {1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int size_ret1 = (int)(Stack_20.size());
    Stack_10.push(size_ret1);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(size_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_39_0_0(){
            
            try{return (t_39_0_0_0() && t_39_0_0_1() && t_39_0_0_2() && t_39_0_0_3() && t_39_0_0_4() && t_39_0_0_5() && t_39_0_0_6() && t_39_0_0_7() && t_39_0_0_8() && t_39_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -11;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 7;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_2(){
        int []Stack_00_col = {40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 8;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 8;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_3(){
        int []Stack_00_col = {41,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 33;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {41,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 33;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_4(){
        int []Stack_00_col = {-5,-13,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-5,-13,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -10;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_5(){
        int []Stack_00_col = {-31,4,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-31,4,-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = 13;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_6(){
        int []Stack_00_col = {10,-8,-18,19,-29};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -29;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {10,-8,-18,19,-29};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -29;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_7(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -4;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -4;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -1;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_0_0_9(){
        int []Stack_00_col = {-30,-5,17,-36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-30,-5,17,-36};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_01 = -1;
    Stack_01.push(int_01);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_39_1_0(){
            
            try{return (t_39_1_0_0() && t_39_1_0_1() && t_39_1_0_2() && t_39_1_0_3() && t_39_1_0_4() && t_39_1_0_5() && t_39_1_0_6() && t_39_1_0_7() && t_39_1_0_8() && t_39_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -25;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 31;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_1(){
        int []Stack_00_col = {7,-6,21,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 35;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {7,-6,21,0};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 12;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_2(){
        int []Stack_00_col = {16};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {16};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -46;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_3(){
        int []Stack_00_col = {-1,-33,38,5,-33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-1,-33,38,5,-33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 47;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_4(){
        int []Stack_00_col = {-45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 13;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-45};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 45;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_5(){
        int []Stack_00_col = {-50,-12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-50,-12};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -48;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_6(){
        int []Stack_00_col = {-29,39,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-29,39,39};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 14;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_7(){
        int []Stack_00_col = {30,-22,8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 48;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {30,-22,8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 45;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_8(){
        int []Stack_00_col = {-15,43,34};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-15,43,34};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = 49;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_1_0_9(){
        int []Stack_00_col = {23,31,9};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -45;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {23,31,9};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_10 = -31;
    Stack_01.push(int_10);
    int peek_ret0 = (int)(Stack_01.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_39_2_0(){
            
            try{return (t_39_2_0_0() && t_39_2_0_1() && t_39_2_0_2() && t_39_2_0_3() && t_39_2_0_4() && t_39_2_0_5() && t_39_2_0_6() && t_39_2_0_7() && t_39_2_0_8() && t_39_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 10;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 10;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_1(){
        int []Stack_00_col = {-44,3,-15,-34,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {9,8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 27;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_2(){
        int []Stack_00_col = {46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -24;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {24,1,-11,0};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -24;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_3(){
        int []Stack_00_col = {38,-20,-42,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -15;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-23,-22,-46,-2,-30};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -15;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_4(){
        int []Stack_00_col = {-6,-6,47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-36};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 11;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_5(){
        int []Stack_00_col = {-8,-38,15,18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-13,41,-7};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 41;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_6(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -50;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {50,40,-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -50;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_7(){
        int []Stack_00_col = {22,-34,-11,-5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 19;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-3,-38,-22};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 19;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -1;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = -1;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_39_2_0_9(){
        int []Stack_00_col = {-24,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 41;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_01 = 41;
    Stack_10.push(int_01);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_39_3_0(){
            
            try{return (t_39_3_0_0() && t_39_3_0_1() && t_39_3_0_2() && t_39_3_0_3() && t_39_3_0_4() && t_39_3_0_5() && t_39_3_0_6() && t_39_3_0_7() && t_39_3_0_8() && t_39_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -7;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 0;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_1(){
        int []Stack_00_col = {-7,42,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 34;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-10,19,46,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 42;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_2(){
        int []Stack_00_col = {-43,21,11,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -22;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {27};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -12;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_3(){
        int []Stack_00_col = {20,12};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-5,-26,-42,42,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 39;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_4(){
        int []Stack_00_col = {-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 27;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-34,15,-7,-12,-11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 22;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_5(){
        int []Stack_00_col = {-22,29,3,-44};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -49;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {38,5,41,48,-16};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -40;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_6(){
        int []Stack_00_col = {-3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 16;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-17,-47,-40,40,12};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = 26;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_7(){
        int []Stack_00_col = {38,-48,8,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 0;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -47;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = -20;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -48;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, int_0)) = peek(push(Stack_1, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_39_3_0_9(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_00 = 11;
    Stack_00.push(int_00);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_10 = -27;
    Stack_10.push(int_10);
    int peek_ret0 = (int)(Stack_10.peek());
    boolean eq_ret0 = (boolean)(pop_ret0 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_40_0_0(){
            
            try{return (t_40_0_0_0() && t_40_0_0_1() && t_40_0_0_2() && t_40_0_0_3() && t_40_0_0_4() && t_40_0_0_5() && t_40_0_0_6() && t_40_0_0_7() && t_40_0_0_8() && t_40_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = 23;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_1(){
        int []Stack_00_col = {-49,50,-12,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-49,50,-12,23};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-49,50,-12,23};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = 34;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_2(){
        int []Stack_00_col = {47,-15,19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {47,-15,19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {47,-15,19};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = -8;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = 40;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_4(){
        int []Stack_00_col = {41,-14,25};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {41,-14,25};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {41,-14,25};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = -47;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_5(){
        int []Stack_00_col = {-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {-14};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = -25;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_6(){
        int []Stack_00_col = {50,-25,24,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {50,-25,24,-19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {50,-25,24,-19};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = 42;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_7(){
        int []Stack_00_col = {19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {19};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {19};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = -46;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = 40;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_0_0_9(){
        int []Stack_00_col = {20,14,26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {20,14,26};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_02_col = {20,14,26};
Stack Stack_02 = new Stack();
for(int i = Stack_02_col.length-1; i>=0 ; --i) Stack_02.push(Stack_02_col[i]);
    int int_00 = -48;
    Stack_02.push(int_00);
    int pop_ret1 = (int)(Stack_02.pop());
    int size_ret1 = (int)(Stack_02.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_40_1_0(){
            
            try{return (t_40_1_0_0() && t_40_1_0_1() && t_40_1_0_2() && t_40_1_0_3() && t_40_1_0_4() && t_40_1_0_5() && t_40_1_0_6() && t_40_1_0_7() && t_40_1_0_8() && t_40_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -46;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_1(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {19,-28,-9};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 15;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_2(){
        int []Stack_00_col = {-46,-19,-9,-42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-46,-19,-9,-42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {7,4,30,35,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -35;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_3(){
        int []Stack_00_col = {13,47,-15,-6};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {13,47,-15,-6};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {23,-14,29,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -31;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_4(){
        int []Stack_00_col = {-17,50,-37,-35};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-17,50,-37,-35};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-22,1};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -15;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_5(){
        int []Stack_00_col = {13,-32,-8};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {13,-32,-8};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-42,-25,42,45};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 15;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_6(){
        int []Stack_00_col = {-7,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-7,42};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {19,4,37,47};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 7;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_7(){
        int []Stack_00_col = {-27,-9,-15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-27,-9,-15};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -8;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_8(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {37,-36,46};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = -1;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_0))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_1_0_9(){
        int []Stack_00_col = {-22,40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_01_col = {-22,40};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int size_ret0 = (int)(Stack_01.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_10_col = {-5};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int int_00 = 17;
    Stack_10.push(int_00);
    int pop_ret1 = (int)(Stack_10.pop());
    int size_ret1 = (int)(Stack_10.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_40_2_0(){
            
            try{return (t_40_2_0_0() && t_40_2_0_1() && t_40_2_0_2() && t_40_2_0_3() && t_40_2_0_4() && t_40_2_0_5() && t_40_2_0_6() && t_40_2_0_7() && t_40_2_0_8() && t_40_2_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -11;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_1(){
        int []Stack_00_col = {-4,-32,33,37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-4,-32,33,37};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -26;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_2(){
        int []Stack_00_col = {-35,21,-49,43,-27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-35,21,-49,43,-27};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 7;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_3(){
        int []Stack_00_col = {10,24,43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {28,-23,-11,-27,3};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {10,24,43};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -43;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_4(){
        int []Stack_00_col = {11,33};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {11,33};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -44;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_5(){
        int []Stack_00_col = {8,-38,20,30,-14};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-8};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {8,-38,20,30,-14};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 45;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_6(){
        int []Stack_00_col = {-30,-23,5};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-30,-23,5};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 20;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_7(){
        int []Stack_00_col = {-18,-44,7,-6,13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-18,-44,7,-6,13};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -19;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_8(){
        int []Stack_00_col = {48,-10,-26,-46};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {48,-10,-26,-46};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = 31;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_0, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_2_0_9(){
        int []Stack_00_col = {-18,-50};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-47,4,31,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_01_col = {-18,-50};
Stack Stack_01 = new Stack();
for(int i = Stack_01_col.length-1; i>=0 ; --i) Stack_01.push(Stack_01_col[i]);
    int int_00 = -49;
    Stack_01.push(int_00);
    int pop_ret1 = (int)(Stack_01.pop());
    int size_ret1 = (int)(Stack_01.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_40_3_0(){
            
            try{return (t_40_3_0_0() && t_40_3_0_1() && t_40_3_0_2() && t_40_3_0_3() && t_40_3_0_4() && t_40_3_0_5() && t_40_3_0_6() && t_40_3_0_7() && t_40_3_0_8() && t_40_3_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -10;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_1(){
        int []Stack_00_col = {8,25,44,-47,-47};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-9,35,7,26};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-9,35,7,26};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -3;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_2(){
        int []Stack_00_col = {36,33,-40};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = 50;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_3(){
        int []Stack_00_col = {-1,27};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -35;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_4(){
        int []Stack_00_col = {-24,-19};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {29,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {29,11};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -27;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_5(){
        int []Stack_00_col = {37};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-37,-1,-36,-20,-40};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-37,-1,-36,-20,-40};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = 29;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_6(){
        int []Stack_00_col = {30,-36,18,36};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {42,7,-44};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {42,7,-44};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -4;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_7(){
        int []Stack_00_col = {36,-17,-12,-18,32};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {2,17,-14,-37};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {2,17,-14,-37};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = 18;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_8(){
        int []Stack_00_col = {-13};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {46,1,26,-46,11};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {46,1,26,-46,11};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = 15;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_1, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_3_0_9(){
        int []Stack_00_col = {-18,-39,32,-28};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-32,18};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_11_col = {-32,18};
Stack Stack_11 = new Stack();
for(int i = Stack_11_col.length-1; i>=0 ; --i) Stack_11.push(Stack_11_col[i]);
    int int_00 = -20;
    Stack_11.push(int_00);
    int pop_ret1 = (int)(Stack_11.pop());
    int size_ret1 = (int)(Stack_11.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_40_4_0(){
            
            try{return (t_40_4_0_0() && t_40_4_0_1() && t_40_4_0_2() && t_40_4_0_3() && t_40_4_0_4() && t_40_4_0_5() && t_40_4_0_6() && t_40_4_0_7() && t_40_4_0_8() && t_40_4_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_0(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = -48;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_1(){
        int []Stack_00_col = {45};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-22,-5};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = -46;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_2(){
        int []Stack_00_col = {41,19,32,-46,49};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-31};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {39,12,-41};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = 50;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_3(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {36,-3,13};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {38,-44,11,-19};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = 46;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_4(){
        int []Stack_00_col = {-3,-31};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {16,-18,10,29};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = 50;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_5(){
        int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {19,42,-33};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {15,-49,-9,17,-34};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = -21;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_6(){
        int []Stack_00_col = {42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {36,-7,23,-49};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {-22,50,44};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = 27;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_7(){
        int []Stack_00_col = {-25,27,-24};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {14,-12,-25,-38};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {11,-28};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = -18;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_8(){
        int []Stack_00_col = {-18};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-8,5,34};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {30,12,-17};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = 15;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        

        //testing pop(push(Stack_0, size(Stack_1))) = size(pop(push(Stack_2, int_0)))
        @SuppressWarnings("unchecked")
        private static boolean t_40_4_0_9(){
        int []Stack_00_col = {-11,-16,2};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int []Stack_10_col = {-50};
Stack Stack_10 = new Stack();
for(int i = Stack_10_col.length-1; i>=0 ; --i) Stack_10.push(Stack_10_col[i]);
    int size_ret0 = (int)(Stack_10.size());
    Stack_00.push(size_ret0);
    int pop_ret0 = (int)(Stack_00.pop());
    int []Stack_20_col = {46,-5};
Stack Stack_20 = new Stack();
for(int i = Stack_20_col.length-1; i>=0 ; --i) Stack_20.push(Stack_20_col[i]);
    int int_00 = 5;
    Stack_20.push(int_00);
    int pop_ret1 = (int)(Stack_20.pop());
    int size_ret1 = (int)(Stack_20.size());
    boolean eq_ret0 = (boolean)(pop_ret0 == size_ret1);
            return eq_ret0;
        }
        
        

        private static boolean f_41_0_0(){
            
            try{return (t_41_0_0_0() && t_41_0_0_1() && t_41_0_0_2() && t_41_0_0_3() && t_41_0_0_4() && t_41_0_0_5() && t_41_0_0_6() && t_41_0_0_7() && t_41_0_0_8() && t_41_0_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_0(){
        int int_00 = -3;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -3;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_1(){
        int int_00 = 16;
    int []Stack_00_col = {18,19,38,39};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 16;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_2(){
        int int_00 = 8;
    int []Stack_00_col = {-29,-12,-9,3};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 8;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_3(){
        int int_00 = 4;
    int []Stack_00_col = {-35,-25,-43,42};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 4;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_4(){
        int int_00 = -26;
    int []Stack_00_col = {33,-26};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -26;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_5(){
        int int_00 = -29;
    int []Stack_00_col = {-41,-17,43};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -29;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_6(){
        int int_00 = -49;
    int []Stack_00_col = {19,18,-17};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -49;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_7(){
        int int_00 = 0;
    int []Stack_00_col = {-23,-28,-48,-38,48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = 0;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_8(){
        int int_00 = -42;
    int []Stack_00_col = {-30,-5,-21,15,-48};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -42;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_0))
        @SuppressWarnings("unchecked")
        private static boolean t_41_0_0_9(){
        int int_00 = -40;
    int []Stack_00_col = {-49,-23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_01 = -40;
    Stack_00.push(int_01);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        

        private static boolean f_41_1_0(){
            
            try{return (t_41_1_0_0() && t_41_1_0_1() && t_41_1_0_2() && t_41_1_0_3() && t_41_1_0_4() && t_41_1_0_5() && t_41_1_0_6() && t_41_1_0_7() && t_41_1_0_8() && t_41_1_0_9());}
            catch(EmptyStackException e){return false;}
            catch(java.util.NoSuchElementException e){return false;}
            catch(java.lang.IndexOutOfBoundsException e){return false;}
            
        }
        
        
        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_0(){
        int int_00 = 14;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 17;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_1(){
        int int_00 = -31;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 23;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_2(){
        int int_00 = 24;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -17;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_3(){
        int int_00 = -33;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 9;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_4(){
        int int_00 = 49;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 27;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_5(){
        int int_00 = -8;
    int []Stack_00_col = {-27,15};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -10;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_6(){
        int int_00 = -38;
    int []Stack_00_col = {34,-12,24,23};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -14;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_7(){
        int int_00 = 26;
    int []Stack_00_col = {8,-7,4,46,0};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -32;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_8(){
        int int_00 = 4;
    int []Stack_00_col = {22,-10};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = -35;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        

        //testing int_0 = peek(push(Stack_0, int_1))
        @SuppressWarnings("unchecked")
        private static boolean t_41_1_0_9(){
        int int_00 = 38;
    int []Stack_00_col = {};
Stack Stack_00 = new Stack();
for(int i = Stack_00_col.length-1; i>=0 ; --i) Stack_00.push(Stack_00_col[i]);
    int int_10 = 17;
    Stack_00.push(int_10);
    int peek_ret0 = (int)(Stack_00.peek());
    boolean eq_ret0 = (boolean)(int_00 == peek_ret0);
            return eq_ret0;
        }
        
        
    }