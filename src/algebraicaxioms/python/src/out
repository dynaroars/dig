infer_axioms.py:Warn:DEBUG MODE ON. Can be slow !
alg.py:Info:seed: 1.0
alg.py:Info:2 terms
alg.py:Info:test for exceptions
[{<class 'int'>: (0,), <class '.Stack'>: (0,)}]
instantiating push(Stack, int)
typs_d {<class 'int'>: (0,), <class '.Stack'>: (0,)}
baa <class '.Stack'>, 0
baa <class 'int'>, 0
[{<class '.Stack'>: (0,)}]
instantiating pop(Stack)
typs_d {<class '.Stack'>: (0,)}
baa <class '.Stack'>, 0
alg_lang.py:Debug:cmd javac Test.java
alg_lang.py:Debug:cmd: java Test
alg.py:Info:1/2 ignores
eqfun.py:Info:2 enumerated terms
eqfun.py:Debug:
0. push(Stack, int)
1. pop(push(Stack, int))
eqfun.py:Info:1 const eqts
eqfun.py:Debug:
0. int = pop(push(Stack, int))
eqfun.py:Info:0 term eqts
alg.py:Info:1 eqt templates
alg.py:Info:1/1. testing 1 eqt templates
[{<class '.Stack'>: (0,), <class 'int'>: (0, 0)}, {<class '.Stack'>: (0,), <class 'int'>: (0, 1)}]
instantiating int = pop(push(Stack, int))
typs_d {<class '.Stack'>: (0,), <class 'int'>: (0, 0)}
baa <class 'int'>, 0
baa <class '.Stack'>, 0
baa <class 'int'>, 1
instantiating int = pop(push(Stack, int))
typs_d {<class '.Stack'>: (0,), <class 'int'>: (0, 1)}
baa <class 'int'>, 0
baa <class '.Stack'>, 0
baa <class 'int'>, 1
alg.py:Info:2 instantiated candidates
alg.py:Info:test against random inputs
alg_lang.py:Debug:cmd javac Test.java
alg_lang.py:Debug:cmd: java Test
alg.py:Info:1 candidate(s)
alg.py:Debug:
0. int_0 = pop(push(Stack_0, int_0))
alg.py:Info:1 candidates(s) total
alg.py:Info:after 1st pruning 1 candidate(s)
alg.py:Info:after 2nd pruning, 1 candidate(s)
alg.py:Info:
0. int_0 = pop(push(Stack_0, int_0))
