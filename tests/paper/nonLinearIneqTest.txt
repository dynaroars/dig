By default Dig finds the linear octagonal inequality invaribales. We can introduce new variables to
find non-linear octagonal invariable. The intended purpose of this test is to observe the tradeoff
of program speed (runtime) for non-linear inequalities.

For this test, the program Sqrt1.java is used. We have 4 variables a, n, s, t in the program. If we
want 2nd degree non-linear inequalies, we will have to introduce new variables a^2, n^2, s^2, t^2,
and 4C2 = 6 new variables which are products of 2 existing variables. So, we change the program to
introduce following 10 new variables:

a2 = a*a    
n2 = n*n    
t2 = t*t  
s2 = s*s  
an = a*n
at = a*t
m = a*s
nt = n*t
ns = n*s
ts = t*s

The modified program SqrtNonLin:

-----------------------
public class Sqrt1NonLin {
    public static void vtrace1(int a, int n, int t, int s, int a2, int n2, int t2, int s2, int an,
    int at, int m, int nt, int ns, int ts){}
    // public static void vtrace2(int a, int n, int t, int s){}    
    public static void main (String[] args) {}

    public static int mainQ(int n){
	//for a to be sqrt of n,  needs to assume that n >= 0
	assert(n >= 0);

	int a,s,t;
	int a2, n2, t2, s2, an, at, m, nt, ns, ts;
	a=0;
	s=1;
	t=1;
	a2 = a*a;
	n2 = n*n;
	t2 = t*t;
	s2 = s*s;
	an = a*n;
	at = a*t;
	m = a*s;
	nt = n*t;
	ns = n*s;
	ts = t*s;

	int ctr = 0;
	while(true){
	    //assert(t == 2*a + 1);
	    //assert(s == (a + 1)*(a + 1));
	    //assert(4s == t*t + 2*t + 1);
	    vtrace1(a, n, t, s, a2, n2, t2, s2, an, at, m, nt, ns, ts);
	    if(!(s <= n)) break;
	    a=a+1;
	    t=t+2;
	    s=s+t;
	    a2 = a*a;
	    t2 = t*t;
	    s2 = s*s;
	    an = a*n;
	    at = a*t;
	    m = a*s;
	    nt = n*t;
	    ns = n*s;
	    ts = t*s;

	}
	// vtrace2(a, n, t, s);
	/*
	  2*a - t + 1 == 0
	  (t*t) - 4*s + 2*t + 1 == 0
	*/
	return a;
     
    }
}
---------------------------------------------

Running dig for the modified program to find octagonal inequalities with coefficient [-1,1], we get:

List 1 (9.07 s):
1. n - nt <= 0
2. n - ns <= 0
3. n - n2 <= 0
4. a2 - n <= 0
5. a <= 10
6. a - n <= 0
7. -ts <= -1
8. -t2 <= -1
9. -t <= -1
10. -s2 <= -1
11. -s <= -1
12. -n + t <= 2
13. -m <= 0
14. -at <= 0
15. -an <= 0
16. -a2 <= 0
17. -a <= 0


for coefficient interval [-2,2], we get:

List 2(17.04 s)
1. n - nt <= 0
2. n - ns <= 0
3. at - 2*n <= 10
4. a2 - n <= 0
5. 2*n - n2 <= 1
6. 2*a <= 20
7. 2*a - n <= 1
8. -ts <= -1
9. -t2 <= -1
10. -s2 <= -1
11. -n2 <= 0
12. -n + 2*t <= 6
13. -m <= 0
14. -an <= 0
15. -2*t <= -2
16. -2*s <= -2
17. -2*n + t <= 1
18. -2*n + s <= 2
19. -2*at <= 0
20. -2*a2 <= 0
21. -2*a <= 0

[Note: -noeqts flag was used, that is dig was asked to not find any equality invariable]

We see that there are a number of 2nd degree non-linear inequalities in the lists. While some of
them are very obvious such as -s2 <= -1, we can see some interesting invariables too. For example,
the invariable a2 - n <= 0 confirms that a^2 never exceeds n which is intended in the program given
that the final value of a is the square root of n.  
